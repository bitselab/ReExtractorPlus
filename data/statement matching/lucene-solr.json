{
  "results": [
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "a5d84631196f9e70316726ee114adbc2b62dfe64",
      "url": "https://github.com/apache/lucene-solr/commit/a5d84631196f9e70316726ee114adbc2b62dfe64",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.GeneratingSuggester",
        "type": "Method",
        "name": "findSimilarDictionaryEntries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/GeneratingSuggester.java",
        "startLine": 62,
        "endLine": 96,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.GeneratingSuggester",
        "type": "Method",
        "name": "findSimilarDictionaryEntries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/GeneratingSuggester.java",
        "startLine": 64,
        "endLine": 104,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Comparator<Weighted<Root<String>>> natural=Comparator.naturalOrder();\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 5,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Comparator<Weighted<Root<String>>> natural=Comparator.naturalOrder();\n",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 5,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PriorityQueue<Weighted<Root<String>>> roots=new PriorityQueue<>(natural.reversed());\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 5,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PriorityQueue<Weighted<Root<String>>> roots=new PriorityQueue<>(natural.reversed());\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 5,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return roots.stream().sorted().collect(Collectors.toList());\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return roots.stream().sorted().collect(Collectors.toList());\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entries.isEmpty())",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 11,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entries.isEmpty())",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 7,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(originalCase == WordCase.LOWER && WordCase.caseOf(root) == WordCase.TITLE && !dictionary.hasLanguage(\"de\"))",
            "startLine": 75,
            "endLine": 79,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(originalCase == WordCase.LOWER && WordCase.caseOf(root) == WordCase.TITLE && !dictionary.hasLanguage(\"de\"))",
            "startLine": 84,
            "endLine": 88,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(roots.size() == MAX_ROOTS && sc < roots.peek().score)",
            "startLine": 86,
            "endLine": 88,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(roots.size() == MAX_ROOTS && sc < roots.peek().score)",
            "startLine": 94,
            "endLine": 96,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(roots.size() > MAX_ROOTS)",
            "startLine": 91,
            "endLine": 93,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(roots.size() > MAX_ROOTS)",
            "startLine": 99,
            "endLine": 101,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "roots.poll();\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "roots.poll();\n",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String root=toString(key);\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 11,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String root=toString(key);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 7,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String lower=dictionary.toLowerCase(root);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 11,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String lower=dictionary.toLowerCase(root);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int sc=ngram(3,word,lower,EnumSet.of(NGramOptions.LONGER_WORSE)) + commonPrefix(word,root);\n",
            "startLine": 82,
            "endLine": 84,
            "startColumn": 11,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int sc=ngram(3,word,lower,EnumSet.of(NGramOptions.LONGER_WORSE)) + commonPrefix(word,root);\n",
            "startLine": 91,
            "endLine": 92,
            "startColumn": 7,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entries.forEach(e -> roots.add(new Weighted<>(e,sc)));\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 11,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entries.forEach(e -> roots.add(new Weighted<>(e,sc)));\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<Root<String>> entries=filterSuitableEntries(root,forms);\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 11,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<Root<String>> entries=filterSuitableEntries(root,mapping.output);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 7,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 77,
            "endLine": 79,
            "startColumn": 49,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 86,
            "endLine": 88,
            "startColumn": 45,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRefFSTEnum<IntsRef> fstEnum=new IntsRefFSTEnum<>(fst);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 7,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRefFSTEnum<IntsRef> fstEnum=new IntsRefFSTEnum<>(dictionary.words);\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 5,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "speller.checkCanceled.run();\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "speller.checkCanceled.run();\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 7,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRefFSTEnum.InputOutput<IntsRef> mapping;\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputOutput<IntsRef> mapping;\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 5,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while((mapping=fstEnum.next()) != null)",
            "startLine": 103,
            "endLine": 106,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while((mapping=nextKey(fstEnum,word.length() + 4)) != null)",
            "startLine": 71,
            "endLine": 102,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "url": "https://github.com/apache/lucene-solr/commit/34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "lookup",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 293,
        "endLine": 323,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "lookup",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 293,
        "endLine": 311,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fst == null)",
            "startLine": 294,
            "endLine": 296,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fst == null)",
            "startLine": 294,
            "endLine": 296,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 7,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 7,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=offset, cp; i < l; i+=Character.charCount(cp))",
            "startLine": 305,
            "endLine": 312,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=offset, cp; i < l; i+=Character.charCount(cp))",
            "startLine": 303,
            "endLine": 309,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FST.BytesReader bytesReader=fst.getBytesReader();\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FST.BytesReader bytesReader=fst.getBytesReader();\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 5,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FST.Arc<IntsRef> arc=fst.getFirstArc(new FST.Arc<>());\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FST.Arc<IntsRef> arc=fst.getFirstArc(new FST.Arc<>());\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int l=offset + length;\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int l=offset + length;\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 5,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cp=Character.codePointAt(word,i,l);\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cp=Character.codePointAt(word,i,l);\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 7,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fst.findTargetArc(cp,arc,arc,bytesReader) == null)",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(output == null)",
            "startLine": 306,
            "endLine": 308,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 313,
            "endLine": 315,
            "startColumn": 76,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 306,
            "endLine": 308,
            "startColumn": 27,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=NO_OUTPUT;\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 5,
            "endColumn": 48
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 11,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IntsRef NO_OUTPUT=fst.outputs.getNoOutput();\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 5,
            "endColumn": 48
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 307,
            "endLine": 309,
            "startColumn": 67,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 306,
            "endLine": 308,
            "startColumn": 27,
            "endColumn": 8
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 317,
            "endLine": 317,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(bogus);\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 7,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(bogus);\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 7,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return fst.outputs.add(output,arc.output());\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return fst.outputs.add(output,arc.output());\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 5,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fst.findTargetArc(FST.END_LABEL,arc,arc,bytesReader) == null)",
            "startLine": 313,
            "endLine": 319,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fst.findTargetArc(ch,arc,arc,reader) == null)",
            "startLine": 316,
            "endLine": 318,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 304,
            "endLine": 322,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 315,
            "endLine": 321,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(bogus)",
            "startLine": 320,
            "endLine": 322,
            "startColumn": 7,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(bogus)",
            "startLine": 319,
            "endLine": 321,
            "startColumn": 7,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 313,
            "endLine": 315,
            "startColumn": 76,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 316,
            "endLine": 318,
            "startColumn": 60,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "url": "https://github.com/apache/lucene-solr/commit/34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.GeneratingSuggester",
        "type": "Method",
        "name": "expandRoot",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/GeneratingSuggester.java",
        "startLine": 169,
        "endLine": 237,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.GeneratingSuggester",
        "type": "Method",
        "name": "expandRoot",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/GeneratingSuggester.java",
        "startLine": 169,
        "endLine": 225,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!dictionary.hasFlag(root.entryId,dictionary.needaffix))",
            "startLine": 173,
            "endLine": 175,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!dictionary.hasFlag(root.entryId,dictionary.needaffix))",
            "startLine": 173,
            "endLine": 175,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(root.word);\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(root.word);\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!hasCompatibleFlags(root,suffixId) || !checkAffixCondition(suffixId,root.word))",
            "startLine": 186,
            "endLine": 188,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!hasCompatibleFlags(root,suffixId) || !checkAffixCondition(suffixId,root.word))",
            "startLine": 182,
            "endLine": 184,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionary.isCrossProduct(suffixId))",
            "startLine": 193,
            "endLine": 195,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionary.isCrossProduct(suffixId))",
            "startLine": 190,
            "endLine": 192,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "crossProducts.add(withSuffix);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 15,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "crossProducts.add(withSuffix);\n",
            "startLine": 191,
            "endLine": 191,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> crossProducts=new ArrayList<>();\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> crossProducts=new ArrayList<>();\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 5,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> result=new LinkedHashSet<>();\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> result=new LinkedHashSet<>();\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 5,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result.stream().limit(MAX_WORDS).collect(Collectors.toList());\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result.stream().limit(MAX_WORDS).collect(Collectors.toList());\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 5,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String withSuffix=root.word.substring(0,root.word.length() - affixStripLength(suffixId)) + suffix;\n",
            "startLine": 190,
            "endLine": 191,
            "startColumn": 13,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String withSuffix=root.word.substring(0,root.word.length() - affixStripLength(suffixId)) + suffix;\n",
            "startLine": 187,
            "endLine": 188,
            "startColumn": 11,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(withSuffix);\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(withSuffix);\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 11,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String suffix=new StringBuilder(toString(key)).reverse().toString();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 11,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String suffix=misspelled.substring(misspelled.length() - suffixLength);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 11,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!dictionary.hasFlag(root.entryId,dictionary.affixData(prefixId,AFFIX_FLAG)) || !dictionary.isCrossProduct(prefixId))",
            "startLine": 208,
            "endLine": 211,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!dictionary.hasFlag(root.entryId,dictionary.affixData(prefixId,AFFIX_FLAG)) || !dictionary.isCrossProduct(prefixId))",
            "startLine": 200,
            "endLine": 203,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(suffixed: crossProducts)",
            "startLine": 213,
            "endLine": 217,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(suffixed: crossProducts)",
            "startLine": 206,
            "endLine": 210,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(checkAffixCondition(prefixId,suffixed))",
            "startLine": 214,
            "endLine": 216,
            "startColumn": 15,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(checkAffixCondition(prefixId,suffixed))",
            "startLine": 207,
            "endLine": 209,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(prefix + suffixed.substring(affixStripLength(prefixId)));\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 17,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(prefix + suffixed.substring(affixStripLength(prefixId)));\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 15,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(hasCompatibleFlags(root,prefixId) && checkAffixCondition(prefixId,root.word))",
            "startLine": 230,
            "endLine": 232,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(hasCompatibleFlags(root,prefixId) && checkAffixCondition(prefixId,root.word))",
            "startLine": 218,
            "endLine": 221,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 87,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 22,
            "endColumn": 29
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 89,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 89,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(prefix + root.word.substring(affixStripLength(prefixId)));\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 15,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(prefix + root.word.substring(affixStripLength(prefixId)));\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 13,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String prefix=toString(key);\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 11,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String prefix=misspelled.substring(0,prefixLength);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 209,
            "endLine": 211,
            "startColumn": 58,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 201,
            "endLine": 203,
            "startColumn": 56,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String prefix=toString(key);\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 11,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String prefix=misspelled.substring(0,prefixLength);\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 11,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 87,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 184,
            "endLine": 196,
            "startColumn": 48,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 181,
            "endLine": 193,
            "startColumn": 37,
            "endColumn": 10
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "processFST(dictionary.suffixes,(key,ids) -> {\n  String suffix=new StringBuilder(toString(key)).reverse().toString();\n  if (misspelled.length() <= suffix.length() || !misspelled.endsWith(suffix))   return;\n  for (int i=0; i < ids.length; i++) {\n    int suffixId=ids.ints[ids.offset + i];\n    if (!hasCompatibleFlags(root,suffixId) || !checkAffixCondition(suffixId,root.word)) {\n      continue;\n    }\n    String withSuffix=root.word.substring(0,root.word.length() - affixStripLength(suffixId)) + suffix;\n    result.add(withSuffix);\n    if (dictionary.isCrossProduct(suffixId)) {\n      crossProducts.add(withSuffix);\n    }\n  }\n}\n);\n",
            "startLine": 178,
            "endLine": 197,
            "startColumn": 5,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "processAffixes(false,misspelled,(suffixLength,suffixId) -> {\n  if (!hasCompatibleFlags(root,suffixId) || !checkAffixCondition(suffixId,root.word)) {\n    return;\n  }\n  String suffix=misspelled.substring(misspelled.length() - suffixLength);\n  String withSuffix=root.word.substring(0,root.word.length() - affixStripLength(suffixId)) + suffix;\n  result.add(withSuffix);\n  if (dictionary.isCrossProduct(suffixId)) {\n    crossProducts.add(withSuffix);\n  }\n}\n);\n",
            "startLine": 178,
            "endLine": 193,
            "startColumn": 5,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "url": "https://github.com/apache/lucene-solr/commit/34993c22ddbac702bfad321a04bbd753e9ade1c4",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Stemmer",
        "type": "Method",
        "name": "stem",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer.java",
        "startLine": 349,
        "endLine": 484,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Stemmer",
        "type": "Method",
        "name": "stem",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer.java",
        "startLine": 344,
        "endLine": 472,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(doPrefix && dictionary.prefixes != null)",
            "startLine": 378,
            "endLine": 428,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(doPrefix && dictionary.prefixes != null)",
            "startLine": 372,
            "endLine": 419,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < limit; i++)",
            "startLine": 385,
            "endLine": 427,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < limit; i++)",
            "startLine": 378,
            "endLine": 418,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(i > 0)",
            "startLine": 386,
            "endLine": 393,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(i > 0)",
            "startLine": 379,
            "endLine": 384,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!arc.isFinal())",
            "startLine": 394,
            "endLine": 396,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!arc.isFinal())",
            "startLine": 385,
            "endLine": 387,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 395,
            "endLine": 395,
            "startColumn": 11,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 386,
            "endLine": 386,
            "startColumn": 11,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=0; j < prefixes.length; j++)",
            "startLine": 399,
            "endLine": 426,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=0; j < prefixes.length; j++)",
            "startLine": 390,
            "endLine": 417,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int prefix=prefixes.ints[prefixes.offset + j];\n",
            "startLine": 400,
            "endLine": 400,
            "startColumn": 11,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int prefix=prefixes.ints[prefixes.offset + j];\n",
            "startLine": 391,
            "endLine": 391,
            "startColumn": 11,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(prefix == previous)",
            "startLine": 401,
            "endLine": 403,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(prefix == previous)",
            "startLine": 392,
            "endLine": 394,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 402,
            "endLine": 402,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 393,
            "endLine": 393,
            "startColumn": 13,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isAffixCompatible(prefix,prevFlag,recursionDepth,true,false,context))",
            "startLine": 405,
            "endLine": 425,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isAffixCompatible(prefix,prevFlag,recursionDepth,true,false,context))",
            "startLine": 396,
            "endLine": 416,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] strippedWord=stripAffix(word,offset,length,i,prefix,true);\n",
            "startLine": 406,
            "endLine": 406,
            "startColumn": 13,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] strippedWord=stripAffix(word,offset,length,i,prefix,true);\n",
            "startLine": 397,
            "endLine": 397,
            "startColumn": 13,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(strippedWord == null)",
            "startLine": 407,
            "endLine": 409,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(strippedWord == null)",
            "startLine": 398,
            "endLine": 400,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 408,
            "endLine": 408,
            "startColumn": 15,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 399,
            "endLine": 399,
            "startColumn": 15,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean pureAffix=strippedWord == word;\n",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean pureAffix=strippedWord == word;\n",
            "startLine": 402,
            "endLine": 402,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!applyAffix(strippedWord,pureAffix ? offset + i : 0,pureAffix ? length - i : strippedWord.length,context,prefix,previous,-1,recursionDepth,true,processor))",
            "startLine": 412,
            "endLine": 424,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!applyAffix(strippedWord,pureAffix ? offset + i : 0,pureAffix ? length - i : strippedWord.length,context,prefix,previous,-1,recursionDepth,true,processor))",
            "startLine": 403,
            "endLine": 415,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 422,
            "endLine": 424,
            "startColumn": 29,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 413,
            "endLine": 415,
            "startColumn": 29,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 15,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 15,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionary.suffixes != null)",
            "startLine": 430,
            "endLine": 481,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionary.suffixes != null)",
            "startLine": 421,
            "endLine": 469,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=length; i >= limit; i--)",
            "startLine": 437,
            "endLine": 480,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=length; i >= limit; i--)",
            "startLine": 427,
            "endLine": 468,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(i < length)",
            "startLine": 438,
            "endLine": 445,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(i < length)",
            "startLine": 428,
            "endLine": 433,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!arc.isFinal())",
            "startLine": 446,
            "endLine": 448,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!arc.isFinal())",
            "startLine": 434,
            "endLine": 436,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 11,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 11,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=0; j < suffixes.length; j++)",
            "startLine": 451,
            "endLine": 479,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=0; j < suffixes.length; j++)",
            "startLine": 439,
            "endLine": 467,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int suffix=suffixes.ints[suffixes.offset + j];\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 11,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int suffix=suffixes.ints[suffixes.offset + j];\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 11,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(suffix == previous)",
            "startLine": 453,
            "endLine": 455,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(suffix == previous)",
            "startLine": 441,
            "endLine": 443,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 442,
            "endLine": 442,
            "startColumn": 13,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isAffixCompatible(suffix,prevFlag,recursionDepth,false,previousWasPrefix,context))",
            "startLine": 457,
            "endLine": 478,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isAffixCompatible(suffix,prevFlag,recursionDepth,false,previousWasPrefix,context))",
            "startLine": 445,
            "endLine": 466,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 458,
            "endLine": 478,
            "startColumn": 85,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 446,
            "endLine": 466,
            "startColumn": 85,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] strippedWord=stripAffix(word,offset,length,length - i,suffix,false);\n",
            "startLine": 459,
            "endLine": 459,
            "startColumn": 13,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] strippedWord=stripAffix(word,offset,length,length - i,suffix,false);\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 13,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(strippedWord == null)",
            "startLine": 460,
            "endLine": 462,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(strippedWord == null)",
            "startLine": 448,
            "endLine": 450,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 461,
            "endLine": 461,
            "startColumn": 15,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 15,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean pureAffix=strippedWord == word;\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean pureAffix=strippedWord == word;\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!applyAffix(strippedWord,pureAffix ? offset : 0,pureAffix ? i : strippedWord.length,context,suffix,previous,prefixId,recursionDepth,false,processor))",
            "startLine": 465,
            "endLine": 477,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!applyAffix(strippedWord,pureAffix ? offset : 0,pureAffix ? i : strippedWord.length,context,suffix,previous,prefixId,recursionDepth,false,processor))",
            "startLine": 453,
            "endLine": 465,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 475,
            "endLine": 477,
            "startColumn": 29,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 463,
            "endLine": 465,
            "startColumn": 29,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 476,
            "endLine": 476,
            "startColumn": 15,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 15,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 388,
            "endLine": 390,
            "startColumn": 70,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 381,
            "endLine": 383,
            "startColumn": 31,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 389,
            "endLine": 389,
            "startColumn": 13,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 13,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 440,
            "endLine": 442,
            "startColumn": 70,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 430,
            "endLine": 432,
            "startColumn": 31,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 13,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 431,
            "endLine": 431,
            "startColumn": 13,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST<IntsRef> fst=dictionary.prefixes;\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 7,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST<IntsRef> fst=dictionary.prefixes;\n",
            "startLine": 373,
            "endLine": 373,
            "startColumn": 7,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST.Arc<IntsRef> arc=prefixArcs[recursionDepth];\n",
            "startLine": 380,
            "endLine": 380,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST.Arc<IntsRef> arc=prefixArcs[recursionDepth];\n",
            "startLine": 374,
            "endLine": 374,
            "startColumn": 7,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fst.getFirstArc(arc);\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fst.getFirstArc(arc);\n",
            "startLine": 375,
            "endLine": 375,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int limit=dictionary.fullStrip ? length + 1 : length;\n",
            "startLine": 384,
            "endLine": 384,
            "startColumn": 7,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int limit=dictionary.fullStrip ? length + 1 : length;\n",
            "startLine": 377,
            "endLine": 377,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef prefixes=fst.outputs.add(output,arc.nextFinalOutput());\n",
            "startLine": 397,
            "endLine": 397,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef prefixes=fst.outputs.add(output,arc.nextFinalOutput());\n",
            "startLine": 388,
            "endLine": 388,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST<IntsRef> fst=dictionary.suffixes;\n",
            "startLine": 431,
            "endLine": 431,
            "startColumn": 7,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST<IntsRef> fst=dictionary.suffixes;\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 7,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST.Arc<IntsRef> arc=suffixArcs[recursionDepth];\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FST.Arc<IntsRef> arc=suffixArcs[recursionDepth];\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 7,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fst.getFirstArc(arc);\n",
            "startLine": 433,
            "endLine": 433,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fst.getFirstArc(arc);\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int limit=dictionary.fullStrip ? 0 : 1;\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int limit=dictionary.fullStrip ? 0 : 1;\n",
            "startLine": 426,
            "endLine": 426,
            "startColumn": 7,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef suffixes=fst.outputs.add(output,arc.nextFinalOutput());\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef suffixes=fst.outputs.add(output,arc.nextFinalOutput());\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 483,
            "endLine": 483,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fst.findTargetArc(ch,arc,arc,prefixReader) == null)",
            "startLine": 388,
            "endLine": 392,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(output == null)",
            "startLine": 381,
            "endLine": 383,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fst.findTargetArc(ch,arc,arc,suffixReader) == null)",
            "startLine": 440,
            "endLine": 444,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(output == null)",
            "startLine": 430,
            "endLine": 432,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char ch=word[offset + i];\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 11,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "output=Dictionary.nextArc(fst,arc,suffixReader,output,word[offset + i]);\n",
            "startLine": 429,
            "endLine": 429,
            "startColumn": 11,
            "endColumn": 89
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char ch=word[offset + i - 1];\n",
            "startLine": 387,
            "endLine": 387,
            "startColumn": 11,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "output=Dictionary.nextArc(fst,arc,prefixReader,output,word[offset + i - 1]);\n",
            "startLine": 380,
            "endLine": 380,
            "startColumn": 11,
            "endColumn": 93
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=NO_OUTPUT;\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 7,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 7,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=NO_OUTPUT;\n",
            "startLine": 383,
            "endLine": 383,
            "startColumn": 7,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 7,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "output=fst.outputs.add(output,arc.output());\n",
            "startLine": 391,
            "endLine": 391,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "output=Dictionary.nextArc(fst,arc,prefixReader,output,word[offset + i - 1]);\n",
            "startLine": 380,
            "endLine": 380,
            "startColumn": 11,
            "endColumn": 93
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "output=fst.outputs.add(output,arc.output());\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "output=Dictionary.nextArc(fst,arc,suffixReader,output,word[offset + i]);\n",
            "startLine": 429,
            "endLine": 429,
            "startColumn": 11,
            "endColumn": 89
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef NO_OUTPUT=fst.outputs.getNoOutput();\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 7,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 7,
            "endColumn": 50
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef NO_OUTPUT=fst.outputs.getNoOutput();\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 7,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IntsRef output=fst.outputs.getNoOutput();\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 7,
            "endColumn": 50
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "42da2b45e6f38ecbb746e571692cc907b79ca426",
      "url": "https://github.com/apache/lucene-solr/commit/42da2b45e6f38ecbb746e571692cc907b79ca426",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.TestSpellChecking",
        "type": "Method",
        "name": "checkSpellCheckerExpectations",
        "filePath": "lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestSpellChecking.java",
        "startLine": 228,
        "endLine": 267,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.TestSpellChecking",
        "type": "Method",
        "name": "checkSpellCheckerExpectations",
        "filePath": "lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestSpellChecking.java",
        "startLine": 229,
        "endLine": 268,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 233,
            "endLine": 240,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 234,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 237,
            "endLine": 240,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 238,
            "endLine": 241,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(affixStream);\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 7,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(affixStream);\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(dictStream);\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 7,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(dictStream);\n",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 7,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(good))",
            "startLine": 243,
            "endLine": 247,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(good))",
            "startLine": 244,
            "endLine": 248,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(word: Files.readAllLines(good))",
            "startLine": 244,
            "endLine": 246,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(word: Files.readAllLines(good))",
            "startLine": 245,
            "endLine": 247,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"Unexpectedly considered misspelled: \" + word,speller.spell(word.trim()));\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"Unexpectedly considered misspelled: \" + word,speller.spell(word.trim()));\n",
            "startLine": 246,
            "endLine": 246,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(wrong))",
            "startLine": 251,
            "endLine": 266,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(wrong))",
            "startLine": 252,
            "endLine": 267,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 251,
            "endLine": 264,
            "startColumn": 30,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 252,
            "endLine": 265,
            "startColumn": 30,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> wrongWords=Files.readAllLines(wrong);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 7,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> wrongWords=Files.readAllLines(wrong);\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 7,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(word: wrongWords)",
            "startLine": 253,
            "endLine": 255,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(word: wrongWords)",
            "startLine": 254,
            "endLine": 256,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\"Unexpectedly considered correct: \" + word,speller.spell(word.trim()));\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\"Unexpectedly considered correct: \" + word,speller.spell(word.trim()));\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(sug))",
            "startLine": 256,
            "endLine": 263,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Files.exists(sug))",
            "startLine": 257,
            "endLine": 264,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String suggestions=wrongWords.stream().map(s -> String.join(\", \",speller.suggest(s))).filter(s -> !s.isEmpty()).collect(Collectors.joining(\"\\n\"));\n",
            "startLine": 257,
            "endLine": 261,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String suggestions=wrongWords.stream().map(s -> String.join(\", \",speller.suggest(s))).filter(s -> !s.isEmpty()).collect(Collectors.joining(\"\\n\"));\n",
            "startLine": 258,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(Files.readString(sug).trim(),suggestions);\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(Files.readString(sug).trim(),suggestions);\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 264,
            "endLine": 266,
            "startColumn": 12,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 265,
            "endLine": 267,
            "startColumn": 12,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\".sug file without .wrong file!\",Files.exists(sug));\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 7,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\".sug file without .wrong file!\",Files.exists(sug));\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 7,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream affixStream=Files.newInputStream(Path.of(basePath.toString() + \".aff\"));\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 5,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream affixStream=Files.newInputStream(Path.of(basePath.toString() + \".aff\"));\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 5,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream dictStream=Files.newInputStream(Path.of(basePath.toString() + \".dic\"));\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 5,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream dictStream=Files.newInputStream(Path.of(basePath.toString() + \".dic\"));\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 5,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Hunspell speller;\n",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Hunspell speller;\n",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Dictionary dictionary=new Dictionary(new ByteBuffersDirectory(),\"dictionary\",affixStream,dictStream);\n",
            "startLine": 234,
            "endLine": 235,
            "startColumn": 7,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Dictionary dictionary=new Dictionary(new ByteBuffersDirectory(),\"dictionary\",affixStream,dictStream);\n",
            "startLine": 235,
            "endLine": 236,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path good=Path.of(basePath + \".good\");\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path good=Path.of(basePath + \".good\");\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path wrong=Path.of(basePath + \".wrong\");\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path wrong=Path.of(basePath + \".wrong\");\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 5,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path sug=Path.of(basePath + \".sug\");\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path sug=Path.of(basePath + \".sug\");\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 5,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "speller=new Hunspell(dictionary);\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 7,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "speller=new Hunspell(dictionary,TimeoutPolicy.NO_TIMEOUT,() -> {\n}\n);\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 7,
            "endColumn": 78
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "ef920388e62464c7fee2397f8310f080de61a43a",
      "url": "https://github.com/apache/lucene-solr/commit/ef920388e62464c7fee2397f8310f080de61a43a",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Hunspell.CompoundPart",
        "type": "Method",
        "name": "CompoundPart",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Hunspell.java",
        "startLine": 280,
        "endLine": 292,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Hunspell.CompoundPart",
        "type": "Method",
        "name": "CompoundPart",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Hunspell.java",
        "startLine": 273,
        "endLine": 285,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.prev=prev;\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 7,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.prev=prev;\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 7,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.tail=tail;\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 7,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.tail=tail;\n",
            "startLine": 280,
            "endLine": 280,
            "startColumn": 7,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.length=length;\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.length=length;\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "index=prev == null ? 1 : prev.index + 1;\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 7,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "index=prev == null ? 1 : prev.index + 1;\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "enablingPattern=enabler;\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 7,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "enablingPattern=enabler;\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 7,
            "endColumn": 33
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.stem=stem.word;\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.root=root;\n",
            "startLine": 282,
            "endLine": 282,
            "startColumn": 7,
            "endColumn": 24
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "url": "https://github.com/apache/lucene-solr/commit/f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "mergeDictionaries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1007,
        "endLine": 1041,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "mergeDictionaries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1041,
        "endLine": 1077,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(ByteSequencesWriter writer=new ByteSequencesWriter(unsorted))",
            "startLine": 1015,
            "endLine": 1039,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(ByteSequencesWriter writer=new ByteSequencesWriter(unsorted))",
            "startLine": 1049,
            "endLine": 1075,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dictionary: dictionaries)",
            "startLine": 1016,
            "endLine": 1037,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dictionary: dictionaries)",
            "startLine": 1050,
            "endLine": 1073,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while((line=lines.readLine()) != null)",
            "startLine": 1021,
            "endLine": 1036,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while((line=lines.readLine()) != null)",
            "startLine": 1055,
            "endLine": 1072,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(line.isEmpty() || line.charAt(0) == '#' || line.charAt(0) == '\\t')",
            "startLine": 1023,
            "endLine": 1025,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(line.isEmpty() || line.charAt(0) == '#' || line.charAt(0) == '\\t')",
            "startLine": 1057,
            "endLine": 1059,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1024,
            "endLine": 1024,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1058,
            "endLine": 1058,
            "startColumn": 13,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(morphStart >= 0 && morphStart < line.length())",
            "startLine": 1030,
            "endLine": 1032,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(morphStart >= 0 && morphStart < line.length())",
            "startLine": 1064,
            "endLine": 1068,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringBuilder sb=new StringBuilder();\n",
            "startLine": 1013,
            "endLine": 1013,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringBuilder sb=new StringBuilder();\n",
            "startLine": 1047,
            "endLine": 1047,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexOutput unsorted=tempDir.createTempOutput(tempFileNamePrefix,\"dat\",IOContext.DEFAULT);\n",
            "startLine": 1014,
            "endLine": 1014,
            "startColumn": 5,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexOutput unsorted=tempDir.createTempOutput(tempFileNamePrefix,\"dat\",IOContext.DEFAULT);\n",
            "startLine": 1048,
            "endLine": 1048,
            "startColumn": 5,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BufferedReader lines=new BufferedReader(new InputStreamReader(dictionary,decoder));\n",
            "startLine": 1017,
            "endLine": 1017,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BufferedReader lines=new BufferedReader(new InputStreamReader(dictionary,decoder));\n",
            "startLine": 1051,
            "endLine": 1051,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.readLine();\n",
            "startLine": 1018,
            "endLine": 1018,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.readLine();\n",
            "startLine": 1052,
            "endLine": 1052,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String line;\n",
            "startLine": 1020,
            "endLine": 1020,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String line;\n",
            "startLine": 1054,
            "endLine": 1054,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "line=unescapeEntry(line);\n",
            "startLine": 1026,
            "endLine": 1026,
            "startColumn": 11,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "line=unescapeEntry(line);\n",
            "startLine": 1060,
            "endLine": 1060,
            "startColumn": 11,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int morphStart=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1029,
            "endLine": 1029,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int morphStart=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1063,
            "endLine": 1063,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "writeNormalizedWordEntry(sb,writer,line);\n",
            "startLine": 1035,
            "endLine": 1035,
            "startColumn": 11,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "writeNormalizedWordEntry(sb,writer,line);\n",
            "startLine": 1071,
            "endLine": 1071,
            "startColumn": 11,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CodecUtil.writeFooter(unsorted);\n",
            "startLine": 1038,
            "endLine": 1038,
            "startColumn": 7,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CodecUtil.writeFooter(unsorted);\n",
            "startLine": 1074,
            "endLine": 1074,
            "startColumn": 7,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return unsorted;\n",
            "startLine": 1040,
            "endLine": 1040,
            "startColumn": 5,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return unsorted;\n",
            "startLine": 1076,
            "endLine": 1076,
            "startColumn": 5,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!hasStemExceptions)",
            "startLine": 1028,
            "endLine": 1033,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!hasCustomMorphData)",
            "startLine": 1062,
            "endLine": 1069,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "hasStemExceptions=hasStemException(line.substring(morphStart + 1));\n",
            "startLine": 1031,
            "endLine": 1031,
            "startColumn": 15,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String data=line.substring(morphStart + 1);\n",
            "startLine": 1065,
            "endLine": 1065,
            "startColumn": 15,
            "endColumn": 60
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(datum.startsWith(\"st:\"))",
            "startLine": 1385,
            "endLine": 1387,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "hasCustomMorphData=splitMorphData(data).stream().anyMatch(s -> !s.startsWith(\"ph:\"));\n",
            "startLine": 1066,
            "endLine": 1067,
            "startColumn": 15,
            "endColumn": 85
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "url": "https://github.com/apache/lucene-solr/commit/f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "readSortedDictionaries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1155,
        "endLine": 1225,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "readSortedDictionaries",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1191,
        "endLine": 1260,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(ByteSequencesReader reader=new ByteSequencesReader(tempDir.openChecksumInput(sorted,IOContext.READONCE),sorted))",
            "startLine": 1161,
            "endLine": 1224,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(ByteSequencesReader reader=new ByteSequencesReader(tempDir.openChecksumInput(sorted,IOContext.READONCE),sorted))",
            "startLine": 1199,
            "endLine": 1259,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1218,
            "endLine": 1224,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1253,
            "endLine": 1259,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(success)",
            "startLine": 1219,
            "endLine": 1223,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(success)",
            "startLine": 1254,
            "endLine": 1258,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1219,
            "endLine": 1221,
            "startColumn": 20,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1254,
            "endLine": 1256,
            "startColumn": 20,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "tempDir.deleteFile(sorted);\n",
            "startLine": 1220,
            "endLine": 1220,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "tempDir.deleteFile(sorted);\n",
            "startLine": 1255,
            "endLine": 1255,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1221,
            "endLine": 1223,
            "startColumn": 14,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1256,
            "endLine": 1258,
            "startColumn": 14,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.deleteFilesIgnoringExceptions(tempDir,sorted);\n",
            "startLine": 1222,
            "endLine": 1222,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.deleteFilesIgnoringExceptions(tempDir,sorted);\n",
            "startLine": 1257,
            "endLine": 1257,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 1167,
            "endLine": 1212,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 1205,
            "endLine": 1247,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(scratch == null)",
            "startLine": 1169,
            "endLine": 1171,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(scratch == null)",
            "startLine": 1207,
            "endLine": 1209,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1170,
            "endLine": 1170,
            "startColumn": 11,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1208,
            "endLine": 1208,
            "startColumn": 11,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(flagSep == -1)",
            "startLine": 1179,
            "endLine": 1197,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(flagSep == -1)",
            "startLine": 1217,
            "endLine": 1235,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1179,
            "endLine": 1183,
            "startColumn": 28,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1217,
            "endLine": 1221,
            "startColumn": 28,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=NOFLAGS;\n",
            "startLine": 1180,
            "endLine": 1180,
            "startColumn": 11,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=NOFLAGS;\n",
            "startLine": 1218,
            "endLine": 1218,
            "startColumn": 11,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "end=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1181,
            "endLine": 1181,
            "startColumn": 11,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "end=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1219,
            "endLine": 1219,
            "startColumn": 11,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entry=line.substring(0,end);\n",
            "startLine": 1182,
            "endLine": 1182,
            "startColumn": 11,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entry=line.substring(0,end);\n",
            "startLine": 1220,
            "endLine": 1220,
            "startColumn": 11,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1183,
            "endLine": 1197,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1221,
            "endLine": 1235,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "end=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1184,
            "endLine": 1184,
            "startColumn": 11,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "end=line.indexOf(MORPH_SEPARATOR);\n",
            "startLine": 1222,
            "endLine": 1222,
            "startColumn": 11,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean hidden=line.charAt(flagSep + 1) == HIDDEN_FLAG;\n",
            "startLine": 1185,
            "endLine": 1185,
            "startColumn": 11,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean hidden=line.charAt(flagSep + 1) == HIDDEN_FLAG;\n",
            "startLine": 1223,
            "endLine": 1223,
            "startColumn": 11,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String flagPart=line.substring(flagSep + (hidden ? 2 : 1),end);\n",
            "startLine": 1186,
            "endLine": 1186,
            "startColumn": 11,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String flagPart=line.substring(flagSep + (hidden ? 2 : 1),end);\n",
            "startLine": 1224,
            "endLine": 1224,
            "startColumn": 11,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(aliasCount > 0 && !flagPart.isEmpty())",
            "startLine": 1187,
            "endLine": 1189,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(aliasCount > 0 && !flagPart.isEmpty())",
            "startLine": 1225,
            "endLine": 1227,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "flagPart=getAliasValue(Integer.parseInt(flagPart));\n",
            "startLine": 1188,
            "endLine": 1188,
            "startColumn": 13,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "flagPart=getAliasValue(Integer.parseInt(flagPart));\n",
            "startLine": 1226,
            "endLine": 1226,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=flagParsingStrategy.parseFlags(flagPart);\n",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 11,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=flagParsingStrategy.parseFlags(flagPart);\n",
            "startLine": 1229,
            "endLine": 1229,
            "startColumn": 11,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(hidden)",
            "startLine": 1192,
            "endLine": 1195,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(hidden)",
            "startLine": 1230,
            "endLine": 1233,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=ArrayUtil.growExact(wordForm,wordForm.length + 1);\n",
            "startLine": 1193,
            "endLine": 1193,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm=ArrayUtil.growExact(wordForm,wordForm.length + 1);\n",
            "startLine": 1231,
            "endLine": 1231,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm[wordForm.length - 1]=HIDDEN_FLAG;\n",
            "startLine": 1194,
            "endLine": 1194,
            "startColumn": 13,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wordForm[wordForm.length - 1]=HIDDEN_FLAG;\n",
            "startLine": 1232,
            "endLine": 1232,
            "startColumn": 13,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entry=line.substring(0,flagSep);\n",
            "startLine": 1196,
            "endLine": 1196,
            "startColumn": 11,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entry=line.substring(0,flagSep);\n",
            "startLine": 1234,
            "endLine": 1234,
            "startColumn": 11,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(end + 1 < line.length())",
            "startLine": 1200,
            "endLine": 1209,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(end + 1 < line.length())",
            "startLine": 1238,
            "endLine": 1244,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean success=false;\n",
            "startLine": 1157,
            "endLine": 1157,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean success=false;\n",
            "startLine": 1193,
            "endLine": 1193,
            "startColumn": 5,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "EntryGrouper grouper=new EntryGrouper(flags);\n",
            "startLine": 1159,
            "endLine": 1159,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "EntryGrouper grouper=new EntryGrouper(flags);\n",
            "startLine": 1197,
            "endLine": 1197,
            "startColumn": 5,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BytesRef scratch=reader.next();\n",
            "startLine": 1168,
            "endLine": 1168,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BytesRef scratch=reader.next();\n",
            "startLine": 1206,
            "endLine": 1206,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String line=scratch.utf8ToString();\n",
            "startLine": 1173,
            "endLine": 1173,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String line=scratch.utf8ToString();\n",
            "startLine": 1211,
            "endLine": 1211,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String entry;\n",
            "startLine": 1174,
            "endLine": 1174,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String entry;\n",
            "startLine": 1212,
            "endLine": 1212,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] wordForm;\n",
            "startLine": 1175,
            "endLine": 1175,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "char[] wordForm;\n",
            "startLine": 1213,
            "endLine": 1213,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int end;\n",
            "startLine": 1176,
            "endLine": 1176,
            "startColumn": 9,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int end;\n",
            "startLine": 1214,
            "endLine": 1214,
            "startColumn": 9,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int flagSep=line.indexOf(FLAG_SEPARATOR);\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int flagSep=line.indexOf(FLAG_SEPARATOR);\n",
            "startLine": 1216,
            "endLine": 1216,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "grouper.flushGroup();\n",
            "startLine": 1215,
            "endLine": 1215,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "grouper.flushGroup();\n",
            "startLine": 1250,
            "endLine": 1250,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "success=true;\n",
            "startLine": 1216,
            "endLine": 1216,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "success=true;\n",
            "startLine": 1251,
            "endLine": 1251,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return grouper.words.compile();\n",
            "startLine": 1217,
            "endLine": 1217,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return grouper.words.compile();\n",
            "startLine": 1252,
            "endLine": 1252,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int stemExceptionID=0;\n",
            "startLine": 1199,
            "endLine": 1199,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int morphDataID=0;\n",
            "startLine": 1237,
            "endLine": 1237,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String morphData=line.substring(end + 1);\n",
            "startLine": 1201,
            "endLine": 1201,
            "startColumn": 11,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> morphFields=readMorphFields(entry,line.substring(end + 1));\n",
            "startLine": 1239,
            "endLine": 1239,
            "startColumn": 11,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "grouper.add(entry,wordForm,stemExceptionID);\n",
            "startLine": 1211,
            "endLine": 1211,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "grouper.add(entry,wordForm,morphDataID);\n",
            "startLine": 1246,
            "endLine": 1246,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1202,
            "endLine": 1208,
            "startColumn": 58,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1240,
            "endLine": 1243,
            "startColumn": 39,
            "endColumn": 12
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addPhoneticRepEntries(entry,datum.substring(3));\n",
            "startLine": 1206,
            "endLine": 1206,
            "startColumn": 15,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addPhoneticRepEntries(word,datum.substring(3));\n",
            "startLine": 1266,
            "endLine": 1266,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(datum.startsWith(\"ph:\") && datum.length() > 3)",
            "startLine": 1205,
            "endLine": 1207,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(datum.startsWith(\"ph:\"))",
            "startLine": 1265,
            "endLine": 1270,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(datum: splitMorphData(morphData))",
            "startLine": 1202,
            "endLine": 1208,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(datum: splitMorphData(unparsed))",
            "startLine": 1264,
            "endLine": 1271,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1203,
            "endLine": 1205,
            "startColumn": 42,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1264,
            "endLine": 1271,
            "startColumn": 51,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1205,
            "endLine": 1207,
            "startColumn": 71,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1265,
            "endLine": 1267,
            "startColumn": 36,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "url": "https://github.com/apache/lucene-solr/commit/f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "splitMorphData",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1392,
        "endLine": 1408,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.Dictionary",
        "type": "Method",
        "name": "splitMorphData",
        "filePath": "lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java",
        "startLine": 1433,
        "endLine": 1453,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(morphAliasCount > 0)",
            "startLine": 1394,
            "endLine": 1400,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(morphAliasCount > 0)",
            "startLine": 1435,
            "endLine": 1441,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1395,
            "endLine": 1399,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1436,
            "endLine": 1440,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int alias=Integer.parseInt(morphData.trim());\n",
            "startLine": 1396,
            "endLine": 1396,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int alias=Integer.parseInt(morphData.trim());\n",
            "startLine": 1437,
            "endLine": 1437,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "morphData=morphAliases[alias - 1];\n",
            "startLine": 1397,
            "endLine": 1397,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "morphData=morphAliases[alias - 1];\n",
            "startLine": 1438,
            "endLine": 1438,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ignored)",
            "startLine": 1398,
            "endLine": 1399,
            "startColumn": 47,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ignored)",
            "startLine": 1439,
            "endLine": 1440,
            "startColumn": 47,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(morphData.isBlank())",
            "startLine": 1401,
            "endLine": 1403,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(morphData.isBlank())",
            "startLine": 1442,
            "endLine": 1444,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Collections.emptyList();\n",
            "startLine": 1402,
            "endLine": 1402,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Collections.emptyList();\n",
            "startLine": 1443,
            "endLine": 1443,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Arrays.stream(MORPH_KEY_PATTERN.split(morphData)).map(String::trim).filter(s -> !s.isBlank()).collect(Collectors.toList());\n",
            "startLine": 1404,
            "endLine": 1407,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Arrays.stream(morphData.split(\"\\\\s+\")).filter(s -> s.length() > 3 && Character.isLetter(s.charAt(0)) && Character.isLetter(s.charAt(1)) && s.charAt(2) == ':').collect(Collectors.toList());\n",
            "startLine": 1445,
            "endLine": 1452,
            "startColumn": 5,
            "endColumn": 39
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "url": "https://github.com/apache/lucene-solr/commit/f1a1165ac8eacc5f52f216dff362a69b9629cbe5",
      "originalMethod": {
        "container": "org.apache.lucene.analysis.hunspell.StemmerTestBase",
        "type": "Method",
        "name": "init",
        "filePath": "lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase.java",
        "startLine": 44,
        "endLine": 76,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.lucene.analysis.hunspell.StemmerTestBase",
        "type": "Method",
        "name": "init",
        "filePath": "lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/StemmerTestBase.java",
        "startLine": 44,
        "endLine": 47,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionaries.length == 0)",
            "startLine": 46,
            "endLine": 48,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(dictionaries.length == 0)",
            "startLine": 51,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"there must be at least one dictionary\");\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 7,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"there must be at least one dictionary\");\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 7,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(affixStream == null)",
            "startLine": 51,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(affixStream == null)",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new FileNotFoundException(\"file not found: \" + affix);\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 7,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new FileNotFoundException(\"file not found: \" + affix);\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 7,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < dictionaries.length; i++)",
            "startLine": 56,
            "endLine": 61,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < dictionaries.length; i++)",
            "startLine": 61,
            "endLine": 66,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "dictStreams[i]=StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 7,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "dictStreams[i]=StemmerTestBase.class.getResourceAsStream(dictionaries[i]);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 7,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(dictStreams[i] == null)",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(dictStreams[i] == null)",
            "startLine": 63,
            "endLine": 65,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new FileNotFoundException(\"file not found: \" + dictStreams[i]);\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 63,
            "endLine": 75,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 68,
            "endLine": 78,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 72,
            "endLine": 75,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 75,
            "endLine": 78,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(affixStream);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 7,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(affixStream);\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(dictStreams);\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 7,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeWhileHandlingException(dictStreams);\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream affixStream=StemmerTestBase.class.getResourceAsStream(affix);\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream affixStream=StemmerTestBase.class.getResourceAsStream(affix);\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 5,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Dictionary dictionary=new Dictionary(new ByteBuffersDirectory(),\"dictionary\",affixStream,Arrays.asList(dictStreams),ignoreCase);\n",
            "startLine": 64,
            "endLine": 70,
            "startColumn": 7,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new Dictionary(new ByteBuffersDirectory(),\"dictionary\",affixStream,Arrays.asList(dictStreams),ignoreCase);\n",
            "startLine": 69,
            "endLine": 74,
            "startColumn": 7,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream dictStreams[]=new InputStream[dictionaries.length];\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream[] dictStreams=new InputStream[dictionaries.length];\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 5,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "stemmer=new Stemmer(dictionary);\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 7,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "stemmer=new Stemmer(loadDictionary(ignoreCase,affix,dictionaries));\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 5,
            "endColumn": 76
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "e6d9eaaf000bb00e52a776e298b3c7e9f37a4cd5",
      "url": "https://github.com/apache/lucene-solr/commit/e6d9eaaf000bb00e52a776e298b3c7e9f37a4cd5",
      "originalMethod": {
        "container": "org.apache.solr.handler.loader.XMLLoader",
        "type": "Method",
        "name": "load",
        "filePath": "solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java",
        "startLine": 129,
        "endLine": 198,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.solr.handler.loader.XMLLoader",
        "type": "Method",
        "name": "load",
        "filePath": "solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java",
        "startLine": 104,
        "endLine": 134,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parser != null)",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parser != null)",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 7,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 175,
            "endLine": 196,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 112,
            "endLine": 133,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "parser=(charset == null) ? inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is,charset);\n",
            "startLine": 188,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "parser=(charset == null) ? inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is,charset);\n",
            "startLine": 125,
            "endLine": 126,
            "startColumn": 7,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.processUpdate(req,processor,parser);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.processUpdate(req,processor,parser);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 7,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 177,
            "endLine": 187,
            "startColumn": 35,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 114,
            "endLine": 124,
            "startColumn": 33,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final byte[] body=IOUtils.toByteArray(is);\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 11,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final byte[] body=IOUtils.toByteArray(is);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 181,
            "endLine": 184,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 118,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "log.trace(\"body: {}\",new String(body,(charset == null) ? ContentStreamBase.DEFAULT_CHARSET : charset));\n",
            "startLine": 182,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "log.trace(\"body: {}\",new String(body,(charset == null) ? ContentStreamBase.DEFAULT_CHARSET : charset));\n",
            "startLine": 119,
            "endLine": 120,
            "startColumn": 11,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 11,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "is=new ByteArrayInputStream(body);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 11,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "is=new ByteArrayInputStream(body);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charset=ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 5,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charset=ContentStreamBase.getCharsetFromContentType(stream.getContentType());\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream is=null;\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream is=null;\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 5,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "XMLStreamReader parser=null;\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "XMLStreamReader parser=null;\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 177,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 118,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "is=stream.getStream();\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "is=stream.getStream();\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 7,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 191,
            "endLine": 193,
            "startColumn": 38,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 128,
            "endLine": 130,
            "startColumn": 36,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 9,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 7,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 193,
            "endLine": 196,
            "startColumn": 17,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 130,
            "endLine": 133,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 7,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 181,
            "endLine": 184,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(log.isTraceEnabled())",
            "startLine": 114,
            "endLine": 124,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "is=stream.getStream();\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "is=stream.getStream();\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 7,
            "endColumn": 31
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 9,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 7,
            "endColumn": 87
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "IOUtils.closeQuietly(is);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 7,
            "endColumn": 32
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 164,
            "endLine": 171,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 112,
            "endLine": 133,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 167,
            "endLine": 169,
            "startColumn": 9,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 128,
            "endLine": 130,
            "startColumn": 7,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 169,
            "endLine": 171,
            "startColumn": 17,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 130,
            "endLine": 133,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/lucene-solr.git",
      "sha1": "e6d9eaaf000bb00e52a776e298b3c7e9f37a4cd5",
      "url": "https://github.com/apache/lucene-solr/commit/e6d9eaaf000bb00e52a776e298b3c7e9f37a4cd5",
      "originalMethod": {
        "container": "org.apache.solr.handler.XsltUpdateRequestHandlerTest",
        "type": "Method",
        "name": "testUpdate",
        "filePath": "solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java",
        "startLine": 57,
        "endLine": 96,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.solr.scripting.xslt.XSLTUpdateRequestHandlerTest",
        "type": "Method",
        "name": "testUpdate",
        "filePath": "solr/contrib/scripting/src/test/org/apache/solr/scripting/xslt/XSLTUpdateRequestHandlerTest.java",
        "startLine": 61,
        "endLine": 101,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String xml=\"<random>\" + \" <document>\" + \"  <node name=\\\"id\\\" value=\\\"12345\\\"/>\"+ \"  <node name=\\\"name\\\" value=\\\"kitten\\\"/>\"+ \"  <node name=\\\"text\\\" enhance=\\\"3\\\" value=\\\"some other day\\\"/>\"+ \"  <node name=\\\"title\\\" enhance=\\\"4\\\" value=\\\"A story\\\"/>\"+ \"  <node name=\\\"timestamp\\\" enhance=\\\"5\\\" value=\\\"2011-07-01T10:31:57.140Z\\\"/>\"+ \" </document>\"+ \"</random>\";\n",
            "startLine": 60,
            "endLine": 69,
            "startColumn": 5,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String xml=\"<random>\" + \" <document>\" + \"  <node name=\\\"id\\\" value=\\\"12345\\\"/>\"+ \"  <node name=\\\"name\\\" value=\\\"kitten\\\"/>\"+ \"  <node name=\\\"text\\\" enhance=\\\"3\\\" value=\\\"some other day\\\"/>\"+ \"  <node name=\\\"title\\\" enhance=\\\"4\\\" value=\\\"A story\\\"/>\"+ \"  <node name=\\\"timestamp\\\" enhance=\\\"5\\\" value=\\\"2011-07-01T10:31:57.140Z\\\"/>\"+ \" </document>\"+ \"</random>\";\n",
            "startLine": 64,
            "endLine": 73,
            "startColumn": 5,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,String> args=new HashMap<>();\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,String> args=new HashMap<>();\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 5,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SolrCore core=h.getCore();\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SolrCore core=h.getCore();\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 5,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocalSolrQueryRequest req=new LocalSolrQueryRequest(core,new MapSolrParams(args));\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 5,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocalSolrQueryRequest req=new LocalSolrQueryRequest(core,new MapSolrParams(args));\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 5,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ArrayList<ContentStream> streams=new ArrayList<>();\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 5,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ArrayList<ContentStream> streams=new ArrayList<>();\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 5,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "streams.add(new ContentStreamBase.StringStream(xml));\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 5,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "streams.add(new ContentStreamBase.StringStream(xml));\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 5,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "req.setContentStreams(streams);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "req.setContentStreams(streams);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SolrQueryResponse rsp=new SolrQueryResponse();\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SolrQueryResponse rsp=new SolrQueryResponse();\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringWriter sw=new StringWriter(32000);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringWriter sw=new StringWriter(32000);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 5,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueryResponseWriter responseWriter=core.getQueryResponseWriter(req);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueryResponseWriter responseWriter=core.getQueryResponseWriter(req);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 5,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "responseWriter.write(sw,req,rsp);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "responseWriter.write(sw,req,rsp);\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 5,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "req.close();\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "req.close();\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String response=sw.toString();\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String response=sw.toString();\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 5,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertU(response);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertU(response);\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 5,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertU(commit());\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertU(commit());\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 5,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertQ(\"test document was correctly committed\",req(\"q\",\"*:*\"),\"//result[@numFound='1']\",\"//str[@name='id'][.='12345']\");\n",
            "startLine": 92,
            "endLine": 95,
            "startColumn": 5,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertQ(\"test document was correctly committed\",req(\"q\",\"*:*\"),\"//result[@numFound='1']\",\"//str[@name='id'][.='12345']\");\n",
            "startLine": 97,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(UpdateRequestHandler handler=new UpdateRequestHandler())",
            "startLine": 80,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(XSLTUpdateRequestHandler handler=new XSLTUpdateRequestHandler())",
            "startLine": 85,
            "endLine": 88,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.put(CommonParams.TR,\"xsl-update-handler-test.xsl\");\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "args.put(\"tr\",\"xsl-update-handler-test.xsl\");\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 5,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.init(new NamedList<String>());\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 7,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.init(args);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.handleRequestBody(req,rsp);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 7,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "setAssumeContentType(\"application/xml\");\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.init(new NamedList<String>());\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 7,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.init(new NamedList<String>());\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.handleRequestBody(req,rsp);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 7,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "handler.handleRequestBody(req,rsp);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 7,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}