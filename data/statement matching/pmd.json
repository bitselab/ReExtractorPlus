{
  "results": [
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5ad37f67579e2ed2ed02e6ca68a8f28cd9d5aafa",
      "url": "https://github.com/pmd/pmd/commit/5ad37f67579e2ed2ed02e6ca68a8f28cd9d5aafa",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.vf.ApexClassPropertyTypesVisitorTest",
        "type": "Method",
        "name": "testApexClassIsProperlyParsed",
        "filePath": "pmd-visualforce/src/test/java/net/sourceforge/pmd/lang/vf/ApexClassPropertyTypesVisitorTest.java",
        "startLine": 34,
        "endLine": 65,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.vf.ApexClassPropertyTypesVisitorTest",
        "type": "Method",
        "name": "testApexClassIsProperlyParsed",
        "filePath": "pmd-visualforce/src/test/java/net/sourceforge/pmd/lang/vf/ApexClassPropertyTypesVisitorTest.java",
        "startLine": 33,
        "endLine": 64,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(BufferedReader reader=Files.newBufferedReader(apexPath,StandardCharsets.UTF_8))",
            "startLine": 43,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(BufferedReader reader=Files.newBufferedReader(apexPath,StandardCharsets.UTF_8))",
            "startLine": 42,
            "endLine": 46,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node node=parser.parse(apexPath.toString(),reader);\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 13,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node node=parser.parse(apexPath.toString(),reader);\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotNull(node);\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotNull(node);\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 13,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "visitor.visit((ApexNode<?>)node,null);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 13,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "visitor.visit((ApexNode<?>)node,null);\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 13,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(variable: variables)",
            "startLine": 52,
            "endLine": 56,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(variable: variables)",
            "startLine": 51,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LanguageVersion languageVersion=LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getDefaultVersion();\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LanguageVersion languageVersion=LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getDefaultVersion();\n",
            "startLine": 35,
            "endLine": 35,
            "startColumn": 9,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParserOptions parserOptions=languageVersion.getLanguageVersionHandler().getDefaultParserOptions();\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 9,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParserOptions parserOptions=languageVersion.getLanguageVersionHandler().getDefaultParserOptions();\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Parser parser=languageVersion.getLanguageVersionHandler().getParser(parserOptions);\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Parser parser=languageVersion.getLanguageVersionHandler().getParser(parserOptions);\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path apexPath=VFTestUtils.getMetadataPath(this,VFTestUtils.MetadataFormat.SFDX,VFTestUtils.MetadataType.Apex).resolve(\"ApexController.cls\").toAbsolutePath();\n",
            "startLine": 40,
            "endLine": 41,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path apexPath=VFTestUtils.getMetadataPath(this,VFTestUtils.MetadataFormat.SFDX,VFTestUtils.MetadataType.Apex).resolve(\"ApexController.cls\").toAbsolutePath();\n",
            "startLine": 39,
            "endLine": 40,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApexClassPropertyTypesVisitor visitor=new ApexClassPropertyTypesVisitor();\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApexClassPropertyTypesVisitor visitor=new ApexClassPropertyTypesVisitor();\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(7,variables.size());\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(7,variables.size());\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNull(variable.getKey(),previous);\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 13,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNull(variable.getKey(),previous);\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 13,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BasicType previous=variableNameToVariableType.put(variable.getKey(),variable.getValue());\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 13,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String previous=variableNameToVariableType.put(variable.getKey(),variable.getValue());\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 13,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<Pair<String,BasicType>> variables=visitor.getVariables();\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<Pair<String,String>> variables=visitor.getVariables();\n",
            "startLine": 48,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,BasicType> variableNameToVariableType=new Hashtable<>();\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,String> variableNameToVariableType=new Hashtable<>();\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.ID,variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountId\"));\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"ID\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountId\")));\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 9,
            "endColumn": 124
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.STRING,variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountName\"));\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 9,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"String\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountName\")));\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 130
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.APEX_OBJECT,variableNameToVariableType.get(\"ApexController.InnerController\"));\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"ApexController.InnerController\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.InnerController\")));\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 137
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.STRING,variableNameToVariableType.get(\"ApexController.AccountName\"));\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"String\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.AccountName\")));\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.ID,variableNameToVariableType.get(\"ApexController.AccountIdProp\"));\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"ID\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.AccountIdProp\")));\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.ID,variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountIdProp\"));\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 9,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"ID\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.InnerController.InnerAccountIdProp\")));\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(BasicType.ID,variableNameToVariableType.get(\"ApexController.AccountId\"));\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"ID\".equalsIgnoreCase(variableNameToVariableType.get(\"ApexController.AccountId\")));\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 9,
            "endColumn": 103
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "d3e68d795b07d0cbc94e38ac85e708f7d5fef107",
      "url": "https://github.com/pmd/pmd/commit/d3e68d795b07d0cbc94e38ac85e708f7d5fef107",
      "originalMethod": {
        "container": "net.sourceforge.pmd.ant.internal.PMDTaskImpl",
        "type": "Method",
        "name": "getLogRenderer",
        "filePath": "pmd-core/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java",
        "startLine": 157,
        "endLine": 190,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.ant.internal.PMDTaskImpl",
        "type": "Method",
        "name": "getLogRenderer",
        "filePath": "pmd-core/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java",
        "startLine": 157,
        "endLine": 190,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 17,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 17,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new AbstractRenderer(\"log\",\"Logging renderer\"){\n  @Override public void start(){\n  }\n  @Override public void startFileAnalysis(  DataSource dataSource){\n    project.log(\"Processing file \" + dataSource.getNiceFileName(false,commonInputPath),Project.MSG_VERBOSE);\n  }\n  @Override public void renderFileReport(  Report r){\n  }\n  @Override public void end(){\n  }\n  @Override public void flush(){\n  }\n  @Override public String defaultFileExtension(){\n    return null;\n  }\n}\n;\n",
            "startLine": 158,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new AbstractRenderer(\"log\",\"Logging renderer\"){\n  @Override public void start(){\n  }\n  @Override public void startFileAnalysis(  DataSource dataSource){\n    project.log(\"Processing file \" + dataSource.getNiceFileName(false,null),Project.MSG_VERBOSE);\n  }\n  @Override public void renderFileReport(  Report r){\n  }\n  @Override public void end(){\n  }\n  @Override public void flush(){\n  }\n  @Override public String defaultFileExtension(){\n    return null;\n  }\n}\n;\n",
            "startLine": 158,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "project.log(\"Processing file \" + dataSource.getNiceFileName(false,commonInputPath),Project.MSG_VERBOSE);\n",
            "startLine": 166,
            "endLine": 167,
            "startColumn": 17,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "project.log(\"Processing file \" + dataSource.getNiceFileName(false,null),Project.MSG_VERBOSE);\n",
            "startLine": 166,
            "endLine": 167,
            "startColumn": 17,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5840afe39a1bec770d09de97d9687fd011a25f52",
      "url": "https://github.com/pmd/pmd/commit/5840afe39a1bec770d09de97d9687fd011a25f52",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "visitClassDec",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 664,
        "endLine": 724,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "visitClassDec",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 672,
        "endLine": 739,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!node.isFinal())",
            "startLine": 670,
            "endLine": 674,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!node.isFinal())",
            "startLine": 678,
            "endLine": 682,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 670,
            "endLine": 672,
            "startColumn": 30,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 678,
            "endLine": 680,
            "startColumn": 30,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(new EvalPackage(className));\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(new EvalPackage(className));\n",
            "startLine": 679,
            "endLine": 679,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 672,
            "endLine": 674,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 680,
            "endLine": 682,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(NULL_EVAL_PACKAGE);\n",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(NULL_EVAL_PACKAGE);\n",
            "startLine": 681,
            "endLine": 681,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(getCurrentEvalPackage() instanceof NullEvalPackage))",
            "startLine": 679,
            "endLine": 720,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(getCurrentEvalPackage() instanceof NullEvalPackage))",
            "startLine": 687,
            "endLine": 735,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfMethods(getCurrentEvalPackage().allMethodsOfClass))",
            "startLine": 682,
            "endLine": 683,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfMethods(getCurrentEvalPackage().allMethodsOfClass))",
            "startLine": 690,
            "endLine": 691,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfConstructors2(getCurrentEvalPackage().allPrivateConstructorsOfClass))",
            "startLine": 688,
            "endLine": 689,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfConstructors2(getCurrentEvalPackage().allPrivateConstructorsOfClass))",
            "startLine": 696,
            "endLine": 697,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(meth: getCurrentEvalPackage().calledMethods)",
            "startLine": 693,
            "endLine": 700,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(meth: getCurrentEvalPackage().calledMethods)",
            "startLine": 701,
            "endLine": 715,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: getCurrentEvalPackage().allMethodsOfClass.keySet())",
            "startLine": 695,
            "endLine": 699,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: getCurrentEvalPackage().allMethodsOfClass.keySet())",
            "startLine": 703,
            "endLine": 714,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 696,
            "endLine": 698,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 704,
            "endLine": 713,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: getCurrentEvalPackage().allPrivateConstructorsOfClass.keySet())",
            "startLine": 703,
            "endLine": 719,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: getCurrentEvalPackage().allPrivateConstructorsOfClass.keySet())",
            "startLine": 718,
            "endLine": 734,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ch.isDangerous())",
            "startLine": 704,
            "endLine": 718,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ch.isDangerous())",
            "startLine": 719,
            "endLine": 733,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ci: getCurrentEvalPackage().calledConstructors)",
            "startLine": 712,
            "endLine": 717,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ci: getCurrentEvalPackage().calledConstructors)",
            "startLine": 727,
            "endLine": 732,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ci.getArgumentCount() == paramCount)",
            "startLine": 713,
            "endLine": 716,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ci.getArgumentCount() == paramCount)",
            "startLine": 728,
            "endLine": 731,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=node.getImage();\n",
            "startLine": 669,
            "endLine": 669,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=node.getImage();\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visit(node,data);\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visit(node,data);\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "evaluateDangerOfConstructors1(getCurrentEvalPackage().allPrivateConstructorsOfClass,getCurrentEvalPackage().allMethodsOfClass.keySet());\n",
            "startLine": 686,
            "endLine": 687,
            "startColumn": 13,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "evaluateDangerOfConstructors1(getCurrentEvalPackage().allPrivateConstructorsOfClass,getCurrentEvalPackage().allMethodsOfClass.keySet());\n",
            "startLine": 694,
            "endLine": 695,
            "startColumn": 13,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int paramCount=ch.getASTConstructorDeclaration().getArity();\n",
            "startLine": 711,
            "endLine": 711,
            "startColumn": 21,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int paramCount=ch.getASTConstructorDeclaration().getArity();\n",
            "startLine": 726,
            "endLine": 726,
            "startColumn": 21,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "removeCurrentEvalPackage();\n",
            "startLine": 722,
            "endLine": 722,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "removeCurrentEvalPackage();\n",
            "startLine": 737,
            "endLine": 737,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return data;\n",
            "startLine": 723,
            "endLine": 723,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return data;\n",
            "startLine": 738,
            "endLine": 738,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,ci.getASTExplicitConstructorInvocation(),\"constructor\");\n",
            "startLine": 715,
            "endLine": 715,
            "startColumn": 29,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "asCtx(data).addViolation(ci.getASTExplicitConstructorInvocation(),\"constructor\",\"\");\n",
            "startLine": 730,
            "endLine": 730,
            "startColumn": 29,
            "endColumn": 115
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5f0cb7d757cab81c33a15b487122a7d610a04835",
      "url": "https://github.com/pmd/pmd/commit/5f0cb7d757cab81c33a15b487122a7d610a04835",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "visitClassDec",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 644,
        "endLine": 710,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "visitClassDec",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 658,
        "endLine": 718,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!node.isFinal())",
            "startLine": 650,
            "endLine": 654,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!node.isFinal())",
            "startLine": 664,
            "endLine": 668,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 650,
            "endLine": 652,
            "startColumn": 30,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 664,
            "endLine": 666,
            "startColumn": 30,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(new EvalPackage(className));\n",
            "startLine": 651,
            "endLine": 651,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(new EvalPackage(className));\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 652,
            "endLine": 654,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 666,
            "endLine": 668,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(NULL_EVAL_PACKAGE);\n",
            "startLine": 653,
            "endLine": 653,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "putEvalPackage(NULL_EVAL_PACKAGE);\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(getCurrentEvalPackage() instanceof NullEvalPackage))",
            "startLine": 659,
            "endLine": 706,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(getCurrentEvalPackage() instanceof NullEvalPackage))",
            "startLine": 673,
            "endLine": 714,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfMethods(getCurrentEvalPackage().allMethodsOfClass))",
            "startLine": 662,
            "endLine": 663,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfMethods(getCurrentEvalPackage().allMethodsOfClass))",
            "startLine": 676,
            "endLine": 677,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfConstructors2(getCurrentEvalPackage().allPrivateConstructorsOfClass))",
            "startLine": 668,
            "endLine": 669,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(evaluateDangerOfConstructors2(getCurrentEvalPackage().allPrivateConstructorsOfClass))",
            "startLine": 682,
            "endLine": 683,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(meth: getCurrentEvalPackage().calledMethods)",
            "startLine": 673,
            "endLine": 686,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(meth: getCurrentEvalPackage().calledMethods)",
            "startLine": 687,
            "endLine": 694,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: getCurrentEvalPackage().allMethodsOfClass.keySet())",
            "startLine": 675,
            "endLine": 685,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: getCurrentEvalPackage().allMethodsOfClass.keySet())",
            "startLine": 689,
            "endLine": 693,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: getCurrentEvalPackage().allPrivateConstructorsOfClass.keySet())",
            "startLine": 689,
            "endLine": 705,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: getCurrentEvalPackage().allPrivateConstructorsOfClass.keySet())",
            "startLine": 697,
            "endLine": 713,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ch.isDangerous())",
            "startLine": 690,
            "endLine": 704,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ch.isDangerous())",
            "startLine": 698,
            "endLine": 712,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int paramCount=ch.getASTConstructorDeclaration().getArity();\n",
            "startLine": 697,
            "endLine": 697,
            "startColumn": 21,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int paramCount=ch.getASTConstructorDeclaration().getArity();\n",
            "startLine": 705,
            "endLine": 705,
            "startColumn": 21,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ci: getCurrentEvalPackage().calledConstructors)",
            "startLine": 698,
            "endLine": 703,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ci: getCurrentEvalPackage().calledConstructors)",
            "startLine": 706,
            "endLine": 711,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ci.getArgumentCount() == paramCount)",
            "startLine": 699,
            "endLine": 702,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ci.getArgumentCount() == paramCount)",
            "startLine": 707,
            "endLine": 710,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,ci.getASTExplicitConstructorInvocation(),\"constructor\");\n",
            "startLine": 701,
            "endLine": 701,
            "startColumn": 29,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,ci.getASTExplicitConstructorInvocation(),\"constructor\");\n",
            "startLine": 709,
            "endLine": 709,
            "startColumn": 29,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 681,
            "endLine": 683,
            "startColumn": 84,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 87,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,meth.getASTPrimaryExpression(),\"method '\" + h.getCalled() + \"'\");\n",
            "startLine": 682,
            "endLine": 682,
            "startColumn": 29,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,meth.getASTPrimaryExpression(),\"method '\" + h.getCalled() + \"'\");\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 25,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=node.getImage();\n",
            "startLine": 649,
            "endLine": 649,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=node.getImage();\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visit(node,data);\n",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visit(node,data);\n",
            "startLine": 670,
            "endLine": 670,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "evaluateDangerOfConstructors1(getCurrentEvalPackage().allPrivateConstructorsOfClass,getCurrentEvalPackage().allMethodsOfClass.keySet());\n",
            "startLine": 666,
            "endLine": 667,
            "startColumn": 13,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "evaluateDangerOfConstructors1(getCurrentEvalPackage().allPrivateConstructorsOfClass,getCurrentEvalPackage().allMethodsOfClass.keySet());\n",
            "startLine": 680,
            "endLine": 681,
            "startColumn": 13,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "removeCurrentEvalPackage();\n",
            "startLine": 708,
            "endLine": 708,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "removeCurrentEvalPackage();\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return data;\n",
            "startLine": 709,
            "endLine": 709,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return data;\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous())",
            "startLine": 676,
            "endLine": 684,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(methName.equals(meth.getName()) && meth.getArgumentCount() == count && parameterTypes.equals(meth.getArgumentTypes()))",
            "startLine": 680,
            "endLine": 683,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5f0cb7d757cab81c33a15b487122a7d610a04835",
      "url": "https://github.com/pmd/pmd/commit/5f0cb7d757cab81c33a15b487122a7d610a04835",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "evaluateDangerOfConstructors1",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 760,
        "endLine": 807,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "evaluateDangerOfConstructors1",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 762,
        "endLine": 803,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: classConstructorMap.entrySet())",
            "startLine": 769,
            "endLine": 806,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: classConstructorMap.entrySet())",
            "startLine": 771,
            "endLine": 802,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!ch.isDangerous())",
            "startLine": 771,
            "endLine": 805,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!ch.isDangerous())",
            "startLine": 773,
            "endLine": 801,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(Iterator<MethodInvocation> calledMethsIter=calledMeths.iterator(); calledMethsIter.hasNext() && !ch.isDangerous(); )",
            "startLine": 777,
            "endLine": 804,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(Iterator<MethodInvocation> calledMethsIter=calledMeths.iterator(); calledMethsIter.hasNext() && !ch.isDangerous(); )",
            "startLine": 779,
            "endLine": 800,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: evaluatedMethods)",
            "startLine": 788,
            "endLine": 803,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(h: evaluatedMethods)",
            "startLine": 790,
            "endLine": 799,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 794,
            "endLine": 801,
            "startColumn": 88,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 791,
            "endLine": 798,
            "startColumn": 91,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.setDangerous(true);\n",
            "startLine": 795,
            "endLine": 795,
            "startColumn": 33,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.setDangerous(true);\n",
            "startLine": 792,
            "endLine": 792,
            "startColumn": 29,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 800,
            "endLine": 800,
            "startColumn": 33,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 797,
            "endLine": 797,
            "startColumn": 29,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorHolder ch=entry.getKey();\n",
            "startLine": 770,
            "endLine": 770,
            "startColumn": 13,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorHolder ch=entry.getKey();\n",
            "startLine": 772,
            "endLine": 772,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<MethodInvocation> calledMeths=entry.getValue();\n",
            "startLine": 775,
            "endLine": 775,
            "startColumn": 17,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<MethodInvocation> calledMeths=entry.getValue();\n",
            "startLine": 777,
            "endLine": 777,
            "startColumn": 17,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodInvocation meth=calledMethsIter.next();\n",
            "startLine": 783,
            "endLine": 783,
            "startColumn": 21,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodInvocation meth=calledMethsIter.next();\n",
            "startLine": 785,
            "endLine": 785,
            "startColumn": 21,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String methName=meth.getName();\n",
            "startLine": 784,
            "endLine": 784,
            "startColumn": 21,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String methName=meth.getName();\n",
            "startLine": 786,
            "endLine": 786,
            "startColumn": 21,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int methArgCount=meth.getArgumentCount();\n",
            "startLine": 785,
            "endLine": 785,
            "startColumn": 21,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int methArgCount=meth.getArgumentCount();\n",
            "startLine": 787,
            "endLine": 787,
            "startColumn": 21,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 778,
            "endLine": 804,
            "startColumn": 48,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 780,
            "endLine": 800,
            "startColumn": 48,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous())",
            "startLine": 789,
            "endLine": 802,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 791,
            "endLine": 798,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(methName.equals(matchName) && methArgCount == matchParamCount && parameterTypes.equals(meth.getArgumentTypes()))",
            "startLine": 793,
            "endLine": 801,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h.isDangerous() && meth.matches(h.getASTMethodDeclaration()))",
            "startLine": 791,
            "endLine": 798,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5f0cb7d757cab81c33a15b487122a7d610a04835",
      "url": "https://github.com/pmd/pmd/commit/5f0cb7d757cab81c33a15b487122a7d610a04835",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "evaluateDangerOfConstructors2",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 809,
        "endLine": 849,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "evaluateDangerOfConstructors2",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 805,
        "endLine": 840,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: classConstructorMap.keySet())",
            "startLine": 821,
            "endLine": 847,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ch: classConstructorMap.keySet())",
            "startLine": 817,
            "endLine": 838,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(calledC == null || ch.isDangerous())",
            "startLine": 823,
            "endLine": 825,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(calledC == null || ch.isDangerous())",
            "startLine": 819,
            "endLine": 821,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 824,
            "endLine": 824,
            "startColumn": 17,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 820,
            "endLine": 820,
            "startColumn": 17,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(Iterator<ConstructorHolder> innerConstIter=classConstructorMap.keySet().iterator(); innerConstIter.hasNext() && !ch.isDangerous(); )",
            "startLine": 829,
            "endLine": 846,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(Iterator<ConstructorHolder> innerConstIter=classConstructorMap.keySet().iterator(); innerConstIter.hasNext() && !ch.isDangerous(); )",
            "startLine": 824,
            "endLine": 837,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 837,
            "endLine": 844,
            "startColumn": 108,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 829,
            "endLine": 836,
            "startColumn": 93,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.setDangerous(true);\n",
            "startLine": 838,
            "endLine": 838,
            "startColumn": 25,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.setDangerous(true);\n",
            "startLine": 830,
            "endLine": 830,
            "startColumn": 21,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "found=true;\n",
            "startLine": 839,
            "endLine": 839,
            "startColumn": 25,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "found=true;\n",
            "startLine": 831,
            "endLine": 831,
            "startColumn": 21,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean found=false;\n",
            "startLine": 819,
            "endLine": 819,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean found=false;\n",
            "startLine": 815,
            "endLine": 815,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorInvocation calledC=ch.getCalledConstructor();\n",
            "startLine": 822,
            "endLine": 822,
            "startColumn": 13,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorInvocation calledC=ch.getCalledConstructor();\n",
            "startLine": 818,
            "endLine": 818,
            "startColumn": 13,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorHolder h2=innerConstIter.next();\n",
            "startLine": 833,
            "endLine": 833,
            "startColumn": 17,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructorHolder h2=innerConstIter.next();\n",
            "startLine": 828,
            "endLine": 828,
            "startColumn": 17,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return found;\n",
            "startLine": 848,
            "endLine": 848,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return found;\n",
            "startLine": 839,
            "endLine": 839,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 830,
            "endLine": 846,
            "startColumn": 55,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 825,
            "endLine": 837,
            "startColumn": 55,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(h2.isDangerous())",
            "startLine": 834,
            "endLine": 845,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(h2.isDangerous() && calledC.matches(h2.getASTConstructorDeclaration()))",
            "startLine": 829,
            "endLine": 836,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "5f0cb7d757cab81c33a15b487122a7d610a04835",
      "url": "https://github.com/pmd/pmd/commit/5f0cb7d757cab81c33a15b487122a7d610a04835",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "getArgumentTypes",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 1062,
        "endLine": 1102,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule",
        "type": "Method",
        "name": "getArgumentTypes",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/ConstructorCallsOverridableMethodRule.java",
        "startLine": 1053,
        "endLine": 1069,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(argumentList != null)",
            "startLine": 1065,
            "endLine": 1100,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(argumentList != null)",
            "startLine": 1056,
            "endLine": 1067,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int a=0; a < argumentList.getNumChildren(); a++)",
            "startLine": 1066,
            "endLine": 1099,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int a=0; a < argumentList.getNumChildren(); a++)",
            "startLine": 1057,
            "endLine": 1066,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(typeDefinition != null)",
            "startLine": 1091,
            "endLine": 1095,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(typeDefinition != null)",
            "startLine": 1062,
            "endLine": 1064,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ASTArgumentList argumentList=args.getFirstChildOfType(ASTArgumentList.class);\n",
            "startLine": 1064,
            "endLine": 1064,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ASTArgumentList argumentList=args.getFirstChildOfType(ASTArgumentList.class);\n",
            "startLine": 1055,
            "endLine": 1055,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node expression=argumentList.getChild(a);\n",
            "startLine": 1067,
            "endLine": 1067,
            "startColumn": 17,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node expression=argumentList.getChild(a);\n",
            "startLine": 1058,
            "endLine": 1058,
            "startColumn": 17,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ASTPrimaryPrefix arg=expression.getFirstDescendantOfType(ASTPrimaryPrefix.class);\n",
            "startLine": 1068,
            "endLine": 1068,
            "startColumn": 17,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ASTPrimaryPrefix arg=expression.getFirstDescendantOfType(ASTPrimaryPrefix.class);\n",
            "startLine": 1059,
            "endLine": 1059,
            "startColumn": 17,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "argumentTypes.add(type);\n",
            "startLine": 1098,
            "endLine": 1098,
            "startColumn": 17,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "argumentTypes.add(type);\n",
            "startLine": 1065,
            "endLine": 1065,
            "startColumn": 17,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return argumentTypes;\n",
            "startLine": 1101,
            "endLine": 1101,
            "startColumn": 9,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return argumentTypes;\n",
            "startLine": 1068,
            "endLine": 1068,
            "startColumn": 9,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "type=typeDefinition.getType().getName();\n",
            "startLine": 1092,
            "endLine": 1092,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "type=typeDefinition.getType();\n",
            "startLine": 1063,
            "endLine": 1063,
            "startColumn": 21,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1091,
            "endLine": 1093,
            "startColumn": 53,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1062,
            "endLine": 1064,
            "startColumn": 45,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> argumentTypes=new ArrayList<>();\n",
            "startLine": 1063,
            "endLine": 1063,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<Class<?>> argumentTypes=new ArrayList<>();\n",
            "startLine": 1054,
            "endLine": 1054,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JavaTypeDefinition typeDefinition=n.getTypeDefinition();\n",
            "startLine": 1090,
            "endLine": 1090,
            "startColumn": 25,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JavaTypeDefinition typeDefinition=arg.getTypeDefinition();\n",
            "startLine": 1061,
            "endLine": 1061,
            "startColumn": 17,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/pmd/pmd.git",
      "sha1": "efd0c9ed13c5124b724a01219e8a32fb9bf8653e",
      "url": "https://github.com/pmd/pmd/commit/efd0c9ed13c5124b724a01219e8a32fb9bf8653e",
      "originalMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule",
        "type": "Method",
        "name": "visit",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ImmutableFieldRule.java",
        "startLine": 59,
        "endLine": 89,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule",
        "type": "Method",
        "name": "visit",
        "filePath": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ImmutableFieldRule.java",
        "startLine": 51,
        "endLine": 74,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: vars.entrySet())",
            "startLine": 66,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: vars.entrySet())",
            "startLine": 58,
            "endLine": 72,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(accessNodeParent.isStatic() || !accessNodeParent.isPrivate() || accessNodeParent.isFinal()|| accessNodeParent.isVolatile()|| hasLombokAnnotation(node)|| hasIgnoredAnnotation((Annotatable)accessNodeParent))",
            "startLine": 69,
            "endLine": 74,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(accessNodeParent.isStatic() || !accessNodeParent.isPrivate() || accessNodeParent.isFinal()|| accessNodeParent.isVolatile()|| hasLombokAnnotation(node)|| hasIgnoredAnnotation((Annotatable)accessNodeParent))",
            "startLine": 61,
            "endLine": 66,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 72,
            "endLine": 74,
            "startColumn": 78,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 64,
            "endLine": 66,
            "startColumn": 78,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 17,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 17,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 81,
            "endLine": 83,
            "startColumn": 69,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 69,
            "endLine": 71,
            "startColumn": 64,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,field.getNode(),field.getImage());\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 17,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addViolation(data,field.getNode(),field.getImage());\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 17,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object result=super.visit(node,data);\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object result=super.visit(node,data);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<VariableNameDeclaration,List<NameOccurrence>> vars=node.getScope().getDeclarations(VariableNameDeclaration.class);\n",
            "startLine": 63,
            "endLine": 64,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<VariableNameDeclaration,List<NameOccurrence>> vars=node.getScope().getDeclarations(VariableNameDeclaration.class);\n",
            "startLine": 55,
            "endLine": 56,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableNameDeclaration field=entry.getKey();\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableNameDeclaration field=entry.getKey();\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AccessNode accessNodeParent=field.getAccessNodeParent();\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 13,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AccessNode accessNodeParent=field.getAccessNodeParent();\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 13,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<NameOccurrence> usages=entry.getValue();\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<NameOccurrence> usages=entry.getValue();\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ASTConstructorDeclaration> constructors=findAllConstructors(node);\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<ASTConstructorDeclaration> constructors=Collections.unmodifiableSet(new HashSet<>(findAllConstructors(node)));\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 125
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}