{
  "results": [
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "c6536c54d834b41d847685a935338c04067ddc37",
      "url": "https://github.com/spring-projects/spring-boot/commit/c6536c54d834b41d847685a935338c04067ddc37",
      "originalMethod": {
        "container": "org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Processor",
        "type": "Method",
        "name": "writeNativeImageArgFileIfNecessary",
        "filePath": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java",
        "startLine": 352,
        "endLine": 384,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Processor",
        "type": "Method",
        "name": "writeNativeImageArgFileIfNecessary",
        "filePath": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java",
        "startLine": 351,
        "endLine": 374,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: this.writtenLibraries.entrySet())",
            "startLine": 354,
            "endLine": 371,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: this.writtenLibraries.entrySet())",
            "startLine": 353,
            "endLine": 368,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(propertiesFile != null)",
            "startLine": 362,
            "endLine": 370,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(propertiesFile != null)",
            "startLine": 359,
            "endLine": 367,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream inputStream=propertiesFile.open())",
            "startLine": 363,
            "endLine": 369,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream inputStream=propertiesFile.open())",
            "startLine": 360,
            "endLine": 366,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 366,
            "endLine": 368,
            "startColumn": 69,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 363,
            "endLine": 365,
            "startColumn": 38,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "excludes.add(entry.getKey());\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 8,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "excludes.add(entry.getKey());\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 8,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> excludes=new LinkedHashSet<>();\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 4,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> excludes=new LinkedHashSet<>();\n",
            "startLine": 352,
            "endLine": 352,
            "startColumn": 4,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DependencyDescriptor descriptor=BootZipCopyAction.this.resolvedDependencies.find(entry.getValue().getFile());\n",
            "startLine": 355,
            "endLine": 356,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DependencyDescriptor descriptor=BootZipCopyAction.this.resolvedDependencies.find(entry.getValue().getFile());\n",
            "startLine": 354,
            "endLine": 355,
            "startColumn": 5,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibraryCoordinates coordinates=(descriptor != null) ? descriptor.getCoordinates() : null;\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 5,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibraryCoordinates coordinates=(descriptor != null) ? descriptor.getCoordinates() : null;\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 5,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileCopyDetails propertiesFile=(coordinates != null) ? this.reachabilityMetadataProperties.get(REACHABILITY_METADATA_PROPERTIES_LOCATION.formatted(coordinates.getGroupId(),coordinates.getArtifactId(),coordinates.getVersion())) : null;\n",
            "startLine": 358,
            "endLine": 361,
            "startColumn": 5,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileCopyDetails propertiesFile=(coordinates != null) ? this.reachabilityMetadataProperties.get(ReachabilityMetadataProperties.getLocation(coordinates)) : null;\n",
            "startLine": 357,
            "endLine": 358,
            "startColumn": 5,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(inputStream);\n",
            "startLine": 365,
            "endLine": 365,
            "startColumn": 7,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(inputStream);\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 3,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lastSlash=exclude.lastIndexOf('/');\n",
            "startLine": 375,
            "endLine": 375,
            "startColumn": 6,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lastSlash=exclude.lastIndexOf('/');\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 4,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String jar=(lastSlash != -1) ? exclude.substring(lastSlash + 1) : exclude;\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 6,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String jar=(lastSlash != -1) ? exclude.substring(lastSlash + 1) : exclude;\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 4,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 374,
            "endLine": 380,
            "startColumn": 37,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 59,
            "endLine": 65,
            "startColumn": 40,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(\"--exclude-config\");\n",
            "startLine": 377,
            "endLine": 377,
            "startColumn": 6,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(\"--exclude-config\");\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> args=new ArrayList<>();\n",
            "startLine": 373,
            "endLine": 373,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> lines=new ArrayList<>();\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "writeEntry(\"META-INF/native-image/argfile\",writer,true);\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "writeEntry(NativeImageArgFile.LOCATION,writer,true);\n",
            "startLine": 372,
            "endLine": 372,
            "startColumn": 5,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(Pattern.quote(jar));\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 6,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(Pattern.quote(jar));\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(\"^/META-INF/native-image/.*\");\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 6,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(\"^/META-INF/native-image/.*\");\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 4,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ZipEntryContentWriter writer=ZipEntryContentWriter.fromLines(BootZipCopyAction.this.encoding,args);\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 5,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ZipEntryContentWriter writer=ZipEntryContentWriter.fromLines(BootZipCopyAction.this.encoding,lines);\n",
            "startLine": 371,
            "endLine": 371,
            "startColumn": 5,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Properties properties=new Properties();\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReachabilityMetadataProperties properties=ReachabilityMetadataProperties.fromInputStream(inputStream);\n",
            "startLine": 361,
            "endLine": 362,
            "startColumn": 7,
            "endColumn": 39
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "c6536c54d834b41d847685a935338c04067ddc37",
      "url": "https://github.com/spring-projects/spring-boot/commit/c6536c54d834b41d847685a935338c04067ddc37",
      "originalMethod": {
        "container": "org.springframework.boot.loader.tools.Packager",
        "type": "Method",
        "name": "writeNativeImageArgFile",
        "filePath": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
        "startLine": 227,
        "endLine": 257,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.loader.tools.Packager",
        "type": "Method",
        "name": "writeNativeImageArgFile",
        "filePath": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
        "startLine": 222,
        "endLine": 245,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: writtenLibraries.entrySet())",
            "startLine": 230,
            "endLine": 243,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: writtenLibraries.entrySet())",
            "startLine": 225,
            "endLine": 238,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(zipEntry != null)",
            "startLine": 234,
            "endLine": 242,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(zipEntry != null)",
            "startLine": 229,
            "endLine": 237,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream inputStream=sourceJar.getInputStream(zipEntry))",
            "startLine": 235,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream inputStream=sourceJar.getInputStream(zipEntry))",
            "startLine": 230,
            "endLine": 236,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 238,
            "endLine": 240,
            "startColumn": 68,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 233,
            "endLine": 235,
            "startColumn": 37,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "excludes.add(entry.getKey());\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 7,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "excludes.add(entry.getKey());\n",
            "startLine": 234,
            "endLine": 234,
            "startColumn": 7,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> excludes=new LinkedHashSet<>();\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> excludes=new LinkedHashSet<>();\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 3,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibraryCoordinates coordinates=entry.getValue().getCoordinates();\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 4,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibraryCoordinates coordinates=entry.getValue().getCoordinates();\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 4,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ZipEntry zipEntry=(coordinates != null) ? sourceJar.getEntry(REACHABILITY_METADATA_PROPERTIES_LOCATION.formatted(coordinates.getGroupId(),coordinates.getArtifactId(),coordinates.getVersion())) : null;\n",
            "startLine": 232,
            "endLine": 233,
            "startColumn": 4,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ZipEntry zipEntry=(coordinates != null) ? sourceJar.getEntry(ReachabilityMetadataProperties.getLocation(coordinates)) : null;\n",
            "startLine": 227,
            "endLine": 228,
            "startColumn": 4,
            "endColumn": 91
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(inputStream);\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 6,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(inputStream);\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 3,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lastSlash=exclude.lastIndexOf('/');\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lastSlash=exclude.lastIndexOf('/');\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 4,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String jar=(lastSlash != -1) ? exclude.substring(lastSlash + 1) : exclude;\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 5,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String jar=(lastSlash != -1) ? exclude.substring(lastSlash + 1) : exclude;\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 4,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(\"^/META-INF/native-image/.*\");\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(\"^/META-INF/native-image/.*\");\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 4,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "writer.writeEntry(\"META-INF/native-image/argfile\",new ByteArrayInputStream(contents.getBytes(StandardCharsets.UTF_8)));\n",
            "startLine": 254,
            "endLine": 255,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "writer.writeEntry(NativeImageArgFile.LOCATION,new ByteArrayInputStream(contents.getBytes(StandardCharsets.UTF_8)));\n",
            "startLine": 242,
            "endLine": 243,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> args=new ArrayList<>();\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 4,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> lines=new ArrayList<>();\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 246,
            "endLine": 252,
            "startColumn": 36,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 59,
            "endLine": 65,
            "startColumn": 40,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(\"--exclude-config\");\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(\"--exclude-config\");\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String contents=args.stream().collect(Collectors.joining(\"\\n\")) + \"\\n\";\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 4,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String contents=String.join(\"\\n\",lines) + \"\\n\";\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 4,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "args.add(Pattern.quote(jar));\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lines.add(Pattern.quote(jar));\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Properties properties=new Properties();\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 6,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReachabilityMetadataProperties properties=ReachabilityMetadataProperties.fromInputStream(inputStream);\n",
            "startLine": 231,
            "endLine": 232,
            "startColumn": 6,
            "endColumn": 38
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "c93e248c46c2c4a7cef5596b23e54c715c52a204",
      "url": "https://github.com/spring-projects/spring-boot/commit/c93e248c46c2c4a7cef5596b23e54c715c52a204",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontMetricsExportAutoConfigurationTests",
        "type": "Method",
        "name": "exportsApplicationTagsInWavefrontRegistryWhenInProperties",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontMetricsExportAutoConfigurationTests.java",
        "startLine": 107,
        "endLine": 121,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontMetricsExportAutoConfigurationTests",
        "type": "Method",
        "name": "exportsApplicationTagsInWavefrontRegistryWhenInProperties",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontMetricsExportAutoConfigurationTests.java",
        "startLine": 107,
        "endLine": 121,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "WavefrontMeterRegistry registry=context.getBean(WavefrontMeterRegistry.class);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 6,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "WavefrontMeterRegistry registry=context.getBean(WavefrontMeterRegistry.class);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 6,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registry.counter(\"my.counter\",\"env\",\"qa\");\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 6,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registry.counter(\"my.counter\",\"env\",\"qa\");\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 6,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(registry.find(\"my.counter\").tags(\"env\",\"qa\").tags(\"application\",\"super-application\").tags(\"service\",\"super-service\").tags(\"cluster\",\"super-cluster\").tags(\"shard\",\"super-shard\").counter()).isNotNull();\n",
            "startLine": 117,
            "endLine": 119,
            "startColumn": 6,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(registry.find(\"my.counter\").tags(\"env\",\"qa\").tags(\"application\",\"super-application\").tags(\"service\",\"super-service\").tags(\"cluster\",\"super-cluster\").tags(\"shard\",\"super-shard\").counter()).isNotNull();\n",
            "startLine": 117,
            "endLine": 119,
            "startColumn": 6,
            "endColumn": 61
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.contextRunner.withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class)).withPropertyValues(\"management.wavefront.service-name=super-service\",\"management.wavefront.application-name=super-application\",\"management.wavefront.cluster-name=super-cluster\",\"management.wavefront.shard-name=super-shard\").withUserConfiguration(BaseConfiguration.class).run((context) -> {\n  WavefrontMeterRegistry registry=context.getBean(WavefrontMeterRegistry.class);\n  registry.counter(\"my.counter\",\"env\",\"qa\");\n  assertThat(registry.find(\"my.counter\").tags(\"env\",\"qa\").tags(\"application\",\"super-application\").tags(\"service\",\"super-service\").tags(\"cluster\",\"super-cluster\").tags(\"shard\",\"super-shard\").counter()).isNotNull();\n}\n);\n",
            "startLine": 109,
            "endLine": 120,
            "startColumn": 3,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.contextRunner.withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class)).withPropertyValues(\"management.wavefront.application.service-name=super-service\",\"management.wavefront.application.name=super-application\",\"management.wavefront.application.cluster-name=super-cluster\",\"management.wavefront.application.shard-name=super-shard\").withUserConfiguration(BaseConfiguration.class).run((context) -> {\n  WavefrontMeterRegistry registry=context.getBean(WavefrontMeterRegistry.class);\n  registry.counter(\"my.counter\",\"env\",\"qa\");\n  assertThat(registry.find(\"my.counter\").tags(\"env\",\"qa\").tags(\"application\",\"super-application\").tags(\"service\",\"super-service\").tags(\"cluster\",\"super-cluster\").tags(\"shard\",\"super-shard\").counter()).isNotNull();\n}\n);\n",
            "startLine": 109,
            "endLine": 120,
            "startColumn": 3,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "c93e248c46c2c4a7cef5596b23e54c715c52a204",
      "url": "https://github.com/spring-projects/spring-boot/commit/c93e248c46c2c4a7cef5596b23e54c715c52a204",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.tracing.wavefront.WavefrontTracingAutoConfigurationTests",
        "type": "Method",
        "name": "shouldHonorConfigProperties",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/tracing/wavefront/WavefrontTracingAutoConfigurationTests.java",
        "startLine": 138,
        "endLine": 150,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.tracing.wavefront.WavefrontTracingAutoConfigurationTests",
        "type": "Method",
        "name": "shouldHonorConfigProperties",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/tracing/wavefront/WavefrontTracingAutoConfigurationTests.java",
        "startLine": 138,
        "endLine": 153,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationTags applicationTags=context.getBean(ApplicationTags.class);\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 6,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationTags applicationTags=context.getBean(ApplicationTags.class);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 6,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getApplication()).isEqualTo(\"super-application\");\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 6,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getApplication()).isEqualTo(\"super-application\");\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 6,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getService()).isEqualTo(\"super-service\");\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 6,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getService()).isEqualTo(\"super-service\");\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 6,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getCluster()).isEqualTo(\"super-cluster\");\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 6,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getCluster()).isEqualTo(\"super-cluster\");\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 6,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getShard()).isEqualTo(\"super-shard\");\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 6,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(applicationTags.getShard()).isEqualTo(\"super-shard\");\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 6,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.contextRunner.withUserConfiguration(WavefrontSenderConfiguration.class).withPropertyValues(\"spring.application.name=ignored\",\"management.wavefront.application-name=super-application\",\"management.wavefront.service-name=super-service\",\"management.wavefront.cluster-name=super-cluster\",\"management.wavefront.shard-name=super-shard\").run((context) -> {\n  ApplicationTags applicationTags=context.getBean(ApplicationTags.class);\n  assertThat(applicationTags.getApplication()).isEqualTo(\"super-application\");\n  assertThat(applicationTags.getService()).isEqualTo(\"super-service\");\n  assertThat(applicationTags.getCluster()).isEqualTo(\"super-cluster\");\n  assertThat(applicationTags.getShard()).isEqualTo(\"super-shard\");\n}\n);\n",
            "startLine": 140,
            "endLine": 149,
            "startColumn": 3,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.contextRunner.withUserConfiguration(WavefrontSenderConfiguration.class).withPropertyValues(\"spring.application.name=ignored\",\"management.wavefront.application.name=super-application\",\"management.wavefront.application.service-name=super-service\",\"management.wavefront.application.cluster-name=super-cluster\",\"management.wavefront.application.shard-name=super-shard\").run((context) -> {\n  ApplicationTags applicationTags=context.getBean(ApplicationTags.class);\n  assertThat(applicationTags.getApplication()).isEqualTo(\"super-application\");\n  assertThat(applicationTags.getService()).isEqualTo(\"super-service\");\n  assertThat(applicationTags.getCluster()).isEqualTo(\"super-cluster\");\n  assertThat(applicationTags.getShard()).isEqualTo(\"super-shard\");\n}\n);\n",
            "startLine": 140,
            "endLine": 152,
            "startColumn": 3,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "2baac78175257d05cdef5bd23d3ed977759cc3e0",
      "url": "https://github.com/spring-projects/spring-boot/commit/2baac78175257d05cdef5bd23d3ed977759cc3e0",
      "originalMethod": {
        "container": "org.springframework.boot.web.client.ClientHttpRequestFactoriesRuntimeHints",
        "type": "Method",
        "name": "registerHints",
        "filePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/ClientHttpRequestFactoriesRuntimeHints.java",
        "startLine": 53,
        "endLine": 62,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.web.client.ClientHttpRequestFactoriesRuntimeHints",
        "type": "Method",
        "name": "registerHints",
        "filePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/ClientHttpRequestFactoriesRuntimeHints.java",
        "startLine": 52,
        "endLine": 66,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "hints.registerField(findField(AbstractClientHttpRequestFactoryWrapper.class,\"requestFactory\"));\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 3,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "hints.registerField(findField(AbstractClientHttpRequestFactoryWrapper.class,\"requestFactory\"));\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 3,
            "endColumn": 99
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(TypeReference.of(ClientHttpRequestFactories.OKHTTP_CLIENT_CLASS));\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 3,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(TypeReference.of(ClientHttpRequestFactories.OKHTTP_CLIENT_CLASS));\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 4,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(TypeReference.of(ClientHttpRequestFactories.APACHE_HTTP_CLIENT_CLASS));\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 3,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(TypeReference.of(ClientHttpRequestFactories.APACHE_HTTP_CLIENT_CLASS));\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 4,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(HttpURLConnection.class);\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 3,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "typeHint.onReachableType(HttpURLConnection.class);\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 4,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,SimpleClientHttpRequestFactory.class,this::onReachableHttpUrlConnection);\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 3,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,SimpleClientHttpRequestFactory.class);\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 4,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,OkHttp3ClientHttpRequestFactory.class,this::onReachableOkHttpClient);\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,OkHttp3ClientHttpRequestFactory.class);\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 4,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,HttpComponentsClientHttpRequestFactory.class,this::onReachableHttpClient);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 4,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerReflectionHints(hints,HttpComponentsClientHttpRequestFactory.class);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 4,
            "endColumn": 81
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "2baac78175257d05cdef5bd23d3ed977759cc3e0",
      "url": "https://github.com/spring-projects/spring-boot/commit/2baac78175257d05cdef5bd23d3ed977759cc3e0",
      "originalMethod": {
        "container": "org.springframework.boot.web.client.ClientHttpRequestFactoriesRuntimeHintsTests",
        "type": "Method",
        "name": "shouldRegisterHints",
        "filePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/ClientHttpRequestFactoriesRuntimeHintsTests.java",
        "startLine": 39,
        "endLine": 47,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.web.client.ClientHttpRequestFactoriesRuntimeHintsTests",
        "type": "Method",
        "name": "shouldRegisterHints",
        "filePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/ClientHttpRequestFactoriesRuntimeHintsTests.java",
        "startLine": 43,
        "endLine": 52,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RuntimeHints hints=new RuntimeHints();\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RuntimeHints hints=new RuntimeHints();\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 3,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "new ClientHttpRequestFactoriesRuntimeHints().registerHints(hints,getClass().getClassLoader());\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 3,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "new ClientHttpRequestFactoriesRuntimeHints().registerHints(hints,getClass().getClassLoader());\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 3,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReflectionHintsPredicates reflection=RuntimeHintsPredicates.reflection();\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 3,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReflectionHintsPredicates reflection=RuntimeHintsPredicates.reflection();\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 3,
            "endColumn": 78
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(reflection.onField(ReflectionUtils.findField(AbstractClientHttpRequestFactoryWrapper.class,\"requestFactory\"))).accepts(hints);\n",
            "startLine": 44,
            "endLine": 46,
            "startColumn": 3,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Field requestFactoryField=ReflectionUtils.findField(AbstractClientHttpRequestFactoryWrapper.class,\"requestFactory\");\n",
            "startLine": 48,
            "endLine": 49,
            "startColumn": 3,
            "endColumn": 23
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(reflection.onField(ReflectionUtils.findField(AbstractClientHttpRequestFactoryWrapper.class,\"requestFactory\"))).accepts(hints);\n",
            "startLine": 44,
            "endLine": 46,
            "startColumn": 3,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(reflection.onField(requestFactoryField)).accepts(hints);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "url": "https://github.com/spring-projects/spring-boot/commit/fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeAppliesCustomizer",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 72,
        "endLine": 81,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeAppliesCustomizer",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 78,
        "endLine": 87,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.customizers.add(this.mockCustomizer);\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 3,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.customizers.add(this.mockCustomizer);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 3,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeMeterRegistry composite=new CompositeMeterRegistry();\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 3,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeMeterRegistry composite=new CompositeMeterRegistry();\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 3,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,composite);\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 3,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,composite);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 3,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockCustomizer).should().customize(composite);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockCustomizer).should().customize(composite);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 3,
            "endColumn": 59
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,false,createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 75,
            "endLine": 77,
            "startColumn": 3,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,createObjectProvider(this.properties),createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 81,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "url": "https://github.com/spring-projects/spring-boot/commit/fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeBindsTo",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 116,
        "endLine": 125,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeBindsTo",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 122,
        "endLine": 131,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.binders.add(this.mockBinder);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.binders.add(this.mockBinder);\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeMeterRegistry composite=new CompositeMeterRegistry();\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 3,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeMeterRegistry composite=new CompositeMeterRegistry();\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 3,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,composite);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 3,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,composite);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockBinder).should().bindTo(composite);\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 3,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockBinder).should().bindTo(composite);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 3,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,false,createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 119,
            "endLine": 121,
            "startColumn": 3,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,createObjectProvider(this.properties),createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 125,
            "endLine": 127,
            "startColumn": 3,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "url": "https://github.com/spring-projects/spring-boot/commit/fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeExistsDoesNotBindTo",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 127,
        "endLine": 134,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenCompositeExistsDoesNotBindTo",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 133,
        "endLine": 141,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "given(this.mockRegistry.config()).willReturn(this.mockConfig);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "given(this.mockRegistry.config()).willReturn(this.mockConfig);\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 3,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,this.mockRegistry);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,this.mockRegistry);\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 3,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockBinder).shouldHaveNoInteractions();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 3,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "then(this.mockBinder).shouldHaveNoInteractions();\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 3,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,false,createObjectProvider(this.customizers),createObjectProvider(this.filters),null);\n",
            "startLine": 130,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(false,createObjectProvider(this.properties),createObjectProvider(this.customizers),createObjectProvider(this.filters),null);\n",
            "startLine": 136,
            "endLine": 138,
            "startColumn": 3,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "url": "https://github.com/spring-projects/spring-boot/commit/fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenUseGlobalRegistryTrueAddsToGlobalRegistry",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 152,
        "endLine": 165,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessorTests",
        "type": "Method",
        "name": "postProcessAndInitializeWhenUseGlobalRegistryTrueAddsToGlobalRegistry",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java",
        "startLine": 159,
        "endLine": 173,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 158,
            "endLine": 164,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 166,
            "endLine": 172,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,this.mockRegistry);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 4,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "postProcessAndInitialize(processor,this.mockRegistry);\n",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 4,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 4,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 4,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 162,
            "endLine": 164,
            "startColumn": 11,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 170,
            "endLine": 172,
            "startColumn": 11,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Metrics.removeRegistry(this.mockRegistry);\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 4,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Metrics.removeRegistry(this.mockRegistry);\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 4,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "given(this.mockRegistry.config()).willReturn(this.mockConfig);\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 3,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "given(this.mockRegistry.config()).willReturn(this.mockConfig);\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 3,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(true,true,createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 155,
            "endLine": 157,
            "startColumn": 3,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MeterRegistryPostProcessor processor=new MeterRegistryPostProcessor(true,createObjectProvider(this.properties),createObjectProvider(this.customizers),createObjectProvider(this.filters),createObjectProvider(this.binders));\n",
            "startLine": 163,
            "endLine": 165,
            "startColumn": 3,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-boot.git",
      "sha1": "fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "url": "https://github.com/spring-projects/spring-boot/commit/fe72f307f4f3e94c79e253f223ba3d5d4ef1def3",
      "originalMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor",
        "type": "Method",
        "name": "MeterRegistryPostProcessor",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessor.java",
        "startLine": 70,
        "endLine": 79,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor",
        "type": "Method",
        "name": "MeterRegistryPostProcessor",
        "filePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessor.java",
        "startLine": 69,
        "endLine": 78,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.hasNoCompositeMeterRegistryBeans=hasNoCompositeMeterRegistryBeans;\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 3,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.hasNoCompositeMeterRegistryBeans=hasNoCompositeMeterRegistryBeans;\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 3,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.customizers=customizers;\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.customizers=customizers;\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 3,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters=filters;\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters=filters;\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 3,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.binders=binders;\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 3,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.binders=binders;\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.useGlobalRegistry=useGlobalRegistry;\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 3,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.properties=properties;\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 3,
            "endColumn": 32
          },
          "developerConfirmation": false
        }
      ]
    }
  ]
}