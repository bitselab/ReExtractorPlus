{
  "results": [
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "1a1b9cfe4c952ddb4fe0466e017212f07813e4cb",
      "url": "https://github.com/eclipse/jetty.project/commit/1a1b9cfe4c952ddb4fe0466e017212f07813e4cb",
      "originalMethod": {
        "container": "org.eclipse.jetty.client.HttpRedirector",
        "type": "Method",
        "name": "isRedirect",
        "filePath": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpRedirector.java",
        "startLine": 80,
        "endLine": 97,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.client.HttpRedirector",
        "type": "Method",
        "name": "isRedirect",
        "filePath": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpRedirector.java",
        "startLine": 82,
        "endLine": 99,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(response.getStatus())",
            "startLine": 86,
            "endLine": 96,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(response.getStatus())",
            "startLine": 88,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 13,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 13,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 17,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 17,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 17,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 17,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 308:",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.PERMANENT_REDIRECT_308:",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 307:",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.TEMPORARY_REDIRECT_307:",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 302:",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_TEMPORARILY_302:",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 301:",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_PERMANENTLY_301:",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 303:",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.SEE_OTHER_303:",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 301:",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.SEE_OTHER_303:",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 303:",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_PERMANENTLY_301:",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "1a1b9cfe4c952ddb4fe0466e017212f07813e4cb",
      "url": "https://github.com/eclipse/jetty.project/commit/1a1b9cfe4c952ddb4fe0466e017212f07813e4cb",
      "originalMethod": {
        "container": "org.eclipse.jetty.client.HttpRedirector",
        "type": "Method",
        "name": "redirect",
        "filePath": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpRedirector.java",
        "startLine": 175,
        "endLine": 232,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.client.HttpRedirector",
        "type": "Method",
        "name": "redirect",
        "filePath": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpRedirector.java",
        "startLine": 177,
        "endLine": 234,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!newURI.isAbsolute())",
            "startLine": 177,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!newURI.isAbsolute())",
            "startLine": 179,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 178,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 180,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URI requestURI=request.getURI();\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URI requestURI=request.getURI();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(requestURI == null)",
            "startLine": 180,
            "endLine": 187,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(requestURI == null)",
            "startLine": 182,
            "endLine": 189,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 181,
            "endLine": 187,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 183,
            "endLine": 189,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String uri=request.getScheme() + \"://\" + request.getHost();\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 17,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String uri=request.getScheme() + \"://\" + request.getHost();\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 17,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int port=request.getPort();\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 17,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int port=request.getPort();\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 17,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(port > 0)",
            "startLine": 184,
            "endLine": 185,
            "startColumn": 17,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(port > 0)",
            "startLine": 186,
            "endLine": 187,
            "startColumn": 17,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "uri+=\":\" + port;\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 21,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "uri+=\":\" + port;\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 21,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requestURI=URI.create(uri);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 17,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requestURI=URI.create(uri);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 17,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "newURI=requestURI.resolve(newURI);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 13,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "newURI=requestURI.resolve(newURI);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 13,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 192,
            "endLine": 231,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 194,
            "endLine": 233,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.GET.is(method) || HttpMethod.HEAD.is(method) || HttpMethod.PUT.is(method))",
            "startLine": 197,
            "endLine": 200,
            "startColumn": 17,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.GET.is(method) || HttpMethod.HEAD.is(method) || HttpMethod.PUT.is(method))",
            "startLine": 199,
            "endLine": 202,
            "startColumn": 17,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 21,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 21,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.POST.is(method))",
            "startLine": 199,
            "endLine": 200,
            "startColumn": 22,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.POST.is(method))",
            "startLine": 201,
            "endLine": 202,
            "startColumn": 22,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 21,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 21,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.HEAD.is(method) || HttpMethod.PUT.is(method))",
            "startLine": 207,
            "endLine": 210,
            "startColumn": 17,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.HEAD.is(method) || HttpMethod.PUT.is(method))",
            "startLine": 209,
            "endLine": 212,
            "startColumn": 17,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 21,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 21,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 21,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 21,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.HEAD.is(method))",
            "startLine": 215,
            "endLine": 218,
            "startColumn": 17,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(HttpMethod.HEAD.is(method))",
            "startLine": 217,
            "endLine": 220,
            "startColumn": 17,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 21,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,method);\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 21,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 21,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,HttpMethod.GET.asString());\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 21,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 13,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 13,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 227,
            "endLine": 230,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 229,
            "endLine": 232,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(request,response,new HttpResponseException(\"Unhandled HTTP status code \" + status,response));\n",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 17,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(request,response,new HttpResponseException(\"Unhandled HTTP status code \" + status,response));\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 17,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 17,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 17,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 195,
            "endLine": 203,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 197,
            "endLine": 205,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 17,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 17,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(request,response,new HttpResponseException(\"HTTP protocol violation: received 301 for non GET/HEAD/POST/PUT request\",response));\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 17,
            "endColumn": 153
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(request,response,new HttpResponseException(\"HTTP protocol violation: received 301 for non GET/HEAD/POST/PUT request\",response));\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 17,
            "endColumn": 153
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 17,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 17,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 205,
            "endLine": 211,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 207,
            "endLine": 213,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 17,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 17,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 213,
            "endLine": 219,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 215,
            "endLine": 221,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 17,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String method=request.getMethod();\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 17,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 222,
            "endLine": 225,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 224,
            "endLine": 227,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,request.getMethod());\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 17,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return redirect(request,response,listener,newURI,request.getMethod());\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 17,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int status=response.getStatus();\n",
            "startLine": 191,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int status=response.getStatus();\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 302:",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_TEMPORARILY_302:",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 308:",
            "startLine": 221,
            "endLine": 221,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.PERMANENT_REDIRECT_308:",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 307:",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.TEMPORARY_REDIRECT_307:",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 301:",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_PERMANENTLY_301:",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 303:",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.SEE_OTHER_303:",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 301:",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.SEE_OTHER_303:",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case 303:",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 13,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case HttpStatus.MOVED_PERMANENTLY_301:",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "url": "https://github.com/eclipse/jetty.project/commit/d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "originalMethod": {
        "container": "org.eclipse.jetty.quic.quiche.foreign.incubator.quiche_recv_info",
        "type": "Method",
        "name": "setSocketAddress",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-foreign-incubator/src/main/java/org/eclipse/jetty/quic/quiche/foreign/incubator/quiche_recv_info.java",
        "startLine": 43,
        "endLine": 48,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.quic.quiche.foreign.incubator.quiche_recv_info",
        "type": "Method",
        "name": "setSocketAddress",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-foreign-incubator/src/main/java/org/eclipse/jetty/quic/quiche/foreign/incubator/quiche_recv_info.java",
        "startLine": 48,
        "endLine": 56,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MemorySegment sockAddrSegment=sockaddr.convert(peer,scope);\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MemorySegment peerSockAddrSegment=sockaddr.convert(peer,scope);\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "from.set(recvInfo,sockAddrSegment.address());\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "from.set(recvInfo,peerSockAddrSegment.address());\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "from_len.set(recvInfo,(int)sockAddrSegment.byteSize());\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "from_len.set(recvInfo,(int)peerSockAddrSegment.byteSize());\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "url": "https://github.com/eclipse/jetty.project/commit/d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "originalMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "tryAccept",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 296,
        "endLine": 370,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "tryAccept",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 309,
        "endLine": 384,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(rc < 0)",
            "startLine": 322,
            "endLine": 323,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(rc < 0)",
            "startLine": 335,
            "endLine": 336,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to parse header: \" + quiche_error.errToString(rc));\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 13,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to parse header: \" + quiche_error.errToString(rc));\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 13,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!LibQuiche.INSTANCE.quiche_version_is_supported(version.getPointee()))",
            "startLine": 331,
            "endLine": 335,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!LibQuiche.INSTANCE.quiche_version_is_supported(version.getPointee()))",
            "startLine": 344,
            "endLine": 348,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 332,
            "endLine": 335,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 345,
            "endLine": 348,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"need version negotiation\");\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 13,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"need version negotiation\");\n",
            "startLine": 346,
            "endLine": 346,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 13,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 13,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(token_len.getValue() == 0)",
            "startLine": 337,
            "endLine": 341,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(token_len.getValue() == 0)",
            "startLine": 350,
            "endLine": 354,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 338,
            "endLine": 341,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 351,
            "endLine": 354,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"need stateless retry\");\n",
            "startLine": 339,
            "endLine": 339,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"need stateless retry\");\n",
            "startLine": 352,
            "endLine": 352,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 13,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 13,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(odcid == null)",
            "startLine": 346,
            "endLine": 347,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(odcid == null)",
            "startLine": 359,
            "endLine": 360,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TokenValidationException(\"invalid address validation token\");\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 13,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TokenValidationException(\"invalid address validation token\");\n",
            "startLine": 360,
            "endLine": 360,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(quicheConn == null)",
            "startLine": 356,
            "endLine": 360,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(quicheConn == null)",
            "startLine": 370,
            "endLine": 374,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 357,
            "endLine": 360,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 371,
            "endLine": 374,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LibQuiche.INSTANCE.quiche_config_free(libQuicheConfig);\n",
            "startLine": 358,
            "endLine": 358,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LibQuiche.INSTANCE.quiche_config_free(libQuicheConfig);\n",
            "startLine": 372,
            "endLine": 372,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to create connection\");\n",
            "startLine": 359,
            "endLine": 359,
            "startColumn": 13,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to create connection\");\n",
            "startLine": 373,
            "endLine": 373,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(packetRead.hasRemaining())",
            "startLine": 365,
            "endLine": 368,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(packetRead.hasRemaining())",
            "startLine": 379,
            "endLine": 382,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "uint8_t_pointer type=new uint8_t_pointer();\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "uint8_t_pointer type=new uint8_t_pointer();\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 9,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "uint32_t_pointer version=new uint32_t_pointer();\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "uint32_t_pointer version=new uint32_t_pointer();\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] scid=new byte[QUICHE_MAX_CONN_ID_LEN];\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] scid=new byte[QUICHE_MAX_CONN_ID_LEN];\n",
            "startLine": 319,
            "endLine": 319,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer scid_len=new size_t_pointer(scid.length);\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 9,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer scid_len=new size_t_pointer(scid.length);\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 9,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] dcid=new byte[QUICHE_MAX_CONN_ID_LEN];\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] dcid=new byte[QUICHE_MAX_CONN_ID_LEN];\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer dcid_len=new size_t_pointer(dcid.length);\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 9,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer dcid_len=new size_t_pointer(dcid.length);\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 9,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] token=new byte[TokenMinter.MAX_TOKEN_LENGTH];\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 9,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] token=new byte[TokenMinter.MAX_TOKEN_LENGTH];\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer token_len=new size_t_pointer(token.length);\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "size_t_pointer token_len=new size_t_pointer(token.length);\n",
            "startLine": 327,
            "endLine": 327,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"getting header info (tryAccept)...\");\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 9,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"getting header info (tryAccept)...\");\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int rc=LibQuiche.INSTANCE.quiche_header_info(packetRead,new size_t(packetRead.remaining()),new size_t(QUICHE_MAX_CONN_ID_LEN),version,type,scid,scid_len,dcid,dcid_len,token,token_len);\n",
            "startLine": 317,
            "endLine": 321,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int rc=LibQuiche.INSTANCE.quiche_header_info(packetRead,new size_t(packetRead.remaining()),new size_t(QUICHE_MAX_CONN_ID_LEN),version,type,scid,scid_len,dcid,dcid_len,token,token_len);\n",
            "startLine": 330,
            "endLine": 334,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"version: {}\",version);\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"version: {}\",version);\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"type: {}\",type);\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"type: {}\",type);\n",
            "startLine": 339,
            "endLine": 339,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"scid len: {}\",scid_len);\n",
            "startLine": 327,
            "endLine": 327,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"scid len: {}\",scid_len);\n",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"dcid len: {}\",dcid_len);\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"dcid len: {}\",dcid_len);\n",
            "startLine": 341,
            "endLine": 341,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"token len: {}\",token_len);\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"token len: {}\",token_len);\n",
            "startLine": 342,
            "endLine": 342,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"token validation...\");\n",
            "startLine": 343,
            "endLine": 343,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"token validation...\");\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] odcid=tokenValidator.validate(token,(int)token_len.getValue());\n",
            "startLine": 345,
            "endLine": 345,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] odcid=tokenValidator.validate(token,(int)token_len.getValue());\n",
            "startLine": 358,
            "endLine": 358,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"validated token\");\n",
            "startLine": 348,
            "endLine": 348,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"validated token\");\n",
            "startLine": 361,
            "endLine": 361,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"connection creation...\");\n",
            "startLine": 350,
            "endLine": 350,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"connection creation...\");\n",
            "startLine": 363,
            "endLine": 363,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_config libQuicheConfig=buildConfig(quicheConfig);\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 9,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_config libQuicheConfig=buildConfig(quicheConfig);\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 9,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"connection created\");\n",
            "startLine": 362,
            "endLine": 362,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"connection created\");\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JnaQuicheConnection quicheConnection=new JnaQuicheConnection(quicheConn,libQuicheConfig);\n",
            "startLine": 363,
            "endLine": 363,
            "startColumn": 9,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JnaQuicheConnection quicheConnection=new JnaQuicheConnection(quicheConn,libQuicheConfig);\n",
            "startLine": 377,
            "endLine": 377,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"accepted, immediately receiving the same packet - remaining in buffer: {}\",packetRead.remaining());\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 9,
            "endColumn": 120
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"accepted, immediately receiving the same packet - remaining in buffer: {}\",packetRead.remaining());\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 9,
            "endColumn": 120
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return quicheConnection;\n",
            "startLine": 369,
            "endLine": 369,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return quicheConnection;\n",
            "startLine": 383,
            "endLine": 383,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_conn quicheConn=LibQuiche.INSTANCE.quiche_accept(dcid,dcid_len.getPointee(),odcid,new size_t(odcid.length),s.getStructure(),s.getSize(),libQuicheConfig);\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 9,
            "endColumn": 187
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_conn quicheConn=LibQuiche.INSTANCE.quiche_accept(dcid,dcid_len.getPointee(),odcid,new size_t(odcid.length),localSockaddr.getStructure(),localSockaddr.getSize(),peerSockaddr.getStructure(),peerSockaddr.getSize(),libQuicheConfig);\n",
            "startLine": 368,
            "endLine": 368,
            "startColumn": 9,
            "endColumn": 264
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 366,
            "endLine": 368,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 380,
            "endLine": 382,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "quicheConnection.feedCipherBytes(packetRead,peer);\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 13,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "quicheConnection.feedCipherBytes(packetRead,local,peer);\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 13,
            "endColumn": 71
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> s=sockaddr.convert(peer);\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> peerSockaddr=sockaddr.convert(peer);\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> s=sockaddr.convert(peer);\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> localSockaddr=sockaddr.convert(local);\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "url": "https://github.com/eclipse/jetty.project/commit/d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "originalMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "connect",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 107,
        "endLine": 118,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "connect",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 107,
        "endLine": 119,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(connectionIdLength > QUICHE_MAX_CONN_ID_LEN)",
            "startLine": 109,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 128
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(connectionIdLength > QUICHE_MAX_CONN_ID_LEN)",
            "startLine": 109,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Connection ID length is too large: \" + connectionIdLength + \" > \"+ QUICHE_MAX_CONN_ID_LEN);\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 13,
            "endColumn": 128
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Connection ID length is too large: \" + connectionIdLength + \" > \"+ QUICHE_MAX_CONN_ID_LEN);\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 13,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] scid=new byte[connectionIdLength];\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "byte[] scid=new byte[connectionIdLength];\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "SECURE_RANDOM.nextBytes(scid);\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "SECURE_RANDOM.nextBytes(scid);\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_config libQuicheConfig=buildConfig(quicheConfig);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_config libQuicheConfig=buildConfig(quicheConfig);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new JnaQuicheConnection(quicheConn,libQuicheConfig);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new JnaQuicheConnection(quicheConn,libQuicheConfig);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_conn quicheConn=LibQuiche.INSTANCE.quiche_connect(peer.getHostName(),scid,new size_t(scid.length),s.getStructure(),s.getSize(),libQuicheConfig);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 177
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_conn quicheConn=LibQuiche.INSTANCE.quiche_connect(peer.getHostName(),scid,new size_t(scid.length),localSockaddr.getStructure(),localSockaddr.getSize(),peerSockaddr.getStructure(),peerSockaddr.getSize(),libQuicheConfig);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 254
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> s=sockaddr.convert(peer);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> peerSockaddr=sockaddr.convert(peer);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> s=sockaddr.convert(peer);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> localSockaddr=sockaddr.convert(local);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "url": "https://github.com/eclipse/jetty.project/commit/d6a101d46364bc91d3d4612e946a2b8d7493e2b4",
      "originalMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "feedCipherBytes",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 403,
        "endLine": 428,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.quic.quiche.jna.JnaQuicheConnection",
        "type": "Method",
        "name": "feedCipherBytes",
        "filePath": "jetty-quic/quic-quiche/quic-quiche-jna/src/main/java/org/eclipse/jetty/quic/quiche/jna/JnaQuicheConnection.java",
        "startLine": 417,
        "endLine": 438,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock ignore=lock.lock())",
            "startLine": 413,
            "endLine": 427,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock ignore=lock.lock())",
            "startLine": 420,
            "endLine": 437,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(quicheConn == null)",
            "startLine": 415,
            "endLine": 416,
            "startColumn": 13,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(quicheConn == null)",
            "startLine": 422,
            "endLine": 423,
            "startColumn": 13,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Cannot receive when not connected\");\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 17,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Cannot receive when not connected\");\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 17,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(received < 0)",
            "startLine": 423,
            "endLine": 424,
            "startColumn": 13,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(received < 0)",
            "startLine": 433,
            "endLine": 434,
            "startColumn": 13,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to receive packet; err=\" + quiche_error.errToString(received));\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 17,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"failed to receive packet; err=\" + quiche_error.errToString(received));\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 17,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_recv_info info=new LibQuiche.quiche_recv_info();\n",
            "startLine": 418,
            "endLine": 418,
            "startColumn": 13,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LibQuiche.quiche_recv_info info=new LibQuiche.quiche_recv_info();\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int received=LibQuiche.INSTANCE.quiche_conn_recv(quicheConn,buffer,new size_t(buffer.remaining()),info).intValue();\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 13,
            "endColumn": 133
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int received=LibQuiche.INSTANCE.quiche_conn_recv(quicheConn,buffer,new size_t(buffer.remaining()),info).intValue();\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 13,
            "endColumn": 133
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "buffer.position(buffer.position() + received);\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "buffer.position(buffer.position() + received);\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return received;\n",
            "startLine": 426,
            "endLine": 426,
            "startColumn": 13,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return received;\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 13,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> s=sockaddr.convert(peer);\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 13,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SizedStructure<sockaddr> peerSockaddr=sockaddr.convert(peer);\n",
            "startLine": 429,
            "endLine": 429,
            "startColumn": 13,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from_len=s.getSize();\n",
            "startLine": 421,
            "endLine": 421,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "info.to_len=localSockaddr.getSize();\n",
            "startLine": 428,
            "endLine": 428,
            "startColumn": 13,
            "endColumn": 51
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from=s.getStructure().byReference();\n",
            "startLine": 420,
            "endLine": 420,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "info.to=localSockaddr.getStructure().byReference();\n",
            "startLine": 427,
            "endLine": 427,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from=s.getStructure().byReference();\n",
            "startLine": 420,
            "endLine": 420,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from=peerSockaddr.getStructure().byReference();\n",
            "startLine": 430,
            "endLine": 430,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from_len=s.getSize();\n",
            "startLine": 421,
            "endLine": 421,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "info.from_len=peerSockaddr.getSize();\n",
            "startLine": 431,
            "endLine": 431,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "6f0623f48d7524fe615f9025b51d8353922c6db5",
      "url": "https://github.com/eclipse/jetty.project/commit/6f0623f48d7524fe615f9025b51d8353922c6db5",
      "originalMethod": {
        "container": "org.eclipse.jetty.util.VirtualThreads",
        "type": "Method",
        "name": "startVirtualThread",
        "filePath": "jetty-util/src/main/java/org/eclipse/jetty/util/VirtualThreads.java",
        "startLine": 73,
        "endLine": 94,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.util.VirtualThreads",
        "type": "Method",
        "name": "executeOnVirtualThread",
        "filePath": "jetty-util/src/main/java/org/eclipse/jetty/util/VirtualThreads.java",
        "startLine": 74,
        "endLine": 95,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 83,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 84,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "warn();\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "warn();\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(x);\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(x);\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 85,
            "endLine": 86,
            "startColumn": 13,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 86,
            "endLine": 87,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Starting in virtual thread: {}\",task);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 17,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Starting in virtual thread: {}\",task);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 17,
            "endColumn": 67
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 90,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 91,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "startVirtualThread.invoke(null,task);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 13,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "executor.execute(task);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 89,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 90,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.client.HttpClientTLSTest",
        "type": "Method",
        "name": "testEncryptedInputBufferRepooling",
        "filePath": "jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTLSTest.java",
        "startLine": 711,
        "endLine": 771,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.client.HttpClientTLSTest",
        "type": "Method",
        "name": "testEncryptedInputBufferRepooling",
        "filePath": "jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTLSTest.java",
        "startLine": 755,
        "endLine": 813,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(n > 0)",
            "startLine": 743,
            "endLine": 744,
            "startColumn": 25,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(n > 0)",
            "startLine": 782,
            "endLine": 783,
            "startColumn": 25,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"boom\");\n",
            "startLine": 744,
            "endLine": 744,
            "startColumn": 29,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"boom\");\n",
            "startLine": 783,
            "endLine": 783,
            "startColumn": 29,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslContextFactory.Server serverTLSFactory=createServerSslContextFactory();\n",
            "startLine": 714,
            "endLine": 714,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslContextFactory.Server serverTLSFactory=createServerSslContextFactory();\n",
            "startLine": 758,
            "endLine": 758,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueuedThreadPool serverThreads=new QueuedThreadPool();\n",
            "startLine": 715,
            "endLine": 715,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueuedThreadPool serverThreads=new QueuedThreadPool();\n",
            "startLine": 759,
            "endLine": 759,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "serverThreads.setName(\"server\");\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "serverThreads.setName(\"server\");\n",
            "startLine": 760,
            "endLine": 760,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "server=new Server(serverThreads);\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server=new Server(serverThreads);\n",
            "startLine": 761,
            "endLine": 761,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConfiguration httpConfig=new HttpConfiguration();\n",
            "startLine": 727,
            "endLine": 727,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConfiguration httpConfig=new HttpConfiguration();\n",
            "startLine": 766,
            "endLine": 766,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpConfig.addCustomizer(new SecureRequestCustomizer());\n",
            "startLine": 728,
            "endLine": 728,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpConfig.addCustomizer(new SecureRequestCustomizer());\n",
            "startLine": 767,
            "endLine": 767,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConnectionFactory http=new HttpConnectionFactory(httpConfig);\n",
            "startLine": 729,
            "endLine": 729,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConnectionFactory http=new HttpConnectionFactory(httpConfig);\n",
            "startLine": 768,
            "endLine": 768,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslConnectionFactory ssl=new SslConnectionFactory(serverTLSFactory,http.getProtocol()){\n  @Override protected SslConnection newSslConnection(  Connector connector,  EndPoint endPoint,  SSLEngine engine){\n    ByteBufferPool byteBufferPool=connector.getByteBufferPool();\n    RetainableByteBufferPool retainableByteBufferPool=connector.getBean(RetainableByteBufferPool.class);\n    return new SslConnection(retainableByteBufferPool,byteBufferPool,connector.getExecutor(),endPoint,engine,isDirectBuffersForEncryption(),isDirectBuffersForDecryption()){\n      @Override protected int networkFill(      ByteBuffer input) throws IOException {\n        int n=super.networkFill(input);\n        if (n > 0)         throw new IOException(\"boom\");\n        return n;\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 730,
            "endLine": 749,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslConnectionFactory ssl=new SslConnectionFactory(serverTLSFactory,http.getProtocol()){\n  @Override protected SslConnection newSslConnection(  Connector connector,  EndPoint endPoint,  SSLEngine engine){\n    ByteBufferPool byteBufferPool=connector.getByteBufferPool();\n    RetainableByteBufferPool retainableByteBufferPool=connector.getBean(RetainableByteBufferPool.class);\n    return new SslConnection(retainableByteBufferPool,byteBufferPool,connector.getExecutor(),endPoint,engine,isDirectBuffersForEncryption(),isDirectBuffersForDecryption()){\n      @Override protected int networkFill(      ByteBuffer input) throws IOException {\n        int n=super.networkFill(input);\n        if (n > 0)         throw new IOException(\"boom\");\n        return n;\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 769,
            "endLine": 788,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBufferPool byteBufferPool=connector.getByteBufferPool();\n",
            "startLine": 735,
            "endLine": 735,
            "startColumn": 17,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBufferPool byteBufferPool=connector.getByteBufferPool();\n",
            "startLine": 774,
            "endLine": 774,
            "startColumn": 17,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainableByteBufferPool retainableByteBufferPool=connector.getBean(RetainableByteBufferPool.class);\n",
            "startLine": 736,
            "endLine": 736,
            "startColumn": 17,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainableByteBufferPool retainableByteBufferPool=connector.getBean(RetainableByteBufferPool.class);\n",
            "startLine": 775,
            "endLine": 775,
            "startColumn": 17,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new SslConnection(retainableByteBufferPool,byteBufferPool,connector.getExecutor(),endPoint,engine,isDirectBuffersForEncryption(),isDirectBuffersForDecryption()){\n  @Override protected int networkFill(  ByteBuffer input) throws IOException {\n    int n=super.networkFill(input);\n    if (n > 0)     throw new IOException(\"boom\");\n    return n;\n  }\n}\n;\n",
            "startLine": 737,
            "endLine": 747,
            "startColumn": 17,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new SslConnection(retainableByteBufferPool,byteBufferPool,connector.getExecutor(),endPoint,engine,isDirectBuffersForEncryption(),isDirectBuffersForDecryption()){\n  @Override protected int networkFill(  ByteBuffer input) throws IOException {\n    int n=super.networkFill(input);\n    if (n > 0)     throw new IOException(\"boom\");\n    return n;\n  }\n}\n;\n",
            "startLine": 776,
            "endLine": 786,
            "startColumn": 17,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int n=super.networkFill(input);\n",
            "startLine": 742,
            "endLine": 742,
            "startColumn": 25,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int n=super.networkFill(input);\n",
            "startLine": 781,
            "endLine": 781,
            "startColumn": 25,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return n;\n",
            "startLine": 745,
            "endLine": 745,
            "startColumn": 25,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return n;\n",
            "startLine": 784,
            "endLine": 784,
            "startColumn": 25,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "connector=new ServerConnector(server,1,1,ssl,http);\n",
            "startLine": 750,
            "endLine": 750,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "connector=new ServerConnector(server,1,1,ssl,http);\n",
            "startLine": 789,
            "endLine": 789,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "server.addConnector(connector);\n",
            "startLine": 751,
            "endLine": 751,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server.addConnector(connector);\n",
            "startLine": 790,
            "endLine": 790,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "server.setHandler(new EmptyServerHandler());\n",
            "startLine": 752,
            "endLine": 752,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server.setHandler(new EmptyServerHandler());\n",
            "startLine": 791,
            "endLine": 791,
            "startColumn": 9,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "server.start();\n",
            "startLine": 753,
            "endLine": 753,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server.start();\n",
            "startLine": 792,
            "endLine": 792,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslContextFactory.Client clientTLSFactory=createClientSslContextFactory();\n",
            "startLine": 755,
            "endLine": 755,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SslContextFactory.Client clientTLSFactory=createClientSslContextFactory();\n",
            "startLine": 794,
            "endLine": 794,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClientConnector clientConnector=new ClientConnector();\n",
            "startLine": 756,
            "endLine": 756,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClientConnector clientConnector=new ClientConnector();\n",
            "startLine": 795,
            "endLine": 795,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setSelectors(1);\n",
            "startLine": 757,
            "endLine": 757,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setSelectors(1);\n",
            "startLine": 796,
            "endLine": 796,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setSslContextFactory(clientTLSFactory);\n",
            "startLine": 758,
            "endLine": 758,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setSslContextFactory(clientTLSFactory);\n",
            "startLine": 797,
            "endLine": 797,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueuedThreadPool clientThreads=new QueuedThreadPool();\n",
            "startLine": 759,
            "endLine": 759,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "QueuedThreadPool clientThreads=new QueuedThreadPool();\n",
            "startLine": 798,
            "endLine": 798,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "clientThreads.setName(\"client\");\n",
            "startLine": 760,
            "endLine": 760,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "clientThreads.setName(\"client\");\n",
            "startLine": 799,
            "endLine": 799,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setExecutor(clientThreads);\n",
            "startLine": 761,
            "endLine": 761,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "clientConnector.setExecutor(clientThreads);\n",
            "startLine": 800,
            "endLine": 800,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "client=new HttpClient(new HttpClientTransportOverHTTP(clientConnector));\n",
            "startLine": 762,
            "endLine": 762,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "client=new HttpClient(new HttpClientTransportOverHTTP(clientConnector));\n",
            "startLine": 801,
            "endLine": 801,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "client.setExecutor(clientThreads);\n",
            "startLine": 763,
            "endLine": 763,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "client.setExecutor(clientThreads);\n",
            "startLine": 802,
            "endLine": 802,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "client.start();\n",
            "startLine": 764,
            "endLine": 764,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "client.start();\n",
            "startLine": 803,
            "endLine": 803,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(Exception.class,() -> client.newRequest(\"localhost\",connector.getLocalPort()).scheme(HttpScheme.HTTPS.asString()).send());\n",
            "startLine": 766,
            "endLine": 766,
            "startColumn": 9,
            "endColumn": 146
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(Exception.class,() -> client.newRequest(\"localhost\",connector.getLocalPort()).scheme(HttpScheme.HTTPS.asString()).send());\n",
            "startLine": 805,
            "endLine": 805,
            "startColumn": 9,
            "endColumn": 146
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(1,bucket.size());\n",
            "startLine": 769,
            "endLine": 769,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(1,bucket.size());\n",
            "startLine": 808,
            "endLine": 808,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(1,bucket.getIdleCount());\n",
            "startLine": 770,
            "endLine": 770,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(1,bucket.getIdleCount());\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 9,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "server.addBean(retainableByteBufferPool);\n",
            "startLine": 726,
            "endLine": 726,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server.addBean(byteBufferPool);\n",
            "startLine": 765,
            "endLine": 765,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return super.poolFor(capacity,direct);\n",
            "startLine": 723,
            "endLine": 723,
            "startColumn": 17,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return super.poolFor(capacity,direct);\n",
            "startLine": 742,
            "endLine": 742,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Pool<RetainableByteBuffer> bucket=retainableByteBufferPool.poolFor(16 * 1024 + 1,ssl.isDirectBuffersForEncryption());\n",
            "startLine": 768,
            "endLine": 768,
            "startColumn": 9,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Pool<RetainableByteBuffer> bucket=((TestRetained)retainableByteBufferPool).poolFor(16 * 1024 + 1,connector.getConnectionFactory(HttpConnectionFactory.class).isUseInputDirectByteBuffers());\n",
            "startLine": 807,
            "endLine": 807,
            "startColumn": 9,
            "endColumn": 200
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "ArrayRetainableByteBufferPool",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 95,
        "endLine": 141,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "ArrayRetainableByteBufferPool",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 96,
        "endLine": 142,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(minCapacity <= 0)",
            "startLine": 110,
            "endLine": 111,
            "startColumn": 9,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(minCapacity <= 0)",
            "startLine": 111,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "minCapacity=0;\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 13,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "minCapacity=0;\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 13,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(maxCapacity <= 0)",
            "startLine": 112,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(maxCapacity <= 0)",
            "startLine": 114,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketIndexFor == null)",
            "startLine": 119,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketIndexFor == null)",
            "startLine": 120,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketIndexFor=c -> (c - 1) / f;\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketIndexFor=c -> (c - 1) / f;\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketCapacity == null)",
            "startLine": 121,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketCapacity == null)",
            "startLine": 122,
            "endLine": 123,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketCapacity=i -> (i + 1) * f;\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketCapacity=i -> (i + 1) * f;\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < directArray.length; i++)",
            "startLine": 127,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < directArray.length; i++)",
            "startLine": 128,
            "endLine": 133,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int length=bucketIndexFor.apply(maxCapacity) + 1;\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int length=bucketIndexFor.apply(maxCapacity) + 1;\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int capacity=Math.min(bucketCapacity.apply(i),maxCapacity);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int capacity=Math.min(bucketCapacity.apply(i),maxCapacity);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_minCapacity=minCapacity;\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_minCapacity=minCapacity;\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxCapacity=maxCapacity;\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxCapacity=maxCapacity;\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_direct=directArray;\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_direct=directArray;\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_indirect=indirectArray;\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_indirect=indirectArray;\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 9,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_bucketIndexFor=bucketIndexFor;\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_bucketIndexFor=bucketIndexFor;\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "directArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 13,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "directArray[i]=new RetainedBucket(capacity,maxBucketSize);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 13,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] directArray=new Bucket[length];\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 9,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainedBucket[] directArray=new RetainedBucket[length];\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "indirectArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "indirectArray[i]=new RetainedBucket(capacity,maxBucketSize);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] indirectArray=new Bucket[length];\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainedBucket[] indirectArray=new RetainedBucket[length];\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 128,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 129,
            "endLine": 133,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int f=factor <= 0 ? 1024 : factor;\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int f=factor;\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"The capacity factor must be a divisor of maxCapacity\");\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 13,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(String.format(\"The capacity factor(%d) must be a divisor of maxCapacity(%d)\",factor,maxCapacity));\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 13,
            "endColumn": 148
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if((maxCapacity % f) != 0 || f >= maxCapacity)",
            "startLine": 116,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if((maxCapacity % factor) != 0 || factor >= maxCapacity)",
            "startLine": 116,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 148
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maxCapacity=64 * 1024;\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maxCapacity=AbstractByteBufferPool.DEFAULT_MAX_CAPACITY_BY_FACTOR * factor;\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 13,
            "endColumn": 90
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.server.AbstractConnector",
        "type": "Method",
        "name": "AbstractConnector",
        "filePath": "jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java",
        "startLine": 165,
        "endLine": 225,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.server.AbstractConnector",
        "type": "Method",
        "name": "AbstractConnector",
        "filePath": "jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java",
        "startLine": 164,
        "endLine": 238,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(executor == null)",
            "startLine": 184,
            "endLine": 185,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(executor == null)",
            "startLine": 183,
            "endLine": 184,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "unmanage(_executor);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "unmanage(_executor);\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 13,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(scheduler == null)",
            "startLine": 186,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(scheduler == null)",
            "startLine": 185,
            "endLine": 186,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler=_server.getBean(Scheduler.class);\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 13,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler=_server.getBean(Scheduler.class);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bean instanceof HttpChannel.Listener)",
            "startLine": 202,
            "endLine": 203,
            "startColumn": 17,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bean instanceof HttpChannel.Listener)",
            "startLine": 215,
            "endLine": 216,
            "startColumn": 17,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 21,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 21,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bean instanceof HttpChannel.Listener)",
            "startLine": 209,
            "endLine": 210,
            "startColumn": 17,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bean instanceof HttpChannel.Listener)",
            "startLine": 222,
            "endLine": 223,
            "startColumn": 17,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 21,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 21,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(factory: factories)",
            "startLine": 214,
            "endLine": 217,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(factory: factories)",
            "startLine": 227,
            "endLine": 230,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 215,
            "endLine": 217,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 228,
            "endLine": 230,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addConnectionFactory(factory);\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 13,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addConnectionFactory(factory);\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(acceptors < 0)",
            "startLine": 220,
            "endLine": 221,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(acceptors < 0)",
            "startLine": 233,
            "endLine": 234,
            "startColumn": 9,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "acceptors=Math.max(1,Math.min(4,cores / 8));\n",
            "startLine": 221,
            "endLine": 221,
            "startColumn": 13,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "acceptors=Math.max(1,Math.min(4,cores / 8));\n",
            "startLine": 234,
            "endLine": 234,
            "startColumn": 13,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(acceptors > cores)",
            "startLine": 222,
            "endLine": 223,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(acceptors > cores)",
            "startLine": 235,
            "endLine": 236,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Acceptors should be <= availableProcessors: {} \",this);\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Acceptors should be <= availableProcessors: {} \",this);\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 13,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server=server;\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server=server;\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_executor=executor != null ? executor : _server.getThreadPool();\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_executor=executor != null ? executor : _server.getThreadPool();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(_executor);\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 9,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(_executor);\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 9,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_scheduler=scheduler != null ? scheduler : new ScheduledExecutorScheduler(String.format(\"Connector-Scheduler-%x\",hashCode()),false);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 9,
            "endColumn": 145
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_scheduler=scheduler != null ? scheduler : new ScheduledExecutorScheduler(String.format(\"Connector-Scheduler-%x\",hashCode()),false);\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 145
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(_scheduler);\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(_scheduler);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addEventListener(new Container.Listener(){\n  @Override public void beanAdded(  Container parent,  Object bean){\n    if (bean instanceof HttpChannel.Listener)     _httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n  }\n  @Override public void beanRemoved(  Container parent,  Object bean){\n    if (bean instanceof HttpChannel.Listener)     _httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n  }\n}\n);\n",
            "startLine": 197,
            "endLine": 212,
            "startColumn": 9,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addEventListener(new Container.Listener(){\n  @Override public void beanAdded(  Container parent,  Object bean){\n    if (bean instanceof HttpChannel.Listener)     _httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n  }\n  @Override public void beanRemoved(  Container parent,  Object bean){\n    if (bean instanceof HttpChannel.Listener)     _httpChannelListeners=new HttpChannelListeners(getBeans(HttpChannel.Listener.class));\n  }\n}\n);\n",
            "startLine": 210,
            "endLine": 225,
            "startColumn": 9,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int cores=ProcessorUtils.availableProcessors();\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int cores=ProcessorUtils.availableProcessors();\n",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_acceptors=new Thread[acceptors];\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_acceptors=new Thread[acceptors];\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(pool == null)",
            "startLine": 190,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(pool == null)",
            "startLine": 196,
            "endLine": 200,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pool=_server.getBean(ByteBufferPool.class);\n",
            "startLine": 191,
            "endLine": 191,
            "startColumn": 13,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pool=server.getBean(ByteBufferPool.class);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 17,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_byteBufferPool=pool != null ? pool : new ArrayByteBufferPool();\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pool=new LogarithmicArrayByteBufferPool();\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 21,
            "endColumn": 65
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(_byteBufferPool);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(pool,false);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 17,
            "endColumn": 38
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addBean(retainableByteBufferPool == null ? new ArrayRetainableByteBufferPool() : retainableByteBufferPool,retainableByteBufferPool == null);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 9,
            "endColumn": 150
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "server.addBean(pool,true);\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 21,
            "endColumn": 48
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(pool == null)",
            "startLine": 190,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(pool == null)",
            "startLine": 192,
            "endLine": 206,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.server.AsyncCompletionTest",
        "type": "Method",
        "name": "testAsyncIOWrite",
        "filePath": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncCompletionTest.java",
        "startLine": 197,
        "endLine": 275,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.server.AsyncCompletionTest",
        "type": "Method",
        "name": "testAsyncIOWrite",
        "filePath": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncCompletionTest.java",
        "startLine": 197,
        "endLine": 268,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(Socket client=newSocket(_serverURI.getHost(),_serverURI.getPort()))",
            "startLine": 204,
            "endLine": 274,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(Socket client=newSocket(_serverURI.getHost(),_serverURI.getPort()))",
            "startLine": 204,
            "endLine": 267,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 216,
            "endLine": 253,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 213,
            "endLine": 246,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(System.nanoTime() > end)",
            "startLine": 222,
            "endLine": 223,
            "startColumn": 21,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(System.nanoTime() > end)",
            "startLine": 232,
            "endLine": 233,
            "startColumn": 21,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TimeoutException();\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 25,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TimeoutException();\n",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 25,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(!__transportComplete.get())",
            "startLine": 257,
            "endLine": 266,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(!__transportComplete.get())",
            "startLine": 250,
            "endLine": 259,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 258,
            "endLine": 266,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 251,
            "endLine": 259,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(System.nanoTime() > end)",
            "startLine": 259,
            "endLine": 260,
            "startColumn": 17,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(System.nanoTime() > end)",
            "startLine": 252,
            "endLine": 253,
            "startColumn": 17,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TimeoutException();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 21,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new TimeoutException();\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 21,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PendingCallback delay=__queue.poll(POLL,TimeUnit.MILLISECONDS);\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 17,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PendingCallback delay=__queue.poll(POLL,TimeUnit.MILLISECONDS);\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 17,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(delay != null)",
            "startLine": 264,
            "endLine": 265,
            "startColumn": 17,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(delay != null)",
            "startLine": 257,
            "endLine": 258,
            "startColumn": 17,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "delay.proceed();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 21,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "delay.proceed();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 21,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 221,
            "endLine": 225,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 231,
            "endLine": 235,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(POLL);\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 21,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(POLL);\n",
            "startLine": 234,
            "endLine": 234,
            "startColumn": 21,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "configureServer(handler);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "configureServer(handler);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int base=_threadPool.getBusyThreads();\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 9,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int base=_threadPool.getBusyThreads();\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 9,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "OutputStream os=client.getOutputStream();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "OutputStream os=client.getOutputStream();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream in=client.getInputStream();\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InputStream in=client.getInputStream();\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "os.write(\"GET / HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.ISO_8859_1));\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 13,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "os.write(\"GET / HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.ISO_8859_1));\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 13,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "os.flush();\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 13,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "os.flush();\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 13,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long end=System.nanoTime() + TimeUnit.SECONDS.toNanos(WAIT);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 17,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long end=System.nanoTime() + TimeUnit.SECONDS.toNanos(WAIT);\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 17,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 21,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 21,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "delay.proceed();\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 25,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "delay.proceed();\n",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 25,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 25,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 21,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long end=System.nanoTime() + TimeUnit.SECONDS.toNanos(WAIT);\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long end=System.nanoTime() + TimeUnit.SECONDS.toNanos(WAIT);\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpTester.Response response=HttpTester.parseResponse(in);\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 13,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpTester.Response response=HttpTester.parseResponse(in);\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 13,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(response,Matchers.notNullValue());\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(response,Matchers.notNullValue());\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(response.getStatus(),is(200));\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(response.getStatus(),is(200));\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String content=response.getContent();\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 13,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String content=response.getContent();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(content,containsString(handler.getExpectedMessage()));\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(content,containsString(handler.getExpectedMessage()));\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 13,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PendingCallback delay=__queue.poll(POLL,TimeUnit.MILLISECONDS);\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 21,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PendingCallback delay=__queue.poll(POLL,TimeUnit.MILLISECONDS);\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 17,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(completeCalled)",
            "startLine": 227,
            "endLine": 228,
            "startColumn": 17,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(owpExit)",
            "startLine": 244,
            "endLine": 245,
            "startColumn": 17,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Boolean c=handler.pollForOWPExit();\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 21,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Boolean owpExit=handler.pollForOWPExit();\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 17,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(_threadPool.getBusyThreads() != base)",
            "startLine": 220,
            "endLine": 225,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(delay != null && _threadPool.getBusyThreads() > base)",
            "startLine": 230,
            "endLine": 235,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 217,
            "endLine": 253,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 214,
            "endLine": 246,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 234,
            "endLine": 252,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(delay != null)",
            "startLine": 238,
            "endLine": 242,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 235,
            "endLine": 252,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 239,
            "endLine": 242,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(delay != null)",
            "startLine": 237,
            "endLine": 241,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(delay != null)",
            "startLine": 220,
            "endLine": 224,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(c == null)",
            "startLine": 245,
            "endLine": 247,
            "startColumn": 21,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(owpExit == null)",
            "startLine": 217,
            "endLine": 226,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 238,
            "endLine": 241,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 221,
            "endLine": 224,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 235,
            "endLine": 252,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 218,
            "endLine": 226,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.server.HttpOutputTest",
        "type": "Method",
        "name": "init",
        "filePath": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java",
        "startLine": 67,
        "endLine": 99,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.server.HttpOutputTest",
        "type": "Method",
        "name": "init",
        "filePath": "jetty-server/src/test/java/org/eclipse/jetty/server/HttpOutputTest.java",
        "startLine": 67,
        "endLine": 87,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server=new Server();\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 9,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server=new Server();\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 9,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConnectionFactory http=new HttpConnectionFactory();\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpConnectionFactory http=new HttpConnectionFactory();\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setRequestHeaderSize(1024);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setRequestHeaderSize(1024);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setResponseHeaderSize(1024);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setResponseHeaderSize(1024);\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setOutputBufferSize(OUTPUT_BUFFER_SIZE);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 9,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setOutputBufferSize(OUTPUT_BUFFER_SIZE);\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 9,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setOutputAggregationSize(OUTPUT_AGGREGATION_SIZE);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "http.getHttpConfiguration().setOutputAggregationSize(OUTPUT_AGGREGATION_SIZE);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_connector=new LocalConnector(_server,http,null);\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_connector=new LocalConnector(_server,http,null);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.addConnector(_connector);\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.addConnector(_connector);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_swap=new HotSwapHandler();\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_swap=new HotSwapHandler();\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_handler=new ContentHandler();\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_handler=new ContentHandler();\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_swap.setHandler(_handler);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_swap.setHandler(_handler);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.setHandler(_swap);\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.setHandler(_swap);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 9,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.start();\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.start();\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.addBean(new ByteBufferPool(){\n  @Override public ByteBuffer acquire(  int size,  boolean direct){\n    return direct ? BufferUtil.allocateDirect(size) : BufferUtil.allocate(size);\n  }\n  @Override public void release(  ByteBuffer buffer){\n  }\n}\n);\n",
            "startLine": 72,
            "endLine": 84,
            "startColumn": 9,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_server.addBean(new NullByteBufferPool());\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "url": "https://github.com/eclipse/jetty.project/commit/2b817f06c64a26003cdbaa25a3769c1c8b9178cf",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "newRetainableByteBuffer",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 194,
        "endLine": 201,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "newRetainableByteBuffer",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 209,
        "endLine": 216,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(buffer);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(buffer);\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainableByteBuffer retainableByteBuffer=new RetainableByteBuffer(buffer,releaser);\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RetainableByteBuffer retainableByteBuffer=new RetainableByteBuffer(buffer,releaser);\n",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "retainableByteBuffer.acquire();\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "retainableByteBuffer.acquire();\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return retainableByteBuffer;\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return retainableByteBuffer;\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer buffer=direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity);\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer buffer=direct ? allocateDirect(capacity) : allocate(capacity);\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer buffer=direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity);\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return ByteBuffer.allocate(capacity);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer buffer=direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity);\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return ByteBuffer.allocateDirect(capacity);\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "ArrayRetainableByteBufferPool",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 63,
        "endLine": 97,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ArrayRetainableByteBufferPool",
        "type": "Method",
        "name": "ArrayRetainableByteBufferPool",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayRetainableByteBufferPool.java",
        "startLine": 95,
        "endLine": 141,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(minCapacity <= 0)",
            "startLine": 66,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(minCapacity <= 0)",
            "startLine": 110,
            "endLine": 111,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "minCapacity=0;\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 13,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "minCapacity=0;\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 13,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(maxCapacity <= 0)",
            "startLine": 68,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(maxCapacity <= 0)",
            "startLine": 112,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maxCapacity=64 * 1024;\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maxCapacity=64 * 1024;\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if((maxCapacity % f) != 0 || f >= maxCapacity)",
            "startLine": 72,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if((maxCapacity % f) != 0 || f >= maxCapacity)",
            "startLine": 116,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"The capacity factor must be a divisor of maxCapacity\");\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 13,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"The capacity factor must be a divisor of maxCapacity\");\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 13,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketIndexFor == null)",
            "startLine": 75,
            "endLine": 76,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketIndexFor == null)",
            "startLine": 119,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketIndexFor=c -> (c - 1) / f;\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketIndexFor=c -> (c - 1) / f;\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketCapacity == null)",
            "startLine": 77,
            "endLine": 78,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bucketCapacity == null)",
            "startLine": 121,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketCapacity=i -> (i + 1) * f;\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bucketCapacity=i -> (i + 1) * f;\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < directArray.length; i++)",
            "startLine": 83,
            "endLine": 88,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < directArray.length; i++)",
            "startLine": 127,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 84,
            "endLine": 88,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 128,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int capacity=Math.min(bucketCapacity.apply(i),maxCapacity);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int capacity=Math.min(bucketCapacity.apply(i),maxCapacity);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "directArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 13,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "directArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "indirectArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "indirectArray[i]=new Bucket(capacity,maxBucketSize);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int f=factor <= 0 ? 1024 : factor;\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int f=factor <= 0 ? 1024 : factor;\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int length=bucketIndexFor.apply(maxCapacity) + 1;\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int length=bucketIndexFor.apply(maxCapacity) + 1;\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] directArray=new Bucket[length];\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 9,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] directArray=new Bucket[length];\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] indirectArray=new Bucket[length];\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Bucket[] indirectArray=new Bucket[length];\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_minCapacity=minCapacity;\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_minCapacity=minCapacity;\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxCapacity=maxCapacity;\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxCapacity=maxCapacity;\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_direct=directArray;\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_direct=directArray;\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_indirect=indirectArray;\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_indirect=indirectArray;\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_bucketIndexFor=bucketIndexFor;\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_bucketIndexFor=bucketIndexFor;\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxHeapMemory=maxHeapMemory;\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxHeapMemory=(maxHeapMemory != 0L) ? maxHeapMemory : Runtime.getRuntime().maxMemory() / 4;\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 9,
            "endColumn": 103
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxDirectMemory=maxDirectMemory;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_maxDirectMemory=(maxDirectMemory != 0L) ? maxDirectMemory : Runtime.getRuntime().maxMemory() / 4;\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "fill",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 596,
        "endLine": 825,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "fill",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 624,
        "endLine": 853,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 599,
            "endLine": 824,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 627,
            "endLine": 852,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "close(x);\n",
            "startLine": 820,
            "endLine": 820,
            "startColumn": 17,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "close(x);\n",
            "startLine": 848,
            "endLine": 848,
            "startColumn": 17,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(x);\n",
            "startLine": 821,
            "endLine": 821,
            "startColumn": 17,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(x);\n",
            "startLine": 849,
            "endLine": 849,
            "startColumn": 17,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionError();\n",
            "startLine": 823,
            "endLine": 823,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionError();\n",
            "startLine": 851,
            "endLine": 851,
            "startColumn": 17,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 601,
            "endLine": 816,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 629,
            "endLine": 844,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 603,
            "endLine": 604,
            "startColumn": 21,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 631,
            "endLine": 632,
            "startColumn": 21,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\">fill {}\",SslConnection.this);\n",
            "startLine": 604,
            "endLine": 604,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\">fill {}\",SslConnection.this);\n",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 607,
            "endLine": 815,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 635,
            "endLine": 843,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_fillState != FillState.IDLE)",
            "startLine": 609,
            "endLine": 610,
            "startColumn": 25,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_fillState != FillState.IDLE)",
            "startLine": 637,
            "endLine": 638,
            "startColumn": 25,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=0;\n",
            "startLine": 610,
            "endLine": 610,
            "startColumn": 29,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=0;\n",
            "startLine": 638,
            "endLine": 638,
            "startColumn": 29,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.hasContent(_decryptedInput))",
            "startLine": 613,
            "endLine": 614,
            "startColumn": 25,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.hasContent(_decryptedInput))",
            "startLine": 641,
            "endLine": 642,
            "startColumn": 25,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=BufferUtil.append(buffer,_decryptedInput);\n",
            "startLine": 614,
            "endLine": 614,
            "startColumn": 29,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=BufferUtil.append(buffer,_decryptedInput);\n",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 29,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 617,
            "endLine": 789,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 645,
            "endLine": 817,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 620,
            "endLine": 621,
            "startColumn": 29,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 648,
            "endLine": 649,
            "startColumn": 29,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"fill {}\",status);\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 33,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"fill {}\",status);\n",
            "startLine": 649,
            "endLine": 649,
            "startColumn": 33,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 622,
            "endLine": 647,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 650,
            "endLine": 675,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_UNWRAP:",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 33,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_UNWRAP:",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 33,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NOT_HANDSHAKING:",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 33,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NOT_HANDSHAKING:",
            "startLine": 653,
            "endLine": 653,
            "startColumn": 33,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 37,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 37,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_TASK:",
            "startLine": 628,
            "endLine": 628,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_TASK:",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_sslEngine.getDelegatedTask().run();\n",
            "startLine": 629,
            "endLine": 629,
            "startColumn": 37,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_sslEngine.getDelegatedTask().run();\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 37,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 37,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 37,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_WRAP:",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_WRAP:",
            "startLine": 660,
            "endLine": 660,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.IDLE && flush(BufferUtil.EMPTY_BUFFER))",
            "startLine": 633,
            "endLine": 641,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.IDLE && flush(BufferUtil.EMPTY_BUFFER))",
            "startLine": 661,
            "endLine": 669,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 634,
            "endLine": 641,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 662,
            "endLine": 669,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=_failure;\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 41,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=_failure;\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 41,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failure != null)",
            "startLine": 636,
            "endLine": 637,
            "startColumn": 41,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failure != null)",
            "startLine": 664,
            "endLine": 665,
            "startColumn": 41,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(failure);\n",
            "startLine": 637,
            "endLine": 637,
            "startColumn": 45,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(failure);\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 45,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_sslEngine.isInboundDone())",
            "startLine": 638,
            "endLine": 639,
            "startColumn": 41,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_sslEngine.isInboundDone())",
            "startLine": 666,
            "endLine": 667,
            "startColumn": 41,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 45,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 45,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 640,
            "endLine": 640,
            "startColumn": 41,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=0;\n",
            "startLine": 643,
            "endLine": 643,
            "startColumn": 37,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=0;\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 37,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 645,
            "endLine": 645,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected HandshakeStatus \" + status);\n",
            "startLine": 646,
            "endLine": 646,
            "startColumn": 37,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected HandshakeStatus \" + status);\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 37,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_decryptedInput == null)",
            "startLine": 654,
            "endLine": 664,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_decryptedInput == null)",
            "startLine": 682,
            "endLine": 692,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 655,
            "endLine": 660,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 683,
            "endLine": 688,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.space(buffer) > appBufferSize)",
            "startLine": 656,
            "endLine": 659,
            "startColumn": 33,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.space(buffer) > appBufferSize)",
            "startLine": 684,
            "endLine": 687,
            "startColumn": 33,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=buffer;\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 37,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=buffer;\n",
            "startLine": 685,
            "endLine": 685,
            "startColumn": 37,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=_decryptedInput=_bufferPool.acquire(appBufferSize,_decryptedDirectBuffers);\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 37,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=_decryptedInput=_bufferPool.acquire(appBufferSize,_decryptedDirectBuffers);\n",
            "startLine": 687,
            "endLine": 687,
            "startColumn": 37,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 662,
            "endLine": 664,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=_decryptedInput;\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 33,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "appIn=_decryptedInput;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 33,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0)",
            "startLine": 668,
            "endLine": 669,
            "startColumn": 29,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0)",
            "startLine": 696,
            "endLine": 697,
            "startColumn": 29,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesIn.addAndGet(netFilled);\n",
            "startLine": 669,
            "endLine": 669,
            "startColumn": 33,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesIn.addAndGet(netFilled);\n",
            "startLine": 697,
            "endLine": 697,
            "startColumn": 33,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 670,
            "endLine": 671,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 698,
            "endLine": 699,
            "startColumn": 29,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"net filled={}\",netFilled);\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 33,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"net filled={}\",netFilled);\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 33,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled < 0 && isHandshakeInitial() && (_encryptedInput == null || _encryptedInput.isEmpty()))",
            "startLine": 674,
            "endLine": 675,
            "startColumn": 29,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled < 0 && isHandshakeInitial() && (_encryptedInput == null || _encryptedInput.isEmpty()))",
            "startLine": 702,
            "endLine": 703,
            "startColumn": 29,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "closeInbound();\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "closeInbound();\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0 && !isHandshakeComplete() && isOutboundDone())",
            "startLine": 677,
            "endLine": 678,
            "startColumn": 29,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0 && !isHandshakeComplete() && isOutboundDone())",
            "startLine": 705,
            "endLine": 706,
            "startColumn": 29,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SSLHandshakeException(\"Closed during handshake\");\n",
            "startLine": 678,
            "endLine": 678,
            "startColumn": 33,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SSLHandshakeException(\"Closed during handshake\");\n",
            "startLine": 706,
            "endLine": 706,
            "startColumn": 33,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_handshake.compareAndSet(HandshakeState.INITIAL,HandshakeState.HANDSHAKE))",
            "startLine": 680,
            "endLine": 684,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_handshake.compareAndSet(HandshakeState.INITIAL,HandshakeState.HANDSHAKE))",
            "startLine": 708,
            "endLine": 712,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 681,
            "endLine": 684,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 709,
            "endLine": 712,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 682,
            "endLine": 683,
            "startColumn": 33,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 710,
            "endLine": 711,
            "startColumn": 33,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"fill starting handshake {}\",SslConnection.this);\n",
            "startLine": 683,
            "endLine": 683,
            "startColumn": 37,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"fill starting handshake {}\",SslConnection.this);\n",
            "startLine": 711,
            "endLine": 711,
            "startColumn": 37,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 690,
            "endLine": 698,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 718,
            "endLine": 726,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_underflown=false;\n",
            "startLine": 692,
            "endLine": 692,
            "startColumn": 33,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_underflown=false;\n",
            "startLine": 720,
            "endLine": 720,
            "startColumn": 33,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "unwrapResult=SslConnection.this.unwrap(_sslEngine,_encryptedInput.getBuffer(),appIn);\n",
            "startLine": 693,
            "endLine": 693,
            "startColumn": 33,
            "endColumn": 122
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "unwrapResult=SslConnection.this.unwrap(_sslEngine,_encryptedInput.getBuffer(),appIn);\n",
            "startLine": 721,
            "endLine": 721,
            "startColumn": 33,
            "endColumn": 122
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 696,
            "endLine": 698,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 724,
            "endLine": 726,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.flipToFlush(appIn,pos);\n",
            "startLine": 697,
            "endLine": 697,
            "startColumn": 33,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.flipToFlush(appIn,pos);\n",
            "startLine": 725,
            "endLine": 725,
            "startColumn": 33,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 699,
            "endLine": 705,
            "startColumn": 29,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 727,
            "endLine": 733,
            "startColumn": 29,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"unwrap net_filled={} {} encryptedBuffer={} unwrapBuffer={} appBuffer={}\",netFilled,StringUtil.replace(unwrapResult.toString(),'\\n',' '),_encryptedInput,BufferUtil.toDetailString(appIn),BufferUtil.toDetailString(buffer));\n",
            "startLine": 700,
            "endLine": 705,
            "startColumn": 33,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"unwrap net_filled={} {} encryptedBuffer={} unwrapBuffer={} appBuffer={}\",netFilled,StringUtil.replace(unwrapResult.toString(),'\\n',' '),_encryptedInput,BufferUtil.toDetailString(appIn),BufferUtil.toDetailString(buffer));\n",
            "startLine": 728,
            "endLine": 733,
            "startColumn": 33,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrap == Status.OK && unwrapResult.bytesConsumed() == 0 && unwrapResult.bytesProduced() == 0)",
            "startLine": 711,
            "endLine": 712,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrap == Status.OK && unwrapResult.bytesConsumed() == 0 && unwrapResult.bytesProduced() == 0)",
            "startLine": 739,
            "endLine": 740,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "unwrap=Status.BUFFER_UNDERFLOW;\n",
            "startLine": 712,
            "endLine": 712,
            "startColumn": 33,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "unwrap=Status.BUFFER_UNDERFLOW;\n",
            "startLine": 740,
            "endLine": 740,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(unwrap)",
            "startLine": 714,
            "endLine": 788,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(unwrap)",
            "startLine": 742,
            "endLine": 816,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case CLOSED:",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 33,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case CLOSED:",
            "startLine": 744,
            "endLine": 744,
            "startColumn": 33,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=_failure;\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 37,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=_failure;\n",
            "startLine": 745,
            "endLine": 745,
            "startColumn": 37,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failure != null)",
            "startLine": 718,
            "endLine": 719,
            "startColumn": 37,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failure != null)",
            "startLine": 746,
            "endLine": 747,
            "startColumn": 37,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(failure);\n",
            "startLine": 719,
            "endLine": 719,
            "startColumn": 41,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(failure);\n",
            "startLine": 747,
            "endLine": 747,
            "startColumn": 41,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 720,
            "endLine": 720,
            "startColumn": 37,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 748,
            "endLine": 748,
            "startColumn": 37,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_UNDERFLOW:",
            "startLine": 722,
            "endLine": 722,
            "startColumn": 33,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_UNDERFLOW:",
            "startLine": 750,
            "endLine": 750,
            "startColumn": 33,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.compact(_encryptedInput.getBuffer()))",
            "startLine": 724,
            "endLine": 725,
            "startColumn": 37,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.compact(_encryptedInput.getBuffer()))",
            "startLine": 752,
            "endLine": 753,
            "startColumn": 37,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 725,
            "endLine": 725,
            "startColumn": 41,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 753,
            "endLine": 753,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.space(_encryptedInput.getBuffer()) == 0)",
            "startLine": 728,
            "endLine": 732,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.space(_encryptedInput.getBuffer()) == 0)",
            "startLine": 756,
            "endLine": 760,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 729,
            "endLine": 732,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 757,
            "endLine": 760,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(_encryptedInput.getBuffer());\n",
            "startLine": 730,
            "endLine": 730,
            "startColumn": 41,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(_encryptedInput.getBuffer());\n",
            "startLine": 758,
            "endLine": 758,
            "startColumn": 41,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n",
            "startLine": 731,
            "endLine": 731,
            "startColumn": 41,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n",
            "startLine": 759,
            "endLine": 759,
            "startColumn": 41,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0)",
            "startLine": 735,
            "endLine": 736,
            "startColumn": 37,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled > 0)",
            "startLine": 763,
            "endLine": 764,
            "startColumn": 37,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 736,
            "endLine": 736,
            "startColumn": 41,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 764,
            "endLine": 764,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_underflown=true;\n",
            "startLine": 738,
            "endLine": 738,
            "startColumn": 37,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_underflown=true;\n",
            "startLine": 766,
            "endLine": 766,
            "startColumn": 37,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled < 0 && _sslEngine.getUseClientMode())",
            "startLine": 739,
            "endLine": 750,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(netFilled < 0 && _sslEngine.getUseClientMode())",
            "startLine": 767,
            "endLine": 778,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 740,
            "endLine": 750,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 768,
            "endLine": 778,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable closeFailure=closeInbound();\n",
            "startLine": 741,
            "endLine": 741,
            "startColumn": 41,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable closeFailure=closeInbound();\n",
            "startLine": 769,
            "endLine": 769,
            "startColumn": 41,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 742,
            "endLine": 748,
            "startColumn": 41,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 770,
            "endLine": 776,
            "startColumn": 41,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 743,
            "endLine": 748,
            "startColumn": 41,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 771,
            "endLine": 776,
            "startColumn": 41,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable handshakeFailure=new SSLHandshakeException(\"Abruptly closed by peer\");\n",
            "startLine": 744,
            "endLine": 744,
            "startColumn": 45,
            "endColumn": 127
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable handshakeFailure=new SSLHandshakeException(\"Abruptly closed by peer\");\n",
            "startLine": 772,
            "endLine": 772,
            "startColumn": 45,
            "endColumn": 127
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(closeFailure != null)",
            "startLine": 745,
            "endLine": 746,
            "startColumn": 45,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(closeFailure != null)",
            "startLine": 773,
            "endLine": 774,
            "startColumn": 45,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeFailure.addSuppressed(closeFailure);\n",
            "startLine": 746,
            "endLine": 746,
            "startColumn": 49,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeFailure.addSuppressed(closeFailure);\n",
            "startLine": 774,
            "endLine": 774,
            "startColumn": 49,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw handshakeFailure;\n",
            "startLine": 747,
            "endLine": 747,
            "startColumn": 45,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw handshakeFailure;\n",
            "startLine": 775,
            "endLine": 775,
            "startColumn": 45,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 749,
            "endLine": 749,
            "startColumn": 41,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 777,
            "endLine": 777,
            "startColumn": 41,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=netFilled;\n",
            "startLine": 751,
            "endLine": 751,
            "startColumn": 37,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=netFilled;\n",
            "startLine": 779,
            "endLine": 779,
            "startColumn": 37,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_OVERFLOW:",
            "startLine": 753,
            "endLine": 753,
            "startColumn": 33,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_OVERFLOW:",
            "startLine": 781,
            "endLine": 781,
            "startColumn": 33,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected unwrap result \" + unwrap);\n",
            "startLine": 765,
            "endLine": 765,
            "startColumn": 37,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected unwrap result \" + unwrap);\n",
            "startLine": 793,
            "endLine": 793,
            "startColumn": 37,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case OK:",
            "startLine": 767,
            "endLine": 767,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case OK:",
            "startLine": 795,
            "endLine": 795,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED)",
            "startLine": 768,
            "endLine": 769,
            "startColumn": 37,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED)",
            "startLine": 796,
            "endLine": 797,
            "startColumn": 37,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeSucceeded();\n",
            "startLine": 769,
            "endLine": 769,
            "startColumn": 41,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeSucceeded();\n",
            "startLine": 797,
            "endLine": 797,
            "startColumn": 41,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isRenegotiating() && !allowRenegotiate())",
            "startLine": 771,
            "endLine": 772,
            "startColumn": 37,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isRenegotiating() && !allowRenegotiate())",
            "startLine": 799,
            "endLine": 800,
            "startColumn": 37,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 772,
            "endLine": 772,
            "startColumn": 41,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=-1;\n",
            "startLine": 800,
            "endLine": 800,
            "startColumn": 41,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrapResult.bytesProduced() > 0)",
            "startLine": 777,
            "endLine": 782,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(unwrapResult.bytesProduced() > 0)",
            "startLine": 805,
            "endLine": 810,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 778,
            "endLine": 782,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 806,
            "endLine": 810,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(appIn == buffer)",
            "startLine": 779,
            "endLine": 780,
            "startColumn": 41,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(appIn == buffer)",
            "startLine": 807,
            "endLine": 808,
            "startColumn": 41,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=unwrapResult.bytesProduced();\n",
            "startLine": 780,
            "endLine": 780,
            "startColumn": 45,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=unwrapResult.bytesProduced();\n",
            "startLine": 808,
            "endLine": 808,
            "startColumn": 45,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=BufferUtil.append(buffer,_decryptedInput);\n",
            "startLine": 781,
            "endLine": 781,
            "startColumn": 41,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return filled=BufferUtil.append(buffer,_decryptedInput);\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 41,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 784,
            "endLine": 784,
            "startColumn": 37,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 812,
            "endLine": 812,
            "startColumn": 37,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 786,
            "endLine": 786,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 814,
            "endLine": 814,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected unwrap result \" + unwrap);\n",
            "startLine": 787,
            "endLine": 787,
            "startColumn": 37,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected unwrap result \" + unwrap);\n",
            "startLine": 815,
            "endLine": 815,
            "startColumn": 37,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.isEmpty(_decryptedInput) && appBufferSize < getApplicationBufferSize())",
            "startLine": 760,
            "endLine": 764,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.isEmpty(_decryptedInput) && appBufferSize < getApplicationBufferSize())",
            "startLine": 788,
            "endLine": 792,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 795,
            "endLine": 799,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 824,
            "endLine": 828,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 796,
            "endLine": 799,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 825,
            "endLine": 828,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 797,
            "endLine": 797,
            "startColumn": 29,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 826,
            "endLine": 826,
            "startColumn": 29,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> _decryptedEndPoint.getWriteFlusher().onFail(failure));\n",
            "startLine": 798,
            "endLine": 798,
            "startColumn": 29,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> _decryptedEndPoint.getWriteFlusher().onFail(failure));\n",
            "startLine": 827,
            "endLine": 827,
            "startColumn": 29,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 807,
            "endLine": 811,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState == FlushState.WAIT_FOR_FILL)",
            "startLine": 835,
            "endLine": 839,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 808,
            "endLine": 811,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 836,
            "endLine": 839,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 29,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 837,
            "endLine": 837,
            "startColumn": 29,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> _decryptedEndPoint.getWriteFlusher().completeWrite());\n",
            "startLine": 810,
            "endLine": 810,
            "startColumn": 29,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> _decryptedEndPoint.getWriteFlusher().completeWrite());\n",
            "startLine": 838,
            "endLine": 838,
            "startColumn": 29,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 813,
            "endLine": 814,
            "startColumn": 25,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 841,
            "endLine": 842,
            "startColumn": 25,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"<fill f={} uf={} {}\",filled,_underflown,SslConnection.this);\n",
            "startLine": 814,
            "endLine": 814,
            "startColumn": 29,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"<fill f={} uf={} {}\",filled,_underflown,SslConnection.this);\n",
            "startLine": 842,
            "endLine": 842,
            "startColumn": 29,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int filled=-2;\n",
            "startLine": 606,
            "endLine": 606,
            "startColumn": 21,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int filled=-2;\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 21,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HandshakeStatus status=_sslEngine.getHandshakeStatus();\n",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HandshakeStatus status=_sslEngine.getHandshakeStatus();\n",
            "startLine": 647,
            "endLine": 647,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "acquireEncryptedInput();\n",
            "startLine": 649,
            "endLine": 649,
            "startColumn": 29,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "acquireEncryptedInput();\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 29,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer appIn;\n",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 29,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer appIn;\n",
            "startLine": 680,
            "endLine": 680,
            "startColumn": 29,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int appBufferSize=getApplicationBufferSize();\n",
            "startLine": 653,
            "endLine": 653,
            "startColumn": 29,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int appBufferSize=getApplicationBufferSize();\n",
            "startLine": 681,
            "endLine": 681,
            "startColumn": 29,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int netFilled=networkFill(_encryptedInput.getBuffer());\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int netFilled=networkFill(_encryptedInput.getBuffer());\n",
            "startLine": 695,
            "endLine": 695,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=BufferUtil.flipToFill(appIn);\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 29,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=BufferUtil.flipToFill(appIn);\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 29,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult unwrapResult;\n",
            "startLine": 689,
            "endLine": 689,
            "startColumn": 29,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult unwrapResult;\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 29,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult.Status unwrap=unwrapResult.getStatus();\n",
            "startLine": 707,
            "endLine": 707,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult.Status unwrap=unwrapResult.getStatus();\n",
            "startLine": 735,
            "endLine": 735,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 763,
            "endLine": 763,
            "startColumn": 41,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 791,
            "endLine": 791,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable f=handleException(x,\"fill\");\n",
            "startLine": 793,
            "endLine": 793,
            "startColumn": 25,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable f=handleException(x,\"fill\");\n",
            "startLine": 822,
            "endLine": 822,
            "startColumn": 25,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=handshakeFailed(f);\n",
            "startLine": 794,
            "endLine": 794,
            "startColumn": 25,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=handshakeFailed(f);\n",
            "startLine": 823,
            "endLine": 823,
            "startColumn": 25,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw failure;\n",
            "startLine": 800,
            "endLine": 800,
            "startColumn": 25,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw failure;\n",
            "startLine": 829,
            "endLine": 829,
            "startColumn": 25,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 761,
            "endLine": 764,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 789,
            "endLine": 792,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 618,
            "endLine": 789,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 646,
            "endLine": 817,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 803,
            "endLine": 815,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 832,
            "endLine": 843,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 819,
            "endLine": 824,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 847,
            "endLine": 852,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 792,
            "endLine": 801,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 820,
            "endLine": 830,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseDecryptedInputBuffer();\n",
            "startLine": 762,
            "endLine": 762,
            "startColumn": 41,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyDecryptedInputBuffer();\n",
            "startLine": 790,
            "endLine": 790,
            "startColumn": 41,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedInputBuffer();\n",
            "startLine": 804,
            "endLine": 804,
            "startColumn": 25,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyInputBuffers();\n",
            "startLine": 833,
            "endLine": 833,
            "startColumn": 25,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 791,
            "endLine": 801,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 819,
            "endLine": 830,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 818,
            "endLine": 824,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 846,
            "endLine": 852,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "flush",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 974,
        "endLine": 1180,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "flush",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1002,
        "endLine": 1209,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 977,
            "endLine": 1179,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1005,
            "endLine": 1208,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "close(x);\n",
            "startLine": 1175,
            "endLine": 1175,
            "startColumn": 17,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "close(x);\n",
            "startLine": 1204,
            "endLine": 1204,
            "startColumn": 17,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(x);\n",
            "startLine": 1176,
            "endLine": 1176,
            "startColumn": 17,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "rethrow(x);\n",
            "startLine": 1205,
            "endLine": 1205,
            "startColumn": 17,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionError();\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionError();\n",
            "startLine": 1207,
            "endLine": 1207,
            "startColumn": 17,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 979,
            "endLine": 1171,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1007,
            "endLine": 1200,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 981,
            "endLine": 989,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1009,
            "endLine": 1017,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 982,
            "endLine": 989,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1010,
            "endLine": 1017,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\">flush {}\",SslConnection.this);\n",
            "startLine": 983,
            "endLine": 983,
            "startColumn": 25,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\">flush {}\",SslConnection.this);\n",
            "startLine": 1011,
            "endLine": 1011,
            "startColumn": 25,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 984,
            "endLine": 984,
            "startColumn": 25,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 1012,
            "endLine": 1012,
            "startColumn": 25,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(b: appOuts)",
            "startLine": 985,
            "endLine": 988,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(b: appOuts)",
            "startLine": 1013,
            "endLine": 1016,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 986,
            "endLine": 988,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1014,
            "endLine": 1016,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush b[{}]={}\",i++,BufferUtil.toDetailString(b));\n",
            "startLine": 987,
            "endLine": 987,
            "startColumn": 29,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush b[{}]={}\",i++,BufferUtil.toDetailString(b));\n",
            "startLine": 1015,
            "endLine": 1015,
            "startColumn": 29,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1009,
            "endLine": 1170,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1020,
            "endLine": 1199,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState != FlushState.IDLE)",
            "startLine": 1011,
            "endLine": 1012,
            "startColumn": 25,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_flushState != FlushState.IDLE)",
            "startLine": 1039,
            "endLine": 1040,
            "startColumn": 25,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1012,
            "endLine": 1012,
            "startColumn": 29,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1040,
            "endLine": 1040,
            "startColumn": 29,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 1015,
            "endLine": 1158,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 1043,
            "endLine": 1186,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1018,
            "endLine": 1019,
            "startColumn": 29,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1046,
            "endLine": 1047,
            "startColumn": 29,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush {}\",status);\n",
            "startLine": 1019,
            "endLine": 1019,
            "startColumn": 33,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush {}\",status);\n",
            "startLine": 1047,
            "endLine": 1047,
            "startColumn": 33,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 1020,
            "endLine": 1046,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(status)",
            "startLine": 1048,
            "endLine": 1074,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_WRAP:",
            "startLine": 1022,
            "endLine": 1022,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_WRAP:",
            "startLine": 1050,
            "endLine": 1050,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NOT_HANDSHAKING:",
            "startLine": 1023,
            "endLine": 1023,
            "startColumn": 33,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NOT_HANDSHAKING:",
            "startLine": 1051,
            "endLine": 1051,
            "startColumn": 33,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1024,
            "endLine": 1024,
            "startColumn": 37,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1052,
            "endLine": 1052,
            "startColumn": 37,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_TASK:",
            "startLine": 1026,
            "endLine": 1026,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_TASK:",
            "startLine": 1054,
            "endLine": 1054,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_sslEngine.getDelegatedTask().run();\n",
            "startLine": 1027,
            "endLine": 1027,
            "startColumn": 37,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_sslEngine.getDelegatedTask().run();\n",
            "startLine": 1055,
            "endLine": 1055,
            "startColumn": 37,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1028,
            "endLine": 1028,
            "startColumn": 37,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1056,
            "endLine": 1056,
            "startColumn": 37,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_UNWRAP:",
            "startLine": 1030,
            "endLine": 1030,
            "startColumn": 33,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case NEED_UNWRAP:",
            "startLine": 1058,
            "endLine": 1058,
            "startColumn": 33,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isHandshakeInitial() && isOutboundDone())",
            "startLine": 1032,
            "endLine": 1033,
            "startColumn": 37,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isHandshakeInitial() && isOutboundDone())",
            "startLine": 1060,
            "endLine": 1061,
            "startColumn": 37,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1033,
            "endLine": 1033,
            "startColumn": 41,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1061,
            "endLine": 1061,
            "startColumn": 41,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_fillState == FillState.IDLE)",
            "startLine": 1034,
            "endLine": 1041,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_fillState == FillState.IDLE)",
            "startLine": 1062,
            "endLine": 1069,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1035,
            "endLine": 1041,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1063,
            "endLine": 1069,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int filled=fill(BufferUtil.EMPTY_BUFFER);\n",
            "startLine": 1036,
            "endLine": 1036,
            "startColumn": 41,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int filled=fill(BufferUtil.EMPTY_BUFFER);\n",
            "startLine": 1064,
            "endLine": 1064,
            "startColumn": 41,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_sslEngine.getHandshakeStatus() != status)",
            "startLine": 1037,
            "endLine": 1038,
            "startColumn": 41,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_sslEngine.getHandshakeStatus() != status)",
            "startLine": 1065,
            "endLine": 1066,
            "startColumn": 41,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1038,
            "endLine": 1038,
            "startColumn": 45,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1066,
            "endLine": 1066,
            "startColumn": 45,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(filled < 0)",
            "startLine": 1039,
            "endLine": 1040,
            "startColumn": 41,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(filled < 0)",
            "startLine": 1067,
            "endLine": 1068,
            "startColumn": 41,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1040,
            "endLine": 1040,
            "startColumn": 45,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1068,
            "endLine": 1068,
            "startColumn": 45,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=isEmpty;\n",
            "startLine": 1042,
            "endLine": 1042,
            "startColumn": 37,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=isEmpty;\n",
            "startLine": 1070,
            "endLine": 1070,
            "startColumn": 37,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 1044,
            "endLine": 1044,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 1072,
            "endLine": 1072,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected HandshakeStatus \" + status);\n",
            "startLine": 1045,
            "endLine": 1045,
            "startColumn": 37,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected HandshakeStatus \" + status);\n",
            "startLine": 1073,
            "endLine": 1073,
            "startColumn": 37,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_handshake.compareAndSet(HandshakeState.INITIAL,HandshakeState.HANDSHAKE))",
            "startLine": 1051,
            "endLine": 1055,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_handshake.compareAndSet(HandshakeState.INITIAL,HandshakeState.HANDSHAKE))",
            "startLine": 1079,
            "endLine": 1083,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1052,
            "endLine": 1055,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1080,
            "endLine": 1083,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1053,
            "endLine": 1054,
            "startColumn": 33,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1081,
            "endLine": 1082,
            "startColumn": 33,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush starting handshake {}\",SslConnection.this);\n",
            "startLine": 1054,
            "endLine": 1054,
            "startColumn": 37,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"flush starting handshake {}\",SslConnection.this);\n",
            "startLine": 1082,
            "endLine": 1082,
            "startColumn": 37,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1062,
            "endLine": 1069,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1090,
            "endLine": 1097,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wrapResult=wrap(_sslEngine,appOuts,_encryptedOutput);\n",
            "startLine": 1064,
            "endLine": 1064,
            "startColumn": 33,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wrapResult=wrap(_sslEngine,appOuts,_encryptedOutput);\n",
            "startLine": 1092,
            "endLine": 1092,
            "startColumn": 33,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1067,
            "endLine": 1069,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1095,
            "endLine": 1097,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.flipToFlush(_encryptedOutput,pos);\n",
            "startLine": 1068,
            "endLine": 1068,
            "startColumn": 33,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.flipToFlush(_encryptedOutput,pos);\n",
            "startLine": 1096,
            "endLine": 1096,
            "startColumn": 33,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1070,
            "endLine": 1075,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1098,
            "endLine": 1103,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"wrap {} {} ioDone={}/{}\",StringUtil.replace(wrapResult.toString(),'\\n',' '),BufferUtil.toSummaryString(_encryptedOutput),_sslEngine.isInboundDone(),_sslEngine.isOutboundDone());\n",
            "startLine": 1071,
            "endLine": 1075,
            "startColumn": 33,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"wrap {} {} ioDone={}/{}\",StringUtil.replace(wrapResult.toString(),'\\n',' '),BufferUtil.toSummaryString(_encryptedOutput),_sslEngine.isInboundDone(),_sslEngine.isOutboundDone());\n",
            "startLine": 1099,
            "endLine": 1103,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_encryptedOutput != null)",
            "startLine": 1082,
            "endLine": 1092,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_encryptedOutput != null)",
            "startLine": 1110,
            "endLine": 1120,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1083,
            "endLine": 1092,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1111,
            "endLine": 1120,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int remaining=_encryptedOutput.remaining();\n",
            "startLine": 1084,
            "endLine": 1084,
            "startColumn": 33,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int remaining=_encryptedOutput.remaining();\n",
            "startLine": 1112,
            "endLine": 1112,
            "startColumn": 33,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(remaining > 0)",
            "startLine": 1085,
            "endLine": 1091,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(remaining > 0)",
            "startLine": 1113,
            "endLine": 1119,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1086,
            "endLine": 1091,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1114,
            "endLine": 1119,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "flushed=networkFlush(_encryptedOutput);\n",
            "startLine": 1087,
            "endLine": 1087,
            "startColumn": 37,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "flushed=networkFlush(_encryptedOutput);\n",
            "startLine": 1115,
            "endLine": 1115,
            "startColumn": 37,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int written=remaining - _encryptedOutput.remaining();\n",
            "startLine": 1088,
            "endLine": 1088,
            "startColumn": 37,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int written=remaining - _encryptedOutput.remaining();\n",
            "startLine": 1116,
            "endLine": 1116,
            "startColumn": 37,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(written > 0)",
            "startLine": 1089,
            "endLine": 1090,
            "startColumn": 37,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(written > 0)",
            "startLine": 1117,
            "endLine": 1118,
            "startColumn": 37,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesOut.addAndGet(written);\n",
            "startLine": 1090,
            "endLine": 1090,
            "startColumn": 41,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesOut.addAndGet(written);\n",
            "startLine": 1118,
            "endLine": 1118,
            "startColumn": 41,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1094,
            "endLine": 1095,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1122,
            "endLine": 1123,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"net flushed={}, ac={}\",flushed,isEmpty);\n",
            "startLine": 1095,
            "endLine": 1095,
            "startColumn": 33,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"net flushed={}, ac={}\",flushed,isEmpty);\n",
            "startLine": 1123,
            "endLine": 1123,
            "startColumn": 33,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(wrap)",
            "startLine": 1099,
            "endLine": 1154,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(wrap)",
            "startLine": 1127,
            "endLine": 1182,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case CLOSED:",
            "startLine": 1101,
            "endLine": 1101,
            "startColumn": 33,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case CLOSED:",
            "startLine": 1129,
            "endLine": 1129,
            "startColumn": 33,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1102,
            "endLine": 1111,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1130,
            "endLine": 1139,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1105,
            "endLine": 1106,
            "startColumn": 37,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1133,
            "endLine": 1134,
            "startColumn": 37,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1106,
            "endLine": 1106,
            "startColumn": 41,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1134,
            "endLine": 1134,
            "startColumn": 41,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().shutdownOutput();\n",
            "startLine": 1107,
            "endLine": 1107,
            "startColumn": 37,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().shutdownOutput();\n",
            "startLine": 1135,
            "endLine": 1135,
            "startColumn": 37,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty)",
            "startLine": 1108,
            "endLine": 1109,
            "startColumn": 37,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty)",
            "startLine": 1136,
            "endLine": 1137,
            "startColumn": 37,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1109,
            "endLine": 1109,
            "startColumn": 41,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1137,
            "endLine": 1137,
            "startColumn": 41,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1110,
            "endLine": 1110,
            "startColumn": 37,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1138,
            "endLine": 1138,
            "startColumn": 37,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_OVERFLOW:",
            "startLine": 1113,
            "endLine": 1113,
            "startColumn": 33,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case BUFFER_OVERFLOW:",
            "startLine": 1141,
            "endLine": 1141,
            "startColumn": 33,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1114,
            "endLine": 1115,
            "startColumn": 37,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1142,
            "endLine": 1143,
            "startColumn": 37,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1115,
            "endLine": 1115,
            "startColumn": 41,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1143,
            "endLine": 1143,
            "startColumn": 41,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected wrap result \" + wrap);\n",
            "startLine": 1127,
            "endLine": 1127,
            "startColumn": 37,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected wrap result \" + wrap);\n",
            "startLine": 1155,
            "endLine": 1155,
            "startColumn": 37,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case OK:",
            "startLine": 1129,
            "endLine": 1129,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case OK:",
            "startLine": 1157,
            "endLine": 1157,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(wrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED)",
            "startLine": 1130,
            "endLine": 1131,
            "startColumn": 37,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(wrapResult.getHandshakeStatus() == HandshakeStatus.FINISHED)",
            "startLine": 1158,
            "endLine": 1159,
            "startColumn": 37,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeSucceeded();\n",
            "startLine": 1131,
            "endLine": 1131,
            "startColumn": 41,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "handshakeSucceeded();\n",
            "startLine": 1159,
            "endLine": 1159,
            "startColumn": 41,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isRenegotiating() && !allowRenegotiate())",
            "startLine": 1133,
            "endLine": 1139,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isRenegotiating() && !allowRenegotiate())",
            "startLine": 1161,
            "endLine": 1167,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1134,
            "endLine": 1139,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1162,
            "endLine": 1167,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().shutdownOutput();\n",
            "startLine": 1135,
            "endLine": 1135,
            "startColumn": 41,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().shutdownOutput();\n",
            "startLine": 1163,
            "endLine": 1163,
            "startColumn": 41,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty && BufferUtil.isEmpty(_encryptedOutput))",
            "startLine": 1136,
            "endLine": 1137,
            "startColumn": 41,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty && BufferUtil.isEmpty(_encryptedOutput))",
            "startLine": 1164,
            "endLine": 1165,
            "startColumn": 41,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1137,
            "endLine": 1137,
            "startColumn": 45,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1165,
            "endLine": 1165,
            "startColumn": 45,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1138,
            "endLine": 1138,
            "startColumn": 41,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(\"Broken pipe\");\n",
            "startLine": 1166,
            "endLine": 1166,
            "startColumn": 41,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1141,
            "endLine": 1142,
            "startColumn": 37,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1169,
            "endLine": 1170,
            "startColumn": 37,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1142,
            "endLine": 1142,
            "startColumn": 41,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=false;\n",
            "startLine": 1170,
            "endLine": 1170,
            "startColumn": 41,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty)",
            "startLine": 1144,
            "endLine": 1149,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isEmpty)",
            "startLine": 1172,
            "endLine": 1177,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1145,
            "endLine": 1149,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1173,
            "endLine": 1177,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(wrapResult.getHandshakeStatus() != HandshakeStatus.NEED_WRAP || wrapResult.bytesProduced() == 0)",
            "startLine": 1146,
            "endLine": 1148,
            "startColumn": 41,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(wrapResult.getHandshakeStatus() != HandshakeStatus.NEED_WRAP || wrapResult.bytesProduced() == 0)",
            "startLine": 1174,
            "endLine": 1176,
            "startColumn": 41,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1148,
            "endLine": 1148,
            "startColumn": 45,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result=true;\n",
            "startLine": 1176,
            "endLine": 1176,
            "startColumn": 45,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1150,
            "endLine": 1150,
            "startColumn": 37,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 37,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 1152,
            "endLine": 1152,
            "startColumn": 33,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 1180,
            "endLine": 1180,
            "startColumn": 33,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected wrap result \" + wrap);\n",
            "startLine": 1153,
            "endLine": 1153,
            "startColumn": 37,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalStateException(\"Unexpected wrap result \" + wrap);\n",
            "startLine": 1181,
            "endLine": 1181,
            "startColumn": 37,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(packetBufferSize < getPacketBufferSize())",
            "startLine": 1122,
            "endLine": 1126,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(packetBufferSize < getPacketBufferSize())",
            "startLine": 1150,
            "endLine": 1154,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(getEndPoint().isOutputShutdown())",
            "startLine": 1156,
            "endLine": 1157,
            "startColumn": 29,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(getEndPoint().isOutputShutdown())",
            "startLine": 1184,
            "endLine": 1185,
            "startColumn": 29,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 1157,
            "endLine": 1157,
            "startColumn": 33,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 1185,
            "endLine": 1185,
            "startColumn": 33,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1168,
            "endLine": 1169,
            "startColumn": 25,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1197,
            "endLine": 1198,
            "startColumn": 25,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"<flush {} {}\",result,SslConnection.this);\n",
            "startLine": 1169,
            "endLine": 1169,
            "startColumn": 29,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"<flush {} {}\",result,SslConnection.this);\n",
            "startLine": 1198,
            "endLine": 1198,
            "startColumn": 29,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(_encryptedOutput != null)",
            "startLine": 992,
            "endLine": 1004,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(_encryptedOutput != null)",
            "startLine": 1023,
            "endLine": 1035,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 993,
            "endLine": 1004,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1024,
            "endLine": 1035,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int remaining=_encryptedOutput.remaining();\n",
            "startLine": 994,
            "endLine": 994,
            "startColumn": 25,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int remaining=_encryptedOutput.remaining();\n",
            "startLine": 1025,
            "endLine": 1025,
            "startColumn": 29,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(remaining > 0)",
            "startLine": 995,
            "endLine": 1003,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(remaining > 0)",
            "startLine": 1026,
            "endLine": 1034,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 996,
            "endLine": 1003,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1027,
            "endLine": 1034,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flushed=networkFlush(_encryptedOutput);\n",
            "startLine": 997,
            "endLine": 997,
            "startColumn": 29,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flushed=networkFlush(_encryptedOutput);\n",
            "startLine": 1028,
            "endLine": 1028,
            "startColumn": 33,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int written=remaining - _encryptedOutput.remaining();\n",
            "startLine": 998,
            "endLine": 998,
            "startColumn": 29,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int written=remaining - _encryptedOutput.remaining();\n",
            "startLine": 1029,
            "endLine": 1029,
            "startColumn": 33,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(written > 0)",
            "startLine": 999,
            "endLine": 1000,
            "startColumn": 29,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(written > 0)",
            "startLine": 1030,
            "endLine": 1031,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesOut.addAndGet(written);\n",
            "startLine": 1000,
            "endLine": 1000,
            "startColumn": 33,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_bytesOut.addAndGet(written);\n",
            "startLine": 1031,
            "endLine": 1031,
            "startColumn": 37,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1001,
            "endLine": 1002,
            "startColumn": 29,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!flushed)",
            "startLine": 1032,
            "endLine": 1033,
            "startColumn": 33,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 1002,
            "endLine": 1002,
            "startColumn": 33,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 1033,
            "endLine": 1033,
            "startColumn": 37,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Boolean result=null;\n",
            "startLine": 1008,
            "endLine": 1008,
            "startColumn": 21,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Boolean result=null;\n",
            "startLine": 1019,
            "endLine": 1019,
            "startColumn": 21,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HandshakeStatus status=_sslEngine.getHandshakeStatus();\n",
            "startLine": 1017,
            "endLine": 1017,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HandshakeStatus status=_sslEngine.getHandshakeStatus();\n",
            "startLine": 1045,
            "endLine": 1045,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int packetBufferSize=getPacketBufferSize();\n",
            "startLine": 1048,
            "endLine": 1048,
            "startColumn": 29,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int packetBufferSize=getPacketBufferSize();\n",
            "startLine": 1076,
            "endLine": 1076,
            "startColumn": 29,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "acquireEncryptedOutput();\n",
            "startLine": 1049,
            "endLine": 1049,
            "startColumn": 29,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "acquireEncryptedOutput();\n",
            "startLine": 1077,
            "endLine": 1077,
            "startColumn": 29,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.compact(_encryptedOutput);\n",
            "startLine": 1059,
            "endLine": 1059,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.compact(_encryptedOutput);\n",
            "startLine": 1087,
            "endLine": 1087,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=BufferUtil.flipToFill(_encryptedOutput);\n",
            "startLine": 1060,
            "endLine": 1060,
            "startColumn": 29,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=BufferUtil.flipToFill(_encryptedOutput);\n",
            "startLine": 1088,
            "endLine": 1088,
            "startColumn": 29,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult wrapResult;\n",
            "startLine": 1061,
            "endLine": 1061,
            "startColumn": 29,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SSLEngineResult wrapResult;\n",
            "startLine": 1089,
            "endLine": 1089,
            "startColumn": 29,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "isEmpty=BufferUtil.isEmpty(appOuts);\n",
            "startLine": 1078,
            "endLine": 1078,
            "startColumn": 29,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "isEmpty=BufferUtil.isEmpty(appOuts);\n",
            "startLine": 1106,
            "endLine": 1106,
            "startColumn": 29,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flushed=true;\n",
            "startLine": 1081,
            "endLine": 1081,
            "startColumn": 29,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flushed=true;\n",
            "startLine": 1109,
            "endLine": 1109,
            "startColumn": 29,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Status wrap=wrapResult.getStatus();\n",
            "startLine": 1098,
            "endLine": 1098,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Status wrap=wrapResult.getStatus();\n",
            "startLine": 1126,
            "endLine": 1126,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1125,
            "endLine": 1125,
            "startColumn": 41,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 1153,
            "endLine": 1153,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=handleException(x,\"flush\");\n",
            "startLine": 1162,
            "endLine": 1162,
            "startColumn": 25,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable failure=handleException(x,\"flush\");\n",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 25,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw handshakeFailed(failure);\n",
            "startLine": 1163,
            "endLine": 1163,
            "startColumn": 25,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw handshakeFailed(failure);\n",
            "startLine": 1192,
            "endLine": 1192,
            "startColumn": 25,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean isEmpty=BufferUtil.isEmpty(appOuts);\n",
            "startLine": 1006,
            "endLine": 1006,
            "startColumn": 21,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean isEmpty=BufferUtil.isEmpty(appOuts);\n",
            "startLine": 1037,
            "endLine": 1037,
            "startColumn": 25,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1166,
            "endLine": 1170,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1195,
            "endLine": 1199,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1123,
            "endLine": 1126,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1151,
            "endLine": 1154,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1016,
            "endLine": 1158,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1044,
            "endLine": 1186,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1174,
            "endLine": 1179,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1203,
            "endLine": 1208,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1161,
            "endLine": 1164,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1189,
            "endLine": 1193,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedOutputBuffer();\n",
            "startLine": 1124,
            "endLine": 1124,
            "startColumn": 41,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyEncryptedOutputBuffer();\n",
            "startLine": 1152,
            "endLine": 1152,
            "startColumn": 41,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedOutputBuffer();\n",
            "startLine": 1167,
            "endLine": 1167,
            "startColumn": 25,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyEncryptedOutputBuffer();\n",
            "startLine": 1196,
            "endLine": 1196,
            "startColumn": 25,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1160,
            "endLine": 1164,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1188,
            "endLine": 1193,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1173,
            "endLine": 1179,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1202,
            "endLine": 1208,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "doShutdownOutput",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1275,
        "endLine": 1341,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "doShutdownOutput",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1304,
        "endLine": 1308,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1279,
            "endLine": 1340,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1313,
            "endLine": 1375,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1283,
            "endLine": 1300,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1316,
            "endLine": 1334,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1287,
            "endLine": 1288,
            "startColumn": 21,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1320,
            "endLine": 1321,
            "startColumn": 21,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"shutdownOutput: {} oshut={}, ishut={}\",SslConnection.this,oshut,ishut);\n",
            "startLine": 1288,
            "endLine": 1288,
            "startColumn": 25,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"shutdownOutput: {} oshut={}, ishut={}\",SslConnection.this,oshut,ishut);\n",
            "startLine": 1321,
            "endLine": 1321,
            "startColumn": 25,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!_closedOutbound)",
            "startLine": 1292,
            "endLine": 1297,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!_closedOutbound)",
            "startLine": 1325,
            "endLine": 1330,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1293,
            "endLine": 1297,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1326,
            "endLine": 1330,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_closedOutbound=true;\n",
            "startLine": 1294,
            "endLine": 1294,
            "startColumn": 25,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_closedOutbound=true;\n",
            "startLine": 1327,
            "endLine": 1327,
            "startColumn": 25,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "flush=!oshut;\n",
            "startLine": 1296,
            "endLine": 1296,
            "startColumn": 25,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "flush=!oshut;\n",
            "startLine": 1329,
            "endLine": 1329,
            "startColumn": 25,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(flush)",
            "startLine": 1302,
            "endLine": 1329,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(flush)",
            "startLine": 1336,
            "endLine": 1363,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!flush(BufferUtil.EMPTY_BUFFER) && !close)",
            "startLine": 1304,
            "endLine": 1328,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!flush(BufferUtil.EMPTY_BUFFER) && !close)",
            "startLine": 1338,
            "endLine": 1362,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1309,
            "endLine": 1316,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1343,
            "endLine": 1350,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.hasContent(_encryptedOutput))",
            "startLine": 1311,
            "endLine": 1315,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(BufferUtil.hasContent(_encryptedOutput))",
            "startLine": 1345,
            "endLine": 1349,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1312,
            "endLine": 1315,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1346,
            "endLine": 1349,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "write=_encryptedOutput;\n",
            "startLine": 1313,
            "endLine": 1313,
            "startColumn": 33,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "write=_encryptedOutput;\n",
            "startLine": 1347,
            "endLine": 1347,
            "startColumn": 33,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.WRITING;\n",
            "startLine": 1314,
            "endLine": 1314,
            "startColumn": 33,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.WRITING;\n",
            "startLine": 1348,
            "endLine": 1348,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(write != null)",
            "startLine": 1317,
            "endLine": 1327,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(write != null)",
            "startLine": 1351,
            "endLine": 1361,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1321,
            "endLine": 1325,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1355,
            "endLine": 1359,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(close)",
            "startLine": 1331,
            "endLine": 1334,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(close)",
            "startLine": 1365,
            "endLine": 1368,
            "startColumn": 17,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ensureFillInterested();\n",
            "startLine": 1334,
            "endLine": 1334,
            "startColumn": 21,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ensureFillInterested();\n",
            "startLine": 1368,
            "endLine": 1368,
            "startColumn": 21,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "EndPoint endPoint=getEndPoint();\n",
            "startLine": 1278,
            "endLine": 1278,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "EndPoint endPoint=getEndPoint();\n",
            "startLine": 1312,
            "endLine": 1312,
            "startColumn": 13,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flush=false;\n",
            "startLine": 1282,
            "endLine": 1282,
            "startColumn": 17,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean flush=false;\n",
            "startLine": 1315,
            "endLine": 1315,
            "startColumn": 17,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean ishut=endPoint.isInputShutdown();\n",
            "startLine": 1285,
            "endLine": 1285,
            "startColumn": 21,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean ishut=endPoint.isInputShutdown();\n",
            "startLine": 1318,
            "endLine": 1318,
            "startColumn": 21,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oshut=endPoint.isOutputShutdown();\n",
            "startLine": 1286,
            "endLine": 1286,
            "startColumn": 21,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oshut=endPoint.isOutputShutdown();\n",
            "startLine": 1319,
            "endLine": 1319,
            "startColumn": 21,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "closeOutbound();\n",
            "startLine": 1290,
            "endLine": 1290,
            "startColumn": 21,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "closeOutbound();\n",
            "startLine": 1323,
            "endLine": 1323,
            "startColumn": 21,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "close=ishut;\n",
            "startLine": 1299,
            "endLine": 1299,
            "startColumn": 21,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "close=ishut;\n",
            "startLine": 1333,
            "endLine": 1333,
            "startColumn": 25,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer write=null;\n",
            "startLine": 1308,
            "endLine": 1308,
            "startColumn": 25,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ByteBuffer write=null;\n",
            "startLine": 1342,
            "endLine": 1342,
            "startColumn": 25,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1323,
            "endLine": 1323,
            "startColumn": 37,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1357,
            "endLine": 1357,
            "startColumn": 37,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.trace(\"IGNORED\",x);\n",
            "startLine": 1338,
            "endLine": 1338,
            "startColumn": 17,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.trace(\"IGNORED\",x);\n",
            "startLine": 1373,
            "endLine": 1373,
            "startColumn": 21,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1305,
            "endLine": 1328,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1339,
            "endLine": 1362,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1318,
            "endLine": 1327,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1352,
            "endLine": 1361,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "endPoint.write(Callback.from(() -> {\n  try (AutoLock l=_lock.lock()){\n    _flushState=FlushState.IDLE;\n    releaseEncryptedOutputBuffer();\n  }\n }\n,t -> endPoint.close()),write);\n",
            "startLine": 1319,
            "endLine": 1326,
            "startColumn": 29,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "endPoint.write(Callback.from(() -> {\n  try (AutoLock l=_lock.lock()){\n    _flushState=FlushState.IDLE;\n    releaseEmptyEncryptedOutputBuffer();\n  }\n }\n,t -> disconnect()),write);\n",
            "startLine": 1353,
            "endLine": 1360,
            "startColumn": 29,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1303,
            "endLine": 1329,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1337,
            "endLine": 1363,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1337,
            "endLine": 1340,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1371,
            "endLine": 1375,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1321,
            "endLine": 1325,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1380,
            "endLine": 1383,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedOutputBuffer();\n",
            "startLine": 1324,
            "endLine": 1324,
            "startColumn": 37,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyEncryptedOutputBuffer();\n",
            "startLine": 1358,
            "endLine": 1358,
            "startColumn": 37,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1320,
            "endLine": 1326,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1354,
            "endLine": 1360,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1336,
            "endLine": 1340,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(x)",
            "startLine": 1370,
            "endLine": 1375,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "doClose",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1382,
        "endLine": 1389,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint",
        "type": "Method",
        "name": "doClose",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1426,
        "endLine": 1436,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.doClose();\n",
            "startLine": 1388,
            "endLine": 1388,
            "startColumn": 13,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.doClose();\n",
            "startLine": 1435,
            "endLine": 1435,
            "startColumn": 13,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "doShutdownOutput();\n",
            "startLine": 1386,
            "endLine": 1386,
            "startColumn": 13,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "doShutdownOutput(true);\n",
            "startLine": 1434,
            "endLine": 1434,
            "startColumn": 13,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().close();\n",
            "startLine": 1387,
            "endLine": 1387,
            "startColumn": 13,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getEndPoint().close();\n",
            "startLine": 1384,
            "endLine": 1384,
            "startColumn": 13,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint.IncompleteWriteCallback",
        "type": "Method",
        "name": "succeeded",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1531,
        "endLine": 1555,
        "startColumn": 13,
        "endColumn": 14
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint.IncompleteWriteCallback",
        "type": "Method",
        "name": "succeeded",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1578,
        "endLine": 1602,
        "startColumn": 13,
        "endColumn": 14
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1536,
            "endLine": 1547,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1583,
            "endLine": 1594,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1538,
            "endLine": 1539,
            "startColumn": 21,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1585,
            "endLine": 1586,
            "startColumn": 21,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"IncompleteWriteCB succeeded {}\",SslConnection.this);\n",
            "startLine": 1539,
            "endLine": 1539,
            "startColumn": 25,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"IncompleteWriteCB succeeded {}\",SslConnection.this);\n",
            "startLine": 1586,
            "endLine": 1586,
            "startColumn": 25,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fillable)",
            "startLine": 1545,
            "endLine": 1546,
            "startColumn": 21,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fillable)",
            "startLine": 1592,
            "endLine": 1593,
            "startColumn": 21,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_fillState=FillState.IDLE;\n",
            "startLine": 1546,
            "endLine": 1546,
            "startColumn": 25,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_fillState=FillState.IDLE;\n",
            "startLine": 1593,
            "endLine": 1593,
            "startColumn": 25,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(interested)",
            "startLine": 1549,
            "endLine": 1552,
            "startColumn": 17,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(interested)",
            "startLine": 1596,
            "endLine": 1599,
            "startColumn": 17,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ensureFillInterested();\n",
            "startLine": 1550,
            "endLine": 1550,
            "startColumn": 21,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ensureFillInterested();\n",
            "startLine": 1597,
            "endLine": 1597,
            "startColumn": 21,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fillable)",
            "startLine": 1551,
            "endLine": 1552,
            "startColumn": 22,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fillable)",
            "startLine": 1598,
            "endLine": 1599,
            "startColumn": 22,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getFillInterest().fillable();\n",
            "startLine": 1552,
            "endLine": 1552,
            "startColumn": 21,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getFillInterest().fillable();\n",
            "startLine": 1599,
            "endLine": 1599,
            "startColumn": 21,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean fillable;\n",
            "startLine": 1534,
            "endLine": 1534,
            "startColumn": 17,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean fillable;\n",
            "startLine": 1581,
            "endLine": 1581,
            "startColumn": 17,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean interested;\n",
            "startLine": 1535,
            "endLine": 1535,
            "startColumn": 17,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean interested;\n",
            "startLine": 1582,
            "endLine": 1582,
            "startColumn": 17,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1541,
            "endLine": 1541,
            "startColumn": 21,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1588,
            "endLine": 1588,
            "startColumn": 21,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "interested=_fillState == FillState.INTERESTED;\n",
            "startLine": 1543,
            "endLine": 1543,
            "startColumn": 21,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "interested=_fillState == FillState.INTERESTED;\n",
            "startLine": 1590,
            "endLine": 1590,
            "startColumn": 21,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fillable=_fillState == FillState.WAIT_FOR_FLUSH;\n",
            "startLine": 1544,
            "endLine": 1544,
            "startColumn": 21,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fillable=_fillState == FillState.WAIT_FOR_FLUSH;\n",
            "startLine": 1591,
            "endLine": 1591,
            "startColumn": 21,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getWriteFlusher().completeWrite();\n",
            "startLine": 1554,
            "endLine": 1554,
            "startColumn": 17,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getWriteFlusher().completeWrite();\n",
            "startLine": 1601,
            "endLine": 1601,
            "startColumn": 17,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedOutputBuffer();\n",
            "startLine": 1540,
            "endLine": 1540,
            "startColumn": 21,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEmptyEncryptedOutputBuffer();\n",
            "startLine": 1587,
            "endLine": 1587,
            "startColumn": 21,
            "endColumn": 57
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/eclipse/jetty.project.git",
      "sha1": "66de7ba6180e41480af2f4220334b62832586fac",
      "url": "https://github.com/eclipse/jetty.project/commit/66de7ba6180e41480af2f4220334b62832586fac",
      "originalMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint.IncompleteWriteCallback",
        "type": "Method",
        "name": "failed",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1557,
        "endLine": 1582,
        "startColumn": 13,
        "endColumn": 14
      },
      "refactoredMethod": {
        "container": "org.eclipse.jetty.io.ssl.SslConnection.DecryptedEndPoint.IncompleteWriteCallback",
        "type": "Method",
        "name": "failed",
        "filePath": "jetty-io/src/main/java/org/eclipse/jetty/io/ssl/SslConnection.java",
        "startLine": 1604,
        "endLine": 1628,
        "startColumn": 13,
        "endColumn": 14
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1561,
            "endLine": 1574,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(AutoLock l=_lock.lock())",
            "startLine": 1608,
            "endLine": 1620,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1563,
            "endLine": 1564,
            "startColumn": 21,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 1610,
            "endLine": 1611,
            "startColumn": 21,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"IncompleteWriteCB failed {}\",SslConnection.this,x);\n",
            "startLine": 1564,
            "endLine": 1564,
            "startColumn": 25,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"IncompleteWriteCB failed {}\",SslConnection.this,x);\n",
            "startLine": 1611,
            "endLine": 1611,
            "startColumn": 25,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failFillInterest)",
            "startLine": 1572,
            "endLine": 1573,
            "startColumn": 21,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failFillInterest)",
            "startLine": 1618,
            "endLine": 1619,
            "startColumn": 21,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_fillState=FillState.IDLE;\n",
            "startLine": 1573,
            "endLine": 1573,
            "startColumn": 25,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_fillState=FillState.IDLE;\n",
            "startLine": 1619,
            "endLine": 1619,
            "startColumn": 25,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failFillInterest)",
            "startLine": 1578,
            "endLine": 1579,
            "startColumn": 21,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failFillInterest)",
            "startLine": 1624,
            "endLine": 1625,
            "startColumn": 21,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getFillInterest().onFail(x);\n",
            "startLine": 1579,
            "endLine": 1579,
            "startColumn": 25,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getFillInterest().onFail(x);\n",
            "startLine": 1625,
            "endLine": 1625,
            "startColumn": 25,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getWriteFlusher().onFail(x);\n",
            "startLine": 1580,
            "endLine": 1580,
            "startColumn": 21,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_decryptedEndPoint.getWriteFlusher().onFail(x);\n",
            "startLine": 1626,
            "endLine": 1626,
            "startColumn": 21,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean failFillInterest;\n",
            "startLine": 1560,
            "endLine": 1560,
            "startColumn": 17,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean failFillInterest;\n",
            "startLine": 1607,
            "endLine": 1607,
            "startColumn": 17,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1569,
            "endLine": 1569,
            "startColumn": 21,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "_flushState=FlushState.IDLE;\n",
            "startLine": 1615,
            "endLine": 1615,
            "startColumn": 21,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failFillInterest=_fillState == FillState.WAIT_FOR_FLUSH || _fillState == FillState.INTERESTED;\n",
            "startLine": 1570,
            "endLine": 1571,
            "startColumn": 21,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failFillInterest=_fillState == FillState.WAIT_FOR_FLUSH || _fillState == FillState.INTERESTED;\n",
            "startLine": 1616,
            "endLine": 1617,
            "startColumn": 21,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> {\n  if (failFillInterest)   _decryptedEndPoint.getFillInterest().onFail(x);\n  _decryptedEndPoint.getWriteFlusher().onFail(x);\n}\n);\n",
            "startLine": 1576,
            "endLine": 1581,
            "startColumn": 17,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "getExecutor().execute(() -> {\n  if (failFillInterest)   _decryptedEndPoint.getFillInterest().onFail(x);\n  _decryptedEndPoint.getWriteFlusher().onFail(x);\n}\n);\n",
            "startLine": 1622,
            "endLine": 1627,
            "startColumn": 17,
            "endColumn": 20
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(_encryptedOutput);\n",
            "startLine": 1566,
            "endLine": 1566,
            "startColumn": 21,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "BufferUtil.clear(_encryptedOutput);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "releaseEncryptedOutputBuffer();\n",
            "startLine": 1567,
            "endLine": 1567,
            "startColumn": 21,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "discardEncryptedOutputBuffer();\n",
            "startLine": 1613,
            "endLine": 1613,
            "startColumn": 21,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}