{
  "results": [
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "2db63942882d91020b46d7333285e5c94f1d1e52",
      "url": "https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "sendUpExceptionThrownByStatement",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 74,
        "endLine": 81,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "sendUpExceptionThrownByStatement",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 72,
        "endLine": 79,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertSame(exception,e);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertSame(exception,e);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RuntimeException exception=new RuntimeException();\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Exception exception=new RuntimeException();\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 9,
            "endColumn": 54
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RuntimeException e=assertThrows(RuntimeException.class,evaluateWithException(exception));\n",
            "startLine": 77,
            "endLine": 79,
            "startColumn": 9,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Exception e=assertThrows(Exception.class,run(failAfter50Ms(new Fail(exception))));\n",
            "startLine": 75,
            "endLine": 77,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "2db63942882d91020b46d7333285e5c94f1d1e52",
      "url": "https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "stopEndlessStatement",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 152,
        "endLine": 165,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "stopEndlessStatement",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 122,
        "endLine": 135,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(20);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InfiniteLoopStatement infiniteLoop=new InfiniteLoopStatement();\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InfiniteLoop infiniteLoop=new InfiniteLoop();\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FailOnTimeout infiniteLoopTimeout=builder().withTimeout(TIMEOUT,MILLISECONDS).build(infiniteLoop);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return FailOnTimeout.builder().withTimeout(50,MILLISECONDS).withLookingForStuckThread(lookingForStuckThread).build(statement);\n",
            "startLine": 236,
            "endLine": 239,
            "startColumn": 9,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "2db63942882d91020b46d7333285e5c94f1d1e52",
      "url": "https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "stackTraceContainsRealCauseOfTimeout",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 179,
        "endLine": 207,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "stackTraceContainsRealCauseOfTimeout",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 137,
        "endLine": 161,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(element: stackTrace)",
            "startLine": 191,
            "endLine": 199,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(element: stackTrace)",
            "startLine": 146,
            "endLine": 154,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String methodName=element.getMethodName();\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 17,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String methodName=element.getMethodName();\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 13,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(\"theRealCauseOfTheTimeout\".equals(methodName))",
            "startLine": 193,
            "endLine": 195,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(\"theRealCauseOfTheTimeout\".equals(methodName))",
            "startLine": 148,
            "endLine": 150,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "stackTraceContainsTheRealCauseOfTheTimeout=true;\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 21,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "stackTraceContainsTheRealCauseOfTheTimeout=true;\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 17,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(\"notTheRealCauseOfTheTimeout\".equals(methodName))",
            "startLine": 196,
            "endLine": 198,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(\"notTheRealCauseOfTheTimeout\".equals(methodName))",
            "startLine": 151,
            "endLine": 153,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "stackTraceContainsOtherThanTheRealCauseOfTheTimeout=true;\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 21,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "stackTraceContainsOtherThanTheRealCauseOfTheTimeout=true;\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 17,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean stackTraceContainsTheRealCauseOfTheTimeout=false;\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean stackTraceContainsTheRealCauseOfTheTimeout=false;\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean stackTraceContainsOtherThanTheRealCauseOfTheTimeout=false;\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 13,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean stackTraceContainsOtherThanTheRealCauseOfTheTimeout=false;\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 9,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"Stack trace does not contain the real cause of the timeout\",stackTraceContainsTheRealCauseOfTheTimeout);\n",
            "startLine": 200,
            "endLine": 202,
            "startColumn": 13,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"Stack trace does not contain the real cause of the timeout\",stackTraceContainsTheRealCauseOfTheTimeout);\n",
            "startLine": 155,
            "endLine": 157,
            "startColumn": 9,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\"Stack trace contains other than the real cause of the timeout, which can be very misleading\",stackTraceContainsOtherThanTheRealCauseOfTheTimeout);\n",
            "startLine": 203,
            "endLine": 205,
            "startColumn": 13,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(\"Stack trace contains other than the real cause of the timeout, which can be very misleading\",stackTraceContainsOtherThanTheRealCauseOfTheTimeout);\n",
            "startLine": 158,
            "endLine": 160,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StackTraceElement[] stackTrace=timeoutException.getStackTrace();\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StackTraceElement[] stackTrace=timedOutException.getStackTrace();\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FailOnTimeout stuckTimeout=builder().withTimeout(TIMEOUT,MILLISECONDS).build(stuck);\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return FailOnTimeout.builder().withTimeout(50,MILLISECONDS).withLookingForStuckThread(lookingForStuckThread).build(statement);\n",
            "startLine": 236,
            "endLine": 239,
            "startColumn": 9,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "2db63942882d91020b46d7333285e5c94f1d1e52",
      "url": "https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "lookingForStuckThread_threadGroupNotLeaked",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 235,
        "endLine": 257,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "lookingForStuckThread_threadGroupNotLeaked",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 189,
        "endLine": 214,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(lookingForStuckThread);\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(lookingForStuckThread);\n",
            "startLine": 191,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<ThreadGroup> innerThreadGroup=new AtomicReference<ThreadGroup>();\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<ThreadGroup> innerThreadGroup=new AtomicReference<ThreadGroup>();\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<Thread> innerThread=new AtomicReference<Thread>();\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<Thread> innerThread=new AtomicReference<Thread>();\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadGroup outerThreadGroup=currentThread().getThreadGroup();\n",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadGroup outerThreadGroup=currentThread().getThreadGroup();\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThread.get().join();\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThread.get().join();\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"the 'FailOnTimeoutGroup' thread group should be destroyed after running the test\",innerThreadGroup.get().isDestroyed());\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 9,
            "endColumn": 142
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"the 'FailOnTimeoutGroup' thread group should be destroyed after running the test\",innerThreadGroup.get().isDestroyed());\n",
            "startLine": 212,
            "endLine": 213,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThread.set(currentThread());\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 17,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThread.set(currentThread());\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 17,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup group=currentThread().getThreadGroup();\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 17,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup group=currentThread().getThreadGroup();\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 17,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotSame(\"inner thread should use a different thread group\",outerThreadGroup,group);\n",
            "startLine": 246,
            "endLine": 246,
            "startColumn": 17,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotSame(\"inner thread should use a different thread group\",outerThreadGroup,group);\n",
            "startLine": 200,
            "endLine": 201,
            "startColumn": 17,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThreadGroup.set(group);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 17,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "innerThreadGroup.set(group);\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 17,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"the 'FailOnTimeoutGroup' thread group should be a daemon thread group\",group.isDaemon());\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 17,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"the 'FailOnTimeoutGroup' thread group should be a daemon thread group\",group.isDaemon());\n",
            "startLine": 203,
            "endLine": 204,
            "startColumn": 17,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 17,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThrowingRunnable runnable=evaluateWithDelegate(new Statement(){\n  @Override public void evaluate(){\n    innerThread.set(currentThread());\n    ThreadGroup group=currentThread().getThreadGroup();\n    assertNotSame(\"inner thread should use a different thread group\",outerThreadGroup,group);\n    innerThreadGroup.set(group);\n    assertTrue(\"the 'FailOnTimeoutGroup' thread group should be a daemon thread group\",group.isDaemon());\n  }\n}\n);\n",
            "startLine": 241,
            "endLine": 250,
            "startColumn": 9,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FailOnTimeout failOnTimeout=failAfter50Ms(new Statement(){\n  @Override public void evaluate(){\n    innerThread.set(currentThread());\n    ThreadGroup group=currentThread().getThreadGroup();\n    assertNotSame(\"inner thread should use a different thread group\",outerThreadGroup,group);\n    innerThreadGroup.set(group);\n    assertTrue(\"the 'FailOnTimeoutGroup' thread group should be a daemon thread group\",group.isDaemon());\n  }\n}\n);\n",
            "startLine": 195,
            "endLine": 206,
            "startColumn": 9,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"the Statement was never run\",innerThread.get() != null);\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotNull(\"the Statement was never run\",innerThread.get());\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "2db63942882d91020b46d7333285e5c94f1d1e52",
      "url": "https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "notLookingForStuckThread_usesSameThreadGroup",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 259,
        "endLine": 272,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "notLookingForStuckThread_usesSameThreadGroup",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 216,
        "endLine": 233,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeFalse(lookingForStuckThread);\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeFalse(lookingForStuckThread);\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadGroup outerThreadGroup=currentThread().getThreadGroup();\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadGroup outerThreadGroup=currentThread().getThreadGroup();\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup group=currentThread().getThreadGroup();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 17,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup group=currentThread().getThreadGroup();\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 17,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertSame(\"inner thread should use the same thread group\",outerThreadGroup,group);\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 17,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertSame(\"inner thread should use the same thread group\",outerThreadGroup,group);\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 17,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 17,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThrowingRunnable runnable=evaluateWithDelegate(new Statement(){\n  @Override public void evaluate(){\n    ThreadGroup group=currentThread().getThreadGroup();\n    assertSame(\"inner thread should use the same thread group\",outerThreadGroup,group);\n  }\n}\n);\n",
            "startLine": 263,
            "endLine": 269,
            "startColumn": 9,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FailOnTimeout failOnTimeout=failAfter50Ms(new Statement(){\n  @Override public void evaluate(){\n    statementWasExecuted.set(true);\n    ThreadGroup group=currentThread().getThreadGroup();\n    assertSame(\"inner thread should use the same thread group\",outerThreadGroup,group);\n  }\n}\n);\n",
            "startLine": 221,
            "endLine": 228,
            "startColumn": 9,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "1254795902e56eb545e1fe696827924bc5e82b66",
      "url": "https://github.com/junit-team/junit4/commit/1254795902e56eb545e1fe696827924bc5e82b66",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeout",
        "type": "Method",
        "name": "evaluate",
        "filePath": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java",
        "startLine": 119,
        "endLine": 146,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeout",
        "type": "Method",
        "name": "evaluate",
        "filePath": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java",
        "startLine": 119,
        "endLine": 139,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 141,
            "endLine": 144,
            "startColumn": 53,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 127,
            "endLine": 129,
            "startColumn": 43,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(throwable != null)",
            "startLine": 130,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(throwable != null)",
            "startLine": 136,
            "endLine": 138,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw throwable;\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw throwable;\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 13,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CallableStatement callable=new CallableStatement();\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CallableStatement callable=new CallableStatement();\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FutureTask<Throwable> task=new FutureTask<Throwable>(callable);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FutureTask<Throwable> task=new FutureTask<Throwable>(callable);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup threadGroup=new ThreadGroup(\"FailOnTimeoutGroup\");\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadGroup threadGroup=new ThreadGroup(\"FailOnTimeoutGroup\");\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread thread=new Thread(threadGroup,task,\"Time-limited test\");\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread thread=new Thread(threadGroup,task,\"Time-limited test\");\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "thread.setDaemon(true);\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "thread.setDaemon(true);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "thread.start();\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 13,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "thread.start();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "callable.awaitStarted();\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "callable.awaitStarted();\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable throwable=getResult(task,thread);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Throwable throwable=getResult(task,thread);\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 139,
            "endLine": 144,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 125,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "threadGroup.destroy();\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 17,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "threadGroup.setDaemon(true);\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 17,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "1254795902e56eb545e1fe696827924bc5e82b66",
      "url": "https://github.com/junit-team/junit4/commit/1254795902e56eb545e1fe696827924bc5e82b66",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "evaluateWithException",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 94,
        "endLine": 102,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest",
        "type": "Method",
        "name": "evaluateWithException",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 103,
        "endLine": 105,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "statement.waitDuration=0;\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "statement.waitDuration=0;\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 17,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 17,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failOnTimeout.evaluate();\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 17,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new ThrowingRunnable(){\n  public void run() throws Throwable {\n    statement.nextException=exception;\n    statement.waitDuration=0;\n    failOnTimeout.evaluate();\n  }\n}\n;\n",
            "startLine": 95,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new ThrowingRunnable(){\n  public void run() throws Throwable {\n    statement.nextStatement=delegate;\n    statement.waitDuration=0;\n    failOnTimeout.evaluate();\n  }\n}\n;\n",
            "startLine": 94,
            "endLine": 100,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "statement.nextException=exception;\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 17,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "statement.nextStatement=delegate;\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 17,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "1254795902e56eb545e1fe696827924bc5e82b66",
      "url": "https://github.com/junit-team/junit4/commit/1254795902e56eb545e1fe696827924bc5e82b66",
      "originalMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest.TestStatement",
        "type": "Method",
        "name": "evaluate",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 119,
        "endLine": 125,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.junit.internal.runners.statements.FailOnTimeoutTest.TestStatement",
        "type": "Method",
        "name": "evaluate",
        "filePath": "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java",
        "startLine": 122,
        "endLine": 128,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(waitDuration);\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(waitDuration);\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 13,
            "endColumn": 33
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(nextException != null)",
            "startLine": 122,
            "endLine": 124,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(nextStatement != null)",
            "startLine": 125,
            "endLine": 127,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit4.git",
      "sha1": "f34c4435ebeea2dc4dd91b8242a2defdf14d7d5c",
      "url": "https://github.com/junit-team/junit4/commit/f34c4435ebeea2dc4dd91b8242a2defdf14d7d5c",
      "originalMethod": {
        "container": "org.junit.runners.ParentRunner",
        "type": "Method",
        "name": "ParentRunner",
        "filePath": "src/main/java/org/junit/runners/ParentRunner.java",
        "startLine": 89,
        "endLine": 97,
        "startColumn": 4,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.junit.runners.ParentRunner",
        "type": "Method",
        "name": "ParentRunner",
        "filePath": "src/main/java/org/junit/runners/ParentRunner.java",
        "startLine": 90,
        "endLine": 98,
        "startColumn": 4,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate();\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 8,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate();\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 8,
            "endColumn": 19
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.testClass=testClass;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 8,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.testClass=notNull(testClass);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 8,
            "endColumn": 44
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}