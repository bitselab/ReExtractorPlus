{
  "results": [
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertArrayEquals",
        "type": "Method",
        "name": "assertArraysHaveSameLength",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertArrayEquals.java",
        "startLine": 416,
        "endLine": 425,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertArrayEquals",
        "type": "Method",
        "name": "assertArraysHaveSameLength",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertArrayEquals.java",
        "startLine": 419,
        "endLine": 430,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expected != actual)",
            "startLine": 419,
            "endLine": 424,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expected != actual)",
            "startLine": 422,
            "endLine": 429,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=\"array lengths differ\" + formatIndexes(indexes) + \", expected: <\"+ expected+ \"> but was: <\"+ actual+ \">\";\n",
            "startLine": 421,
            "endLine": 422,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertionFailure().message(messageOrSupplier).reason(\"array lengths differ\" + formatIndexes(indexes)).expected(expected).actual(actual).buildAndThrow();\n",
            "startLine": 423,
            "endLine": 428,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertDoesNotThrow",
        "type": "Method",
        "name": "createAssertionFailedError",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertDoesNotThrow.java",
        "startLine": 80,
        "endLine": 84,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertDoesNotThrow",
        "type": "Method",
        "name": "createAssertionFailedError",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertDoesNotThrow.java",
        "startLine": 79,
        "endLine": 85,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=buildPrefix(nullSafeGet(messageOrSupplier)) + \"Unexpected exception thrown: \" + t.getClass().getName()+ buildSuffix(t.getMessage());\n",
            "startLine": 81,
            "endLine": 82,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=nullSafeGet(this.message);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 3,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new AssertionFailedError(message,t);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return assertionFailure().message(messageOrSupplier).reason(\"Unexpected exception thrown: \" + t.getClass().getName() + buildSuffix(t.getMessage())).cause(t).build();\n",
            "startLine": 80,
            "endLine": 84,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertFalse",
        "type": "Method",
        "name": "assertFalse",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java",
        "startLine": 38,
        "endLine": 42,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertFalse",
        "type": "Method",
        "name": "assertFalse",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java",
        "startLine": 34,
        "endLine": 38,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(condition)",
            "startLine": 39,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(condition)",
            "startLine": 35,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(buildPrefix(message) + EXPECTED_FALSE,false,true);\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 4,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failNotFalse(message);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 4,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertFalse",
        "type": "Method",
        "name": "assertFalse",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java",
        "startLine": 44,
        "endLine": 48,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertFalse",
        "type": "Method",
        "name": "assertFalse",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertFalse.java",
        "startLine": 40,
        "endLine": 44,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(condition)",
            "startLine": 45,
            "endLine": 47,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(condition)",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_FALSE,false,true);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 4,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failNotFalse(messageSupplier);\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertInstanceOf",
        "type": "Method",
        "name": "assertInstanceOf",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertInstanceOf.java",
        "startLine": 46,
        "endLine": 54,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertInstanceOf",
        "type": "Method",
        "name": "assertInstanceOf",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertInstanceOf.java",
        "startLine": 42,
        "endLine": 52,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!expectedType.isInstance(actualValue))",
            "startLine": 47,
            "endLine": 52,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!expectedType.isInstance(actualValue))",
            "startLine": 43,
            "endLine": 50,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return expectedType.cast(actualValue);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 3,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return expectedType.cast(actualValue);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 41
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=buildPrefix(nullSafeGet(messageOrSupplier)) + format(expectedType,actualValue == null ? null : actualValue.getClass(),reason);\n",
            "startLine": 49,
            "endLine": 50,
            "startColumn": 4,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertionFailure().message(messageOrSupplier).reason(actualValue == null ? \"Unexpected null value\" : \"Unexpected type\").expected(expectedType).actual(actualValue == null ? null : actualValue.getClass()).buildAndThrow();\n",
            "startLine": 44,
            "endLine": 49,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertIterableEquals",
        "type": "Method",
        "name": "assertIteratorsAreEmpty",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertIterableEquals.java",
        "startLine": 149,
        "endLine": 164,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertIterableEquals",
        "type": "Method",
        "name": "assertIteratorsAreEmpty",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertIterableEquals.java",
        "startLine": 152,
        "endLine": 169,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expected.hasNext() || actual.hasNext())",
            "startLine": 152,
            "endLine": 163,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expected.hasNext() || actual.hasNext())",
            "startLine": 155,
            "endLine": 168,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger expectedCount=new AtomicInteger(processed);\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 4,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger expectedCount=new AtomicInteger(processed);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 4,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "expected.forEachRemaining(e -> expectedCount.incrementAndGet());\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 4,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "expected.forEachRemaining(e -> expectedCount.incrementAndGet());\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 4,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger actualCount=new AtomicInteger(processed);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 4,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger actualCount=new AtomicInteger(processed);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 4,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actual.forEachRemaining(e -> actualCount.incrementAndGet());\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 4,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actual.forEachRemaining(e -> actualCount.incrementAndGet());\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 4,
            "endColumn": 64
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=\"iterable lengths differ\" + formatIndexes(indexes) + \", expected: <\"+ expectedCount.get()+ \"> but was: <\"+ actualCount.get()+ \">\";\n",
            "startLine": 160,
            "endLine": 161,
            "startColumn": 4,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertionFailure().message(messageOrSupplier).reason(\"iterable lengths differ\" + formatIndexes(indexes)).expected(expectedCount.get()).actual(actualCount.get()).buildAndThrow();\n",
            "startLine": 162,
            "endLine": 167,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertThrows",
        "type": "Method",
        "name": "assertThrows",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrows.java",
        "startLine": 50,
        "endLine": 72,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertThrows",
        "type": "Method",
        "name": "assertThrows",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrows.java",
        "startLine": 48,
        "endLine": 74,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 54,
            "endLine": 67,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 52,
            "endLine": 69,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "executable.execute();\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 4,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "executable.execute();\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 4,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isInstance(actualException))",
            "startLine": 58,
            "endLine": 66,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isInstance(actualException))",
            "startLine": 56,
            "endLine": 68,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 50,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 50,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return (T)actualException;\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return (T)actualException;\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "UnrecoverableExceptions.rethrowIfUnrecoverable(actualException);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 5,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "UnrecoverableExceptions.rethrowIfUnrecoverable(actualException);\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 5,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 61,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 59,
            "endLine": 68,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(actualException)",
            "startLine": 57,
            "endLine": 67,
            "startColumn": 37,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(actualException)",
            "startLine": 55,
            "endLine": 69,
            "startColumn": 37,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailedError(message,actualException);\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw assertionFailure().message(messageOrSupplier).expected(expectedType).actual(actualException.getClass()).reason(\"Unexpected exception type thrown\").cause(actualException).build();\n",
            "startLine": 61,
            "endLine": 67,
            "startColumn": 5,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=buildPrefix(nullSafeGet(messageOrSupplier)) + String.format(\"Expected %s to be thrown, but nothing was thrown.\",getCanonicalName(expectedType));\n",
            "startLine": 69,
            "endLine": 70,
            "startColumn": 3,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=nullSafeGet(this.message);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 3,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertThrowsExactly",
        "type": "Method",
        "name": "assertThrowsExactly",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrowsExactly.java",
        "startLine": 50,
        "endLine": 72,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertThrowsExactly",
        "type": "Method",
        "name": "assertThrowsExactly",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrowsExactly.java",
        "startLine": 48,
        "endLine": 75,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 54,
            "endLine": 67,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 52,
            "endLine": 69,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "executable.execute();\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 4,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "executable.execute();\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 4,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.equals(actualException.getClass()))",
            "startLine": 58,
            "endLine": 66,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.equals(actualException.getClass()))",
            "startLine": 56,
            "endLine": 68,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 57,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 57,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return (T)actualException;\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return (T)actualException;\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "UnrecoverableExceptions.rethrowIfUnrecoverable(actualException);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 5,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "UnrecoverableExceptions.rethrowIfUnrecoverable(actualException);\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 5,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 61,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 59,
            "endLine": 68,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(actualException)",
            "startLine": 57,
            "endLine": 67,
            "startColumn": 37,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(actualException)",
            "startLine": 55,
            "endLine": 69,
            "startColumn": 37,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailedError(message,actualException);\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw assertionFailure().message(messageOrSupplier).expected(expectedType).actual(actualException.getClass()).reason(\"Unexpected exception type thrown\").cause(actualException).build();\n",
            "startLine": 61,
            "endLine": 67,
            "startColumn": 5,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=buildPrefix(nullSafeGet(messageOrSupplier)) + String.format(\"Expected %s to be thrown, but nothing was thrown.\",getCanonicalName(expectedType));\n",
            "startLine": 69,
            "endLine": 70,
            "startColumn": 3,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=nullSafeGet(this.message);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 3,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertTimeout",
        "type": "Method",
        "name": "assertTimeoutPreemptively",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java",
        "startLine": 128,
        "endLine": 174,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertTimeout",
        "type": "Method",
        "name": "assertTimeoutPreemptively",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java",
        "startLine": 128,
        "endLine": 173,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 134,
            "endLine": 173,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 134,
            "endLine": 172,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 171,
            "endLine": 173,
            "startColumn": 11,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 170,
            "endLine": 172,
            "startColumn": 11,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "executorService.shutdownNow();\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 4,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "executorService.shutdownNow();\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 136,
            "endLine": 142,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 136,
            "endLine": 142,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "threadReference.set(Thread.currentThread());\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 6,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "threadReference.set(Thread.currentThread());\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 6,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return supplier.get();\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 6,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return supplier.get();\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 6,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(throwable)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 33,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(throwable)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 33,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(throwable);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 6,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(throwable);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 6,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 146,
            "endLine": 169,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 146,
            "endLine": 168,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get(timeoutInMillis,TimeUnit.MILLISECONDS);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get(timeoutInMillis,TimeUnit.MILLISECONDS);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 164,
            "endLine": 166,
            "startColumn": 34,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 163,
            "endLine": 165,
            "startColumn": 34,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(ex.getCause());\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(ex.getCause());\n",
            "startLine": 164,
            "endLine": 164,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 167,
            "endLine": 169,
            "startColumn": 25,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 166,
            "endLine": 168,
            "startColumn": 25,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(ex);\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw ExceptionUtils.throwAsUncheckedException(ex);\n",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(thread != null)",
            "startLine": 154,
            "endLine": 162,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(thread != null)",
            "startLine": 155,
            "endLine": 160,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicReference<Thread> threadReference=new AtomicReference<>();\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicReference<Thread> threadReference=new AtomicReference<>();\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExecutorService executorService=Executors.newSingleThreadExecutor(new TimeoutThreadFactory());\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExecutorService executorService=Executors.newSingleThreadExecutor(new TimeoutThreadFactory());\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Future<T> future=executorService.submit(() -> {\n  try {\n    threadReference.set(Thread.currentThread());\n    return supplier.get();\n  }\n catch (  Throwable throwable) {\n    throw ExceptionUtils.throwAsUncheckedException(throwable);\n  }\n}\n);\n",
            "startLine": 135,
            "endLine": 143,
            "startColumn": 4,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Future<T> future=executorService.submit(() -> {\n  try {\n    threadReference.set(Thread.currentThread());\n    return supplier.get();\n  }\n catch (  Throwable throwable) {\n    throw ExceptionUtils.throwAsUncheckedException(throwable);\n  }\n}\n);\n",
            "startLine": 135,
            "endLine": 143,
            "startColumn": 4,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long timeoutInMillis=timeout.toMillis();\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 4,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long timeoutInMillis=timeout.toMillis();\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 4,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread thread=threadReference.get();\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread thread=threadReference.get();\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 5,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExecutionTimeoutException exception=new ExecutionTimeoutException(\"Execution timed out in thread \" + thread.getName());\n",
            "startLine": 155,
            "endLine": 156,
            "startColumn": 6,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExecutionTimeoutException exception=new ExecutionTimeoutException(\"Execution timed out in thread \" + thread.getName());\n",
            "startLine": 156,
            "endLine": 157,
            "startColumn": 6,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "exception.setStackTrace(thread.getStackTrace());\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 6,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "exception.setStackTrace(thread.getStackTrace());\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 6,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 154,
            "endLine": 159,
            "startColumn": 25,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 155,
            "endLine": 160,
            "startColumn": 25,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 149,
            "endLine": 163,
            "startColumn": 32,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 149,
            "endLine": 162,
            "startColumn": 32,
            "endColumn": 5
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=buildPrefix(nullSafeGet(messageOrSupplier)) + \"execution timed out after \" + timeoutInMillis+ \" ms\";\n",
            "startLine": 150,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AssertionFailureBuilder failure=assertionFailure().message(messageOrSupplier).reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n",
            "startLine": 150,
            "endLine": 152,
            "startColumn": 5,
            "endColumn": 71
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertTrue",
        "type": "Method",
        "name": "assertTrue",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java",
        "startLine": 38,
        "endLine": 42,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertTrue",
        "type": "Method",
        "name": "assertTrue",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java",
        "startLine": 34,
        "endLine": 38,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!condition)",
            "startLine": 39,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!condition)",
            "startLine": 35,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(buildPrefix(message) + EXPECTED_TRUE,true,false);\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failNotTrue(message);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 4,
            "endColumn": 25
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "url": "https://github.com/junit-team/junit5/commit/e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2",
      "originalMethod": {
        "container": "org.junit.jupiter.api.AssertTrue",
        "type": "Method",
        "name": "assertTrue",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java",
        "startLine": 44,
        "endLine": 48,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.AssertTrue",
        "type": "Method",
        "name": "assertTrue",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTrue.java",
        "startLine": 40,
        "endLine": 44,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!condition)",
            "startLine": 45,
            "endLine": 47,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!condition)",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(buildPrefix(nullSafeGet(messageSupplier)) + EXPECTED_TRUE,true,false);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 4,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failNotTrue(messageSupplier);\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 4,
            "endColumn": 33
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/junit-team/junit5.git",
      "sha1": "0a2c3e57d2cd423c342b707837c29ec8126036ac",
      "url": "https://github.com/junit-team/junit5/commit/0a2c3e57d2cd423c342b707837c29ec8126036ac",
      "originalMethod": {
        "container": "org.junit.jupiter.api.condition.MethodBasedCondition",
        "type": "Method",
        "name": "buildConditionEvaluationResult",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java",
        "startLine": 93,
        "endLine": 100,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.junit.jupiter.api.condition.MethodBasedCondition",
        "type": "Method",
        "name": "buildConditionEvaluationResult",
        "filePath": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java",
        "startLine": 94,
        "endLine": 102,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isEnabled(methodResult))",
            "startLine": 95,
            "endLine": 97,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isEnabled(methodResult))",
            "startLine": 97,
            "endLine": 99,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String customReason=this.customDisabledReason.apply(annotation);\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String customReason=this.customDisabledReason.apply(annotation);\n",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return enabled(defaultReason);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return enabled(defaultReason.get());\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 4,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return StringUtils.isNotBlank(customReason) ? disabled(customReason) : disabled(defaultReason);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 3,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return StringUtils.isNotBlank(customReason) ? disabled(customReason) : disabled(defaultReason.get());\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 3,
            "endColumn": 104
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String defaultReason=format(\"Condition provided in %s evaluated to %s\",this.annotationType,methodResult);\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 3,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Supplier<String> defaultReason=() -> format(\"@%s(\\\"%s\\\") evaluated to %s\",this.annotationType.getSimpleName(),this.methodName.apply(annotation),methodResult);\n",
            "startLine": 95,
            "endLine": 96,
            "startColumn": 3,
            "endColumn": 90
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}