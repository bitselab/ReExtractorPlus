{
  "results": [
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "71af0d6a5c4417a9c9c6523d4aa811579d8c867f",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=71af0d6a5c4417a9c9c6523d4aa811579d8c867f",
      "originalMethod": {
        "container": "org.eclipse.jgit.transport.Transport",
        "type": "Method",
        "name": "open",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/transport/Transport.java",
        "startLine": 495,
        "endLine": 530,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.transport.Transport",
        "type": "Method",
        "name": "open",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/transport/Transport.java",
        "startLine": 495,
        "endLine": 528,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ref: protocols)",
            "startLine": 513,
            "endLine": 527,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(ref: protocols)",
            "startLine": 513,
            "endLine": 525,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(proto == null)",
            "startLine": 515,
            "endLine": 518,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(proto == null)",
            "startLine": 515,
            "endLine": 518,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "protocols.remove(ref);\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "protocols.remove(ref);\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 5,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 517,
            "endLine": 517,
            "startColumn": 5,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 517,
            "endLine": 517,
            "startColumn": 5,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(proto.canHandle(uri,local,remoteName))",
            "startLine": 520,
            "endLine": 526,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(proto.canHandle(uri,local,remoteName))",
            "startLine": 520,
            "endLine": 524,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TransportProtocol proto=ref.get();\n",
            "startLine": 514,
            "endLine": 514,
            "startColumn": 4,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TransportProtocol proto=ref.get();\n",
            "startLine": 514,
            "endLine": 514,
            "startColumn": 4,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Transport tn=proto.open(uri,local,remoteName);\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Transport tn=proto.open(uri,local,remoteName);\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return tn;\n",
            "startLine": 525,
            "endLine": 525,
            "startColumn": 5,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return tn;\n",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 5,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotSupportedException(MessageFormat.format(JGitText.get().URINotSupported,uri));\n",
            "startLine": 529,
            "endLine": 529,
            "startColumn": 3,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotSupportedException(MessageFormat.format(JGitText.get().URINotSupported,uri));\n",
            "startLine": 527,
            "endLine": 527,
            "startColumn": 3,
            "endColumn": 94
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "tn.prePush=Hooks.prePush(local,tn.hookOutRedirect);\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 5,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "tn.remoteName=remoteName;\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "5747bba48b22a11beba8ebe0caf13a53d4ca96f2",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=5747bba48b22a11beba8ebe0caf13a53d4ca96f2",
      "originalMethod": {
        "container": "org.eclipse.jgit.blame.BlameGenerator",
        "type": "Method",
        "name": "push",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "startLine": 398,
        "endLine": 441,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.blame.BlameGenerator",
        "type": "Method",
        "name": "push",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "startLine": 428,
        "endLine": 462,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ldr.getType() == OBJ_BLOB)",
            "startLine": 417,
            "endLine": 428,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ldr.getType() == OBJ_BLOB)",
            "startLine": 447,
            "endLine": 458,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(description == null)",
            "startLine": 418,
            "endLine": 419,
            "startColumn": 4,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(description == null)",
            "startLine": 448,
            "endLine": 449,
            "startColumn": 4,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "description=JGitText.get().blameNotCommittedYet;\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "description=JGitText.get().blameNotCommittedYet;\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BlobCandidate c=new BlobCandidate(getRepository(),description,resultPath);\n",
            "startLine": 420,
            "endLine": 421,
            "startColumn": 4,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BlobCandidate c=new BlobCandidate(getRepository(),description,resultPath);\n",
            "startLine": 450,
            "endLine": 451,
            "startColumn": 4,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=id.toObjectId();\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 4,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=id.toObjectId();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 4,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceText=new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 4,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceText=new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n",
            "startLine": 453,
            "endLine": 453,
            "startColumn": 4,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 4,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 4,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 426,
            "endLine": 426,
            "startColumn": 4,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 4,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 427,
            "endLine": 427,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 457,
            "endLine": 457,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ObjectLoader ldr=reader.open(id);\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ObjectLoader ldr=reader.open(id);\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 3,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RevCommit commit=revPool.parseCommit(id);\n",
            "startLine": 430,
            "endLine": 430,
            "startColumn": 3,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RevCommit commit=revPool.parseCommit(id);\n",
            "startLine": 460,
            "endLine": 460,
            "startColumn": 3,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=idBuf.toObjectId();\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 3,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=idBuf.toObjectId();\n",
            "startLine": 420,
            "endLine": 420,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.loadText(reader);\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.loadText(reader);\n",
            "startLine": 421,
            "endLine": 421,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 3,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 3,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 438,
            "endLine": 438,
            "startColumn": 3,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 3,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 3,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 3,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Candidate c=new Candidate(getRepository(),commit,resultPath);\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 3,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Candidate c=new Candidate(getRepository(),blameCommit,resultPath);\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 3,
            "endColumn": 73
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 3,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 3,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 3,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 3,
            "endColumn": 15
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!find(commit,resultPath))",
            "startLine": 431,
            "endLine": 432,
            "startColumn": 3,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!find(blameCommit,resultPath))",
            "startLine": 415,
            "endLine": 417,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "59e8bec6e7705a89b5d0b9c6ac004b323ffa16b0",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=59e8bec6e7705a89b5d0b9c6ac004b323ffa16b0",
      "originalMethod": {
        "container": "org.eclipse.jgit.blame.BlameGenerator",
        "type": "Method",
        "name": "push",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "startLine": 398,
        "endLine": 441,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.blame.BlameGenerator",
        "type": "Method",
        "name": "push",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "startLine": 428,
        "endLine": 462,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ldr.getType() == OBJ_BLOB)",
            "startLine": 417,
            "endLine": 428,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ldr.getType() == OBJ_BLOB)",
            "startLine": 447,
            "endLine": 458,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(description == null)",
            "startLine": 418,
            "endLine": 419,
            "startColumn": 4,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(description == null)",
            "startLine": 448,
            "endLine": 449,
            "startColumn": 4,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "description=JGitText.get().blameNotCommittedYet;\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "description=JGitText.get().blameNotCommittedYet;\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BlobCandidate c=new BlobCandidate(getRepository(),description,resultPath);\n",
            "startLine": 420,
            "endLine": 421,
            "startColumn": 4,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BlobCandidate c=new BlobCandidate(getRepository(),description,resultPath);\n",
            "startLine": 450,
            "endLine": 451,
            "startColumn": 4,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=id.toObjectId();\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 4,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=id.toObjectId();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 4,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceText=new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 4,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceText=new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n",
            "startLine": 453,
            "endLine": 453,
            "startColumn": 4,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 4,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 4,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 426,
            "endLine": 426,
            "startColumn": 4,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 4,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 427,
            "endLine": 427,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 457,
            "endLine": 457,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ObjectLoader ldr=reader.open(id);\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ObjectLoader ldr=reader.open(id);\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 3,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RevCommit commit=revPool.parseCommit(id);\n",
            "startLine": 430,
            "endLine": 430,
            "startColumn": 3,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RevCommit commit=revPool.parseCommit(id);\n",
            "startLine": 460,
            "endLine": 460,
            "startColumn": 3,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=idBuf.toObjectId();\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 3,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.sourceBlob=idBuf.toObjectId();\n",
            "startLine": 420,
            "endLine": 420,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.loadText(reader);\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.loadText(reader);\n",
            "startLine": 421,
            "endLine": 421,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 3,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "c.regionList=new Region(0,0,c.sourceText.size());\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 3,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 438,
            "endLine": 438,
            "startColumn": 3,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "remaining=c.sourceText.size();\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 3,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 3,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "push(c);\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 3,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Candidate c=new Candidate(getRepository(),commit,resultPath);\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 3,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Candidate c=new Candidate(getRepository(),blameCommit,resultPath);\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 3,
            "endColumn": 73
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 3,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 3,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 3,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 3,
            "endColumn": 15
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!find(commit,resultPath))",
            "startLine": 431,
            "endLine": 432,
            "startColumn": 3,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!find(blameCommit,resultPath))",
            "startLine": 415,
            "endLine": 417,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "207dd4c938830e84c9101d30edb7fe626e04bbe1",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=207dd4c938830e84c9101d30edb7fe626e04bbe1",
      "originalMethod": {
        "container": "org.eclipse.jgit.transport.UploadPack",
        "type": "Method",
        "name": "fetchV2",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/transport/UploadPack.java",
        "startLine": 1162,
        "endLine": 1300,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.transport.UploadPack",
        "type": "Method",
        "name": "fetchV2",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/transport/UploadPack.java",
        "startLine": 1165,
        "endLine": 1295,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(requestValidator instanceof TipRequestValidator || requestValidator instanceof ReachableCommitTipRequestValidator || requestValidator instanceof AnyRequestValidator)",
            "startLine": 1167,
            "endLine": 1173,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(requestValidator instanceof TipRequestValidator || requestValidator instanceof ReachableCommitTipRequestValidator || requestValidator instanceof AnyRequestValidator)",
            "startLine": 1170,
            "endLine": 1176,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1169,
            "endLine": 1171,
            "startColumn": 54,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1172,
            "endLine": 1174,
            "startColumn": 54,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "advertised=Collections.emptySet();\n",
            "startLine": 1170,
            "endLine": 1170,
            "startColumn": 4,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "advertised=Collections.emptySet();\n",
            "startLine": 1173,
            "endLine": 1173,
            "startColumn": 4,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1171,
            "endLine": 1173,
            "startColumn": 10,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1174,
            "endLine": 1176,
            "startColumn": 10,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "advertised=refIdSet(getAdvertisedOrDefaultRefs().values());\n",
            "startLine": 1172,
            "endLine": 1172,
            "startColumn": 4,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "advertised=refIdSet(getAdvertisedOrDefaultRefs().values());\n",
            "startLine": 1175,
            "endLine": 1175,
            "startColumn": 4,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(req.getSidebandAll())",
            "startLine": 1185,
            "endLine": 1187,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(req.getSidebandAll())",
            "startLine": 1188,
            "endLine": 1190,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.setUsingSideband(true);\n",
            "startLine": 1186,
            "endLine": 1186,
            "startColumn": 4,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.setUsingSideband(true);\n",
            "startLine": 1189,
            "endLine": 1189,
            "startColumn": 4,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.getClientShallowCommits().isEmpty())",
            "startLine": 1213,
            "endLine": 1215,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.getClientShallowCommits().isEmpty())",
            "startLine": 1208,
            "endLine": 1210,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "verifyClientShallow(req.getClientShallowCommits());\n",
            "startLine": 1214,
            "endLine": 1214,
            "startColumn": 4,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "verifyClientShallow(req.getClientShallowCommits());\n",
            "startLine": 1209,
            "endLine": 1209,
            "startColumn": 4,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mayHaveShallow)",
            "startLine": 1216,
            "endLine": 1221,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mayHaveShallow)",
            "startLine": 1211,
            "endLine": 1216,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "computeShallowsAndUnshallows(req,shallowCommit -> shallowCommits.add(shallowCommit),unshallowCommit -> unshallowCommits.add(unshallowCommit),deepenNots);\n",
            "startLine": 1217,
            "endLine": 1220,
            "startColumn": 4,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "computeShallowsAndUnshallows(req,shallowCommit -> shallowCommits.add(shallowCommit),unshallowCommit -> unshallowCommits.add(unshallowCommit),deepenNots);\n",
            "startLine": 1212,
            "endLine": 1215,
            "startColumn": 4,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.getClientShallowCommits().isEmpty())",
            "startLine": 1222,
            "endLine": 1223,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.getClientShallowCommits().isEmpty())",
            "startLine": 1217,
            "endLine": 1218,
            "startColumn": 3,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "walk.assumeShallow(req.getClientShallowCommits());\n",
            "startLine": 1223,
            "endLine": 1223,
            "startColumn": 4,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "walk.assumeShallow(req.getClientShallowCommits());\n",
            "startLine": 1218,
            "endLine": 1218,
            "startColumn": 4,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(req.wasDoneReceived())",
            "startLine": 1225,
            "endLine": 1247,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(req.wasDoneReceived())",
            "startLine": 1220,
            "endLine": 1242,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1225,
            "endLine": 1230,
            "startColumn": 30,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1220,
            "endLine": 1225,
            "startColumn": 30,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "processHaveLines(req.getPeerHas(),ObjectId.zeroId(),new PacketLineOut(NullOutputStream.INSTANCE,false),accumulator,req.wasWaitForDoneReceived() ? Option.WAIT_FOR_DONE : Option.NONE);\n",
            "startLine": 1226,
            "endLine": 1229,
            "startColumn": 4,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "processHaveLines(req.getPeerHas(),ObjectId.zeroId(),new PacketLineOut(NullOutputStream.INSTANCE,false),accumulator,req.wasWaitForDoneReceived() ? Option.WAIT_FOR_DONE : Option.NONE);\n",
            "startLine": 1221,
            "endLine": 1224,
            "startColumn": 4,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1230,
            "endLine": 1247,
            "startColumn": 10,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1225,
            "endLine": 1242,
            "startColumn": 10,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(GitProtocolConstants.SECTION_ACKNOWLEDGMENTS + '\\n');\n",
            "startLine": 1231,
            "endLine": 1232,
            "startColumn": 4,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(GitProtocolConstants.SECTION_ACKNOWLEDGMENTS + '\\n');\n",
            "startLine": 1226,
            "endLine": 1227,
            "startColumn": 4,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(id: req.getPeerHas())",
            "startLine": 1233,
            "endLine": 1237,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(id: req.getPeerHas())",
            "startLine": 1228,
            "endLine": 1232,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(walk.getObjectReader().has(id))",
            "startLine": 1234,
            "endLine": 1236,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(walk.getObjectReader().has(id))",
            "startLine": 1229,
            "endLine": 1231,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"ACK \" + id.getName() + \"\\n\");\n",
            "startLine": 1235,
            "endLine": 1235,
            "startColumn": 6,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"ACK \" + id.getName() + \"\\n\");\n",
            "startLine": 1230,
            "endLine": 1230,
            "startColumn": 6,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "processHaveLines(req.getPeerHas(),ObjectId.zeroId(),new PacketLineOut(NullOutputStream.INSTANCE,false),accumulator,Option.NONE);\n",
            "startLine": 1238,
            "endLine": 1240,
            "startColumn": 4,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "processHaveLines(req.getPeerHas(),ObjectId.zeroId(),new PacketLineOut(NullOutputStream.INSTANCE,false),accumulator,Option.NONE);\n",
            "startLine": 1233,
            "endLine": 1235,
            "startColumn": 4,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.wasWaitForDoneReceived() && okToGiveUp())",
            "startLine": 1241,
            "endLine": 1245,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!req.wasWaitForDoneReceived() && okToGiveUp())",
            "startLine": 1236,
            "endLine": 1240,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1241,
            "endLine": 1243,
            "startColumn": 55,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1236,
            "endLine": 1238,
            "startColumn": 55,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"ready\\n\");\n",
            "startLine": 1242,
            "endLine": 1242,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"ready\\n\");\n",
            "startLine": 1237,
            "endLine": 1237,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(commonBase.isEmpty())",
            "startLine": 1243,
            "endLine": 1245,
            "startColumn": 11,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(commonBase.isEmpty())",
            "startLine": 1238,
            "endLine": 1240,
            "startColumn": 11,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"NAK\\n\");\n",
            "startLine": 1244,
            "endLine": 1244,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"NAK\\n\");\n",
            "startLine": 1239,
            "endLine": 1239,
            "startColumn": 5,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1246,
            "endLine": 1246,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1241,
            "endLine": 1241,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(req.wasDoneReceived() || (!req.wasWaitForDoneReceived() && okToGiveUp()))",
            "startLine": 1249,
            "endLine": 1299,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(req.wasDoneReceived() || (!req.wasWaitForDoneReceived() && okToGiveUp()))",
            "startLine": 1244,
            "endLine": 1294,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1249,
            "endLine": 1296,
            "startColumn": 81,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1244,
            "endLine": 1291,
            "startColumn": 81,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mayHaveShallow)",
            "startLine": 1250,
            "endLine": 1261,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mayHaveShallow)",
            "startLine": 1245,
            "endLine": 1256,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1251,
            "endLine": 1252,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1246,
            "endLine": 1247,
            "startColumn": 5,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1252,
            "endLine": 1252,
            "startColumn": 6,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1247,
            "endLine": 1247,
            "startColumn": 6,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"shallow-info\\n\");\n",
            "startLine": 1253,
            "endLine": 1253,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"shallow-info\\n\");\n",
            "startLine": 1248,
            "endLine": 1248,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(o: shallowCommits)",
            "startLine": 1254,
            "endLine": 1256,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(o: shallowCommits)",
            "startLine": 1249,
            "endLine": 1251,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"shallow \" + o.getName() + '\\n');\n",
            "startLine": 1255,
            "endLine": 1255,
            "startColumn": 6,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"shallow \" + o.getName() + '\\n');\n",
            "startLine": 1250,
            "endLine": 1250,
            "startColumn": 6,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(o: unshallowCommits)",
            "startLine": 1257,
            "endLine": 1259,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(o: unshallowCommits)",
            "startLine": 1252,
            "endLine": 1254,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"unshallow \" + o.getName() + '\\n');\n",
            "startLine": 1258,
            "endLine": 1258,
            "startColumn": 6,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"unshallow \" + o.getName() + '\\n');\n",
            "startLine": 1253,
            "endLine": 1253,
            "startColumn": 6,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1260,
            "endLine": 1260,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1255,
            "endLine": 1255,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!wantedRefs.isEmpty())",
            "startLine": 1263,
            "endLine": 1274,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!wantedRefs.isEmpty())",
            "startLine": 1258,
            "endLine": 1269,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1264,
            "endLine": 1266,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1259,
            "endLine": 1261,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1265,
            "endLine": 1265,
            "startColumn": 6,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1260,
            "endLine": 1260,
            "startColumn": 6,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"wanted-refs\\n\");\n",
            "startLine": 1267,
            "endLine": 1267,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(\"wanted-refs\\n\");\n",
            "startLine": 1262,
            "endLine": 1262,
            "startColumn": 5,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: wantedRefs.entrySet())",
            "startLine": 1268,
            "endLine": 1272,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: wantedRefs.entrySet())",
            "startLine": 1263,
            "endLine": 1267,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1269,
            "endLine": 1272,
            "startColumn": 30,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1264,
            "endLine": 1267,
            "startColumn": 30,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(entry.getValue().getName() + ' ' + entry.getKey()+ '\\n');\n",
            "startLine": 1270,
            "endLine": 1271,
            "startColumn": 6,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(entry.getValue().getName() + ' ' + entry.getKey()+ '\\n');\n",
            "startLine": 1265,
            "endLine": 1266,
            "startColumn": 6,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1273,
            "endLine": 1273,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sectionSent=true;\n",
            "startLine": 1268,
            "endLine": 1268,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1276,
            "endLine": 1277,
            "startColumn": 4,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sectionSent)",
            "startLine": 1271,
            "endLine": 1272,
            "startColumn": 4,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1277,
            "endLine": 1277,
            "startColumn": 5,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeDelim();\n",
            "startLine": 1272,
            "endLine": 1272,
            "startColumn": 5,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!pckOut.isUsingSideband())",
            "startLine": 1278,
            "endLine": 1283,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!pckOut.isUsingSideband())",
            "startLine": 1273,
            "endLine": 1278,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(GitProtocolConstants.SECTION_PACKFILE + '\\n');\n",
            "startLine": 1281,
            "endLine": 1282,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.writeString(GitProtocolConstants.SECTION_PACKFILE + '\\n');\n",
            "startLine": 1276,
            "endLine": 1277,
            "startColumn": 5,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "accumulator.timeNegotiating=Duration.between(negotiateStart,Instant.now()).toMillis();\n",
            "startLine": 1285,
            "endLine": 1286,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "accumulator.timeNegotiating=Duration.between(negotiateStart,Instant.now()).toMillis();\n",
            "startLine": 1280,
            "endLine": 1281,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sendPack(accumulator,req,req.getClientCapabilities().contains(OPTION_INCLUDE_TAG) ? db.getRefDatabase().getRefsByPrefix(R_TAGS) : null,unshallowCommits,deepenNots,pckOut);\n",
            "startLine": 1288,
            "endLine": 1293,
            "startColumn": 4,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sendPack(accumulator,req,req.getClientCapabilities().contains(OPTION_INCLUDE_TAG) ? db.getRefDatabase().getRefsByPrefix(R_TAGS) : null,unshallowCommits,deepenNots,pckOut);\n",
            "startLine": 1283,
            "endLine": 1288,
            "startColumn": 4,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1296,
            "endLine": 1299,
            "startColumn": 10,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1291,
            "endLine": 1294,
            "startColumn": 10,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.end();\n",
            "startLine": 1298,
            "endLine": 1298,
            "startColumn": 4,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pckOut.end();\n",
            "startLine": 1293,
            "endLine": 1293,
            "startColumn": 4,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ref == null)",
            "startLine": 1194,
            "endLine": 1197,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ref == null)",
            "startLine": 2482,
            "endLine": 2485,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new PackProtocolException(MessageFormat.format(JGitText.get().invalidRefName,s));\n",
            "startLine": 1195,
            "endLine": 1196,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new PackProtocolException(MessageFormat.format(JGitText.get().invalidRefName,s));\n",
            "startLine": 2483,
            "endLine": 2484,
            "startColumn": 6,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PackStatistics.Accumulator accumulator=new PackStatistics.Accumulator();\n",
            "startLine": 1175,
            "endLine": 1175,
            "startColumn": 3,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PackStatistics.Accumulator accumulator=new PackStatistics.Accumulator();\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 3,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Instant negotiateStart=Instant.now();\n",
            "startLine": 1176,
            "endLine": 1176,
            "startColumn": 3,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Instant negotiateStart=Instant.now();\n",
            "startLine": 1179,
            "endLine": 1179,
            "startColumn": 3,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ProtocolV2Parser parser=new ProtocolV2Parser(transferConfig);\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 3,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ProtocolV2Parser parser=new ProtocolV2Parser(transferConfig);\n",
            "startLine": 1181,
            "endLine": 1181,
            "startColumn": 3,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FetchV2Request req=parser.parseFetchRequest(pckIn);\n",
            "startLine": 1179,
            "endLine": 1179,
            "startColumn": 3,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FetchV2Request req=parser.parseFetchRequest(pckIn);\n",
            "startLine": 1182,
            "endLine": 1182,
            "startColumn": 3,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentRequest=req;\n",
            "startLine": 1180,
            "endLine": 1180,
            "startColumn": 3,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentRequest=req;\n",
            "startLine": 1183,
            "endLine": 1183,
            "startColumn": 3,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "rawOut.stopBuffering();\n",
            "startLine": 1181,
            "endLine": 1181,
            "startColumn": 3,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "rawOut.stopBuffering();\n",
            "startLine": 1184,
            "endLine": 1184,
            "startColumn": 3,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "protocolV2Hook.onFetch(req);\n",
            "startLine": 1183,
            "endLine": 1183,
            "startColumn": 3,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "protocolV2Hook.onFetch(req);\n",
            "startLine": 1186,
            "endLine": 1186,
            "startColumn": 3,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,ObjectId> wantedRefs=wantedRefs(req);\n",
            "startLine": 1201,
            "endLine": 1201,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<String,ObjectId> wantedRefs=wantedRefs(req);\n",
            "startLine": 1196,
            "endLine": 1196,
            "startColumn": 3,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "req.getWantIds().addAll(wantedRefs.values());\n",
            "startLine": 1203,
            "endLine": 1203,
            "startColumn": 3,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "req.getWantIds().addAll(wantedRefs.values());\n",
            "startLine": 1198,
            "endLine": 1198,
            "startColumn": 3,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "wantIds=req.getWantIds();\n",
            "startLine": 1204,
            "endLine": 1204,
            "startColumn": 3,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "wantIds=req.getWantIds();\n",
            "startLine": 1199,
            "endLine": 1199,
            "startColumn": 3,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean sectionSent=false;\n",
            "startLine": 1206,
            "endLine": 1206,
            "startColumn": 3,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean sectionSent=false;\n",
            "startLine": 1201,
            "endLine": 1201,
            "startColumn": 3,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> shallowCommits=new ArrayList<>();\n",
            "startLine": 1210,
            "endLine": 1210,
            "startColumn": 3,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> shallowCommits=new ArrayList<>();\n",
            "startLine": 1205,
            "endLine": 1205,
            "startColumn": 3,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> unshallowCommits=new ArrayList<>();\n",
            "startLine": 1211,
            "endLine": 1211,
            "startColumn": 3,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> unshallowCommits=new ArrayList<>();\n",
            "startLine": 1206,
            "endLine": 1206,
            "startColumn": 3,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Ref ref=findRef(s);\n",
            "startLine": 1193,
            "endLine": 1193,
            "startColumn": 4,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Ref ref=findRef(s);\n",
            "startLine": 2481,
            "endLine": 2481,
            "startColumn": 5,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "deepenNots.add(ref.getObjectId());\n",
            "startLine": 1198,
            "endLine": 1198,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(ref.getObjectId());\n",
            "startLine": 2486,
            "endLine": 2486,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean mayHaveShallow=req.getDepth() != 0 || req.getDeepenSince() != 0 || !req.getDeepenNotRefs().isEmpty();\n",
            "startLine": 1207,
            "endLine": 1209,
            "startColumn": 3,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean mayHaveShallow=req.getDepth() != 0 || req.getDeepenSince() != 0 || !req.getDeepenNots().isEmpty();\n",
            "startLine": 1202,
            "endLine": 1204,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1192,
            "endLine": 1199,
            "startColumn": 43,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 2480,
            "endLine": 2487,
            "startColumn": 11,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> deepenNots=new ArrayList<>();\n",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 3,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> deepenNots=parseDeepenNots(req.getDeepenNots());\n",
            "startLine": 1194,
            "endLine": 1194,
            "startColumn": 3,
            "endColumn": 68
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> deepenNots=new ArrayList<>();\n",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 3,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ObjectId> result=new ArrayList<>();\n",
            "startLine": 2476,
            "endLine": 2476,
            "startColumn": 3,
            "endColumn": 45
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "deepenNots.add(ref.getObjectId());\n",
            "startLine": 1198,
            "endLine": 1198,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result.add(ObjectId.fromString(s));\n",
            "startLine": 2479,
            "endLine": 2479,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(s: req.getDeepenNotRefs())",
            "startLine": 1192,
            "endLine": 1199,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(s: deepenNots)",
            "startLine": 2477,
            "endLine": 2488,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "559be665296e7587e3ff0425152b631c93b4b56d",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=559be665296e7587e3ff0425152b631c93b4b56d",
      "originalMethod": {
        "container": "org.eclipse.jgit.junit.http.TestRequestLog",
        "type": "Method",
        "name": "handle",
        "filePath": "org.eclipse.jgit.junit.http/src/org/eclipse/jgit/junit/http/TestRequestLog.java",
        "startLine": 75,
        "endLine": 98,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.junit.http.TestRequestLog",
        "type": "Method",
        "name": "handle",
        "filePath": "org.eclipse.jgit.junit.http/src/org/eclipse/jgit/junit/http/TestRequestLog.java",
        "startLine": 75,
        "endLine": 108,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 80,
            "endLine": 97,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 80,
            "endLine": 107,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 95,
            "endLine": 97,
            "startColumn": 13,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 105,
            "endLine": 107,
            "startColumn": 13,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "active.release();\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "active.release();\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 4,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(; ; )",
            "startLine": 81,
            "endLine": 88,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(; ; )",
            "startLine": 81,
            "endLine": 88,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 82,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 82,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "active.acquire();\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 6,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "active.acquire();\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 6,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 6,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 6,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 38,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 38,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 6,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 6,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(DispatcherType.REQUEST.equals(baseRequest.getDispatcherType()))",
            "startLine": 92,
            "endLine": 93,
            "startColumn": 4,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(DispatcherType.REQUEST.equals(baseRequest.getDispatcherType()))",
            "startLine": 91,
            "endLine": 97,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.handle(target,baseRequest,request,response);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.handle(target,baseRequest,request,response);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "events.add(new AccessEvent(request,response));\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 4,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "events.add(event);\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 6,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Synchronized Statement",
            "expression": "synchronized(events)",
            "startLine": 101,
            "endLine": 103,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Synchronized Statement",
            "expression": "synchronized(events)",
            "startLine": 94,
            "endLine": 96,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://git.eclipse.org/r/jgit/jgit.git",
      "sha1": "a1ce9063fbcafbc306f40f6d384d48726de09da4",
      "url": "https://git.eclipse.org/c/jgit/jgit.git/commit/?id=a1ce9063fbcafbc306f40f6d384d48726de09da4",
      "originalMethod": {
        "container": "org.eclipse.jgit.treewalk.WorkingTreeIterator.RootIgnoreNode",
        "type": "Method",
        "name": "load",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "startLine": 1294,
        "endLine": 1318,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.eclipse.jgit.treewalk.WorkingTreeIterator.RootIgnoreNode",
        "type": "Method",
        "name": "load",
        "filePath": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "startLine": 1298,
        "endLine": 1334,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entry != null)",
            "startLine": 1297,
            "endLine": 1303,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entry != null)",
            "startLine": 1325,
            "endLine": 1332,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(path != null)",
            "startLine": 1309,
            "endLine": 1311,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(path != null)",
            "startLine": 1305,
            "endLine": 1307,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FS fs=repository.getFS();\n",
            "startLine": 1305,
            "endLine": 1305,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FS fs=repository.getFS();\n",
            "startLine": 1301,
            "endLine": 1301,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path path=repository.getConfig().getPath(ConfigConstants.CONFIG_CORE_SECTION,null,ConfigConstants.CONFIG_KEY_EXCLUDESFILE,fs,null,null);\n",
            "startLine": 1306,
            "endLine": 1308,
            "startColumn": 4,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path path=repository.getConfig().getPath(ConfigConstants.CONFIG_CORE_SECTION,null,ConfigConstants.CONFIG_KEY_EXCLUDESFILE,fs,null,null);\n",
            "startLine": 1302,
            "endLine": 1304,
            "startColumn": 4,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File exclude=fs.resolve(repository.getDirectory(),Constants.INFO_EXCLUDE);\n",
            "startLine": 1313,
            "endLine": 1314,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File exclude=fs.resolve(repository.getDirectory(),Constants.INFO_EXCLUDE);\n",
            "startLine": 1314,
            "endLine": 1315,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "loadRulesFromFile(r,path.toFile());\n",
            "startLine": 1310,
            "endLine": 1310,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "loadRulesFromFile(coreExclude,path.toFile());\n",
            "startLine": 1306,
            "endLine": 1306,
            "startColumn": 5,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1301,
            "endLine": 1303,
            "startColumn": 11,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1330,
            "endLine": 1332,
            "startColumn": 11,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "loadRulesFromFile(r,exclude);\n",
            "startLine": 1315,
            "endLine": 1315,
            "startColumn": 4,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "loadRulesFromFile(infoExclude,exclude);\n",
            "startLine": 1316,
            "endLine": 1316,
            "startColumn": 4,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1297,
            "endLine": 1301,
            "startColumn": 23,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1325,
            "endLine": 1330,
            "startColumn": 23,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "r=super.load();\n",
            "startLine": 1298,
            "endLine": 1298,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "r=super.load(parentNode);\n",
            "startLine": 1326,
            "endLine": 1326,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return r.getRules().isEmpty() ? null : r;\n",
            "startLine": 1317,
            "endLine": 1317,
            "startColumn": 4,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return r.getRules().isEmpty() ? parentNode : r;\n",
            "startLine": 1333,
            "endLine": 1333,
            "startColumn": 4,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(r == null)",
            "startLine": 1299,
            "endLine": 1300,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(r == null)",
            "startLine": 1327,
            "endLine": 1329,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IgnoreNode r;\n",
            "startLine": 1296,
            "endLine": 1296,
            "startColumn": 4,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IgnoreNodeWithParent r=new IgnoreNodeWithParent(parent);\n",
            "startLine": 1281,
            "endLine": 1281,
            "startColumn": 4,
            "endColumn": 62
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IgnoreNode r;\n",
            "startLine": 1296,
            "endLine": 1296,
            "startColumn": 4,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IgnoreNode r;\n",
            "startLine": 1324,
            "endLine": 1324,
            "startColumn": 4,
            "endColumn": 17
          },
          "developerConfirmation": false
        }
      ]
    }
  ]
}