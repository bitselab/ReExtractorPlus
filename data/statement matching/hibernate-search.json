{
  "results": [
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processCreateUpdateDelete",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 70,
        "endLine": 137,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processCreateUpdateDelete",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 72,
        "endLine": 139,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"another value for the field\");\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"another value for the field\");\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 4,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.merge(entity);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.merge(entity);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 4,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 76,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 78,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  entity.setIndexedField(\"another value for the field\");\n  session.merge(entity);\n}\n);\n",
            "startLine": 83,
            "endLine": 87,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  entity.setIndexedField(\"another value for the field\");\n  session.merge(entity);\n}\n);\n",
            "startLine": 85,
            "endLine": 89,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 89,
            "endLine": 92,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 91,
            "endLine": 94,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 94,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 96,
            "endLine": 106,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 111,
            "endLine": 121,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 113,
            "endLine": 123,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).delete(\"1\");\n",
            "startLine": 127,
            "endLine": 128,
            "startColumn": 3,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).delete(\"1\");\n",
            "startLine": 129,
            "endLine": 130,
            "startColumn": 3,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.awaitUntilNoMoreVisibleEvents(sessionFactory);\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.awaitUntilNoMoreVisibleEvents(sessionFactory);\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,2);\n}\n);\n",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIdAndCreatedValues(session,0,2);\n}\n);\n",
            "startLine": 108,
            "endLine": 111,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,2);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 4,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIdAndCreatedValues(session,0,2);\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDeleteRecreate_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 173,
        "endLine": 232,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDeleteRecreate_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 175,
        "endLine": 234,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 221,
            "endLine": 221,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 227,
            "endLine": 227,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 179,
            "endLine": 184,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 181,
            "endLine": 186,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 186,
            "endLine": 187,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 188,
            "endLine": 189,
            "startColumn": 3,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 191,
            "endLine": 191,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 191,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 193,
            "endLine": 196,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 196,
            "endLine": 201,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 198,
            "endLine": 203,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 203,
            "endLine": 211,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 205,
            "endLine": 213,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 218,
            "endLine": 226,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 220,
            "endLine": 228,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).addOrUpdate(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 228,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).addOrUpdate(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 230,
            "endLine": 231,
            "startColumn": 3,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,1);\n}\n);\n",
            "startLine": 213,
            "endLine": 216,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIdAndCreatedValues(session,0,1);\n}\n);\n",
            "startLine": 215,
            "endLine": 218,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,1);\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 4,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIdAndCreatedValues(session,0,1);\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDifferentRoutesUpdates_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 281,
        "endLine": 357,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDifferentRoutesUpdates_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 283,
        "endLine": 359,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 4,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 4,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 4,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 4,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n",
            "startLine": 305,
            "endLine": 305,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"second\");\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"second\");\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 4,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 4,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"third\");\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"third\");\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 317,
            "endLine": 317,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 318,
            "endLine": 320,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 320,
            "endLine": 322,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 321,
            "endLine": 323,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 323,
            "endLine": 325,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 335,
            "endLine": 335,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 336,
            "endLine": 338,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 338,
            "endLine": 340,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 339,
            "endLine": 341,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 341,
            "endLine": 343,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n  session.persist(entity);\n}\n);\n",
            "startLine": 287,
            "endLine": 290,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n  session.persist(entity);\n}\n);\n",
            "startLine": 289,
            "endLine": 292,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).add(b -> b.identifier(\"1\").routingKey(\"FIRST\").document(StubDocumentNode.document().field(\"text\",\"first\").build()));\n",
            "startLine": 292,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).add(b -> b.identifier(\"1\").routingKey(\"FIRST\").document(StubDocumentNode.document().field(\"text\",\"first\").build()));\n",
            "startLine": 294,
            "endLine": 298,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n  entity.setText(\"second\");\n}\n);\n",
            "startLine": 301,
            "endLine": 305,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n  entity.setText(\"second\");\n}\n);\n",
            "startLine": 303,
            "endLine": 307,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n  entity.setText(\"third\");\n}\n);\n",
            "startLine": 308,
            "endLine": 312,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n  entity.setText(\"third\");\n}\n);\n",
            "startLine": 310,
            "endLine": 314,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n}\n);\n",
            "startLine": 314,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n}\n);\n",
            "startLine": 316,
            "endLine": 326,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n}\n);\n",
            "startLine": 332,
            "endLine": 342,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n}\n);\n",
            "startLine": 334,
            "endLine": 344,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).createAndExecuteFollowingWorksOutOfOrder().delete(b -> b.identifier(\"1\").routingKey(\"FIRST\")).delete(b -> b.identifier(\"1\").routingKey(\"SECOND\"));\n",
            "startLine": 345,
            "endLine": 348,
            "startColumn": 3,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).createAndExecuteFollowingWorksOutOfOrder().delete(b -> b.identifier(\"1\").routingKey(\"FIRST\")).delete(b -> b.identifier(\"1\").routingKey(\"SECOND\"));\n",
            "startLine": 347,
            "endLine": 350,
            "startColumn": 3,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).addOrUpdate(b -> b.identifier(\"1\").routingKey(\"THIRD\").document(StubDocumentNode.document().field(\"text\",\"third\").build()));\n",
            "startLine": 350,
            "endLine": 354,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).addOrUpdate(b -> b.identifier(\"1\").routingKey(\"THIRD\").document(StubDocumentNode.document().field(\"text\",\"third\").build()));\n",
            "startLine": 352,
            "endLine": 356,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 358,
            "endLine": 358,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,1);\n}\n);\n",
            "startLine": 326,
            "endLine": 330,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIdAndCreatedValues(session,0,1);\n}\n);\n",
            "startLine": 328,
            "endLine": 332,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,1);\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 4,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIdAndCreatedValues(session,0,1);\n",
            "startLine": 331,
            "endLine": 331,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingCustomEntityMappingIT",
        "type": "Method",
        "name": "validMappingWithCustomNamesAndSchema",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingCustomEntityMappingIT.java",
        "startLine": 240,
        "endLine": 297,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingCustomEntityMappingIT",
        "type": "Method",
        "name": "validMappingWithCustomNamesAndSchema",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingCustomEntityMappingIT.java",
        "startLine": 243,
        "endLine": 308,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(getDialect() instanceof MySQLDialect)",
            "startLine": 290,
            "endLine": 293,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(getDialect() instanceof MySQLDialect)",
            "startLine": 301,
            "endLine": 304,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 4,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 4,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 269,
            "endLine": 270,
            "startColumn": 4,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 273,
            "endLine": 274,
            "startColumn": 4,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KeysStatementInspector statementInspector=new KeysStatementInspector();\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 3,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KeysStatementInspector statementInspector=new KeysStatementInspector();\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 3,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectAnySchema(IndexedEntity.INDEX);\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectAnySchema(IndexedEntity.INDEX);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 3,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"This test only makes sense if the database supports schemas\",getNameQualifierSupport().supportsSchemas());\n",
            "startLine": 257,
            "endLine": 258,
            "startColumn": 3,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"This test only makes sense if the database supports schemas\",getNameQualifierSupport().supportsSchemas());\n",
            "startLine": 261,
            "endLine": 262,
            "startColumn": 3,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"This test only makes sense if the dialect supports creating schemas\",getDialect().canCreateSchema());\n",
            "startLine": 259,
            "endLine": 260,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"This test only makes sense if the dialect supports creating schemas\",getDialect().canCreateSchema());\n",
            "startLine": 263,
            "endLine": 264,
            "startColumn": 3,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n  backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n}\n);\n",
            "startLine": 263,
            "endLine": 271,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n  backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n}\n);\n",
            "startLine": 267,
            "endLine": 275,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_OUTBOX_EVENT_TABLE_NAME)).isZero();\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 3,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_OUTBOX_EVENT_TABLE_NAME)).isZero();\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 3,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_OUTBOX_EVENT_TABLE_NAME)).isPositive();\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 3,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_OUTBOX_EVENT_TABLE_NAME)).isPositive();\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 3,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_TABLE_NAME)).isZero();\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 3,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_TABLE_NAME)).isZero();\n",
            "startLine": 296,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_AGENT_TABLE_NAME)).isPositive();\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 3,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_AGENT_TABLE_NAME)).isPositive();\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 3,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_SCHEMA)).isPositive();\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 3,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_SCHEMA)).isPositive();\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 3,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_GENERATOR_NAME)).isZero();\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_GENERATOR_NAME)).isZero();\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 3,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_AGENT_GENERATOR_NAME)).isPositive();\n",
            "startLine": 296,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(CUSTOM_AGENT_GENERATOR_NAME)).isPositive();\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 3,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sessionFactory=ormSetupHelper.start().withProperty(\"javax.persistence.create-database-schemas\",true).withProperty(\"hibernate.search.coordination.entity.mapping.agent.schema\",CUSTOM_SCHEMA).withProperty(\"hibernate.search.coordination.entity.mapping.agent.generator\",CUSTOM_AGENT_GENERATOR_NAME).withProperty(\"hibernate.search.coordination.entity.mapping.agent.table\",CUSTOM_AGENT_TABLE_NAME).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.schema\",CUSTOM_SCHEMA).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.table\",CUSTOM_OUTBOX_EVENT_TABLE_NAME).withProperty(\"hibernate.session_factory.statement_inspector\",statementInspector).setup(IndexedEntity.class);\n",
            "startLine": 245,
            "endLine": 254,
            "startColumn": 3,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sessionFactory=ormSetupHelper.start().withProperty(\"hibernate.search.coordination.outbox_event_finder.provider\",outboxEventFinder.provider()).withProperty(\"javax.persistence.create-database-schemas\",true).withProperty(\"hibernate.search.coordination.entity.mapping.agent.schema\",CUSTOM_SCHEMA).withProperty(\"hibernate.search.coordination.entity.mapping.agent.generator\",CUSTOM_AGENT_GENERATOR_NAME).withProperty(\"hibernate.search.coordination.entity.mapping.agent.table\",CUSTOM_AGENT_TABLE_NAME).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.schema\",CUSTOM_SCHEMA).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.table\",CUSTOM_OUTBOX_EVENT_TABLE_NAME).withProperty(\"hibernate.session_factory.statement_inspector\",statementInspector).setup(IndexedEntity.class);\n",
            "startLine": 248,
            "endLine": 258,
            "startColumn": 3,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  List<OutboxEvent> events=new FilteringOutboxEventFinder().findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).isEqualTo(Arrays.asList(4));\n}\n);\n",
            "startLine": 272,
            "endLine": 280,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "await().untilAsserted(() -> {\n  with(sessionFactory).runInTransaction(session -> {\n    List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n    assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).contains(4);\n  }\n);\n}\n);\n",
            "startLine": 276,
            "endLine": 286,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=new FilteringOutboxEventFinder().findOutboxEventsNoFilter(session);\n",
            "startLine": 274,
            "endLine": 274,
            "startColumn": 4,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 5,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).isEqualTo(Arrays.asList(4));\n",
            "startLine": 275,
            "endLine": 279,
            "startColumn": 4,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).contains(4);\n",
            "startLine": 280,
            "endLine": 284,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingCustomEntityMappingIT",
        "type": "Method",
        "name": "validMappingWithCustomUuidGenerator",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingCustomEntityMappingIT.java",
        "startLine": 299,
        "endLine": 337,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingCustomEntityMappingIT",
        "type": "Method",
        "name": "validMappingWithCustomUuidGenerator",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingCustomEntityMappingIT.java",
        "startLine": 310,
        "endLine": 355,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 327,
            "endLine": 327,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 317,
            "endLine": 317,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 319,
            "endLine": 320,
            "startColumn": 4,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 331,
            "endLine": 332,
            "startColumn": 4,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KeysStatementInspector statementInspector=new KeysStatementInspector();\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 3,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KeysStatementInspector statementInspector=new KeysStatementInspector();\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 3,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectAnySchema(IndexedEntity.INDEX);\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectAnySchema(IndexedEntity.INDEX);\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 3,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n  backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n}\n);\n",
            "startLine": 313,
            "endLine": 321,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n  backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",f -> f.field(\"indexedField\",\"value for the field\"));\n}\n);\n",
            "startLine": 325,
            "endLine": 333,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_OUTBOX_EVENT_TABLE_NAME)).isPositive();\n",
            "startLine": 335,
            "endLine": 335,
            "startColumn": 3,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_OUTBOX_EVENT_TABLE_NAME)).isPositive();\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 3,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_TABLE_NAME)).isPositive();\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(statementInspector.countByKey(ORIGINAL_AGENT_TABLE_NAME)).isPositive();\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 3,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sessionFactory=ormSetupHelper.start().withProperty(\"javax.persistence.create-database-schemas\",true).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.uuid_gen_strategy\",\"time\").withProperty(\"hibernate.session_factory.statement_inspector\",statementInspector).setup(IndexedEntity.class);\n",
            "startLine": 304,
            "endLine": 309,
            "startColumn": 3,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sessionFactory=ormSetupHelper.start().withProperty(\"hibernate.search.coordination.outbox_event_finder.provider\",outboxEventFinder.provider()).withProperty(\"javax.persistence.create-database-schemas\",true).withProperty(\"hibernate.search.coordination.entity.mapping.outboxevent.uuid_gen_strategy\",\"time\").withProperty(\"hibernate.session_factory.statement_inspector\",statementInspector).setup(IndexedEntity.class);\n",
            "startLine": 315,
            "endLine": 321,
            "startColumn": 3,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).isEqualTo(Arrays.asList(1));\n",
            "startLine": 326,
            "endLine": 330,
            "startColumn": 4,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).contains(1);\n",
            "startLine": 339,
            "endLine": 343,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  List<OutboxEvent> events=new FilteringOutboxEventFinder().findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).isEqualTo(Arrays.asList(1));\n}\n);\n",
            "startLine": 323,
            "endLine": 331,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "await().untilAsserted(() -> {\n  with(sessionFactory).runInTransaction(session -> {\n    List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n    assertThat(events).hasSize(1).extracting(OutboxEvent::getId).extracting(UUID::version).contains(1);\n  }\n);\n}\n);\n",
            "startLine": 335,
            "endLine": 345,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=new FilteringOutboxEventFinder().findOutboxEventsNoFilter(session);\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 4,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 5,
            "endColumn": 86
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "c748480a71a5e3e5e93061419b78b3f7dea66175",
      "url": "https://github.com/hibernate/hibernate-search/commit/c748480a71a5e3e5e93061419b78b3f7dea66175",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "swapOutboxTableRowIds",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 359,
        "endLine": 409,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "swapOutboxTableRowIdAndCreatedValues",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 361,
        "endLine": 396,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 360,
            "endLine": 408,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 362,
            "endLine": 395,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(exception)",
            "startLine": 406,
            "endLine": 408,
            "startColumn": 34,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(exception)",
            "startLine": 393,
            "endLine": 395,
            "startColumn": 34,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected SQL exception: \" + exception);\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 4,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected SQL exception: \" + exception);\n",
            "startLine": 394,
            "endLine": 394,
            "startColumn": 4,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(javaVersionString != null && !javaVersionString.trim().isEmpty())",
            "startLine": 367,
            "endLine": 374,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(javaVersionString != null && !javaVersionString.trim().isEmpty())",
            "startLine": 369,
            "endLine": 376,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oldJavaVersion=javaVersionString.startsWith(\"1.\");\n",
            "startLine": 368,
            "endLine": 368,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oldJavaVersion=javaVersionString.startsWith(\"1.\");\n",
            "startLine": 370,
            "endLine": 370,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"The H2 actual maximum available precision depends on operating system and JVM and can be 3 (milliseconds) or higher. \" + \"Higher precision is not available before Java 9.\",!(oldJavaVersion && env.getDialect() instanceof H2Dialect));\n",
            "startLine": 369,
            "endLine": 373,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"The H2 actual maximum available precision depends on operating system and JVM and can be 3 (milliseconds) or higher. \" + \"Higher precision is not available before Java 9.\",!(oldJavaVersion && env.getDialect() instanceof H2Dialect));\n",
            "startLine": 371,
            "endLine": 375,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(resultSet.next())",
            "startLine": 380,
            "endLine": 382,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(resultSet.next())",
            "startLine": 382,
            "endLine": 385,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SharedSessionContractImplementor implementor=session.unwrap(SharedSessionContractImplementor.class);\n",
            "startLine": 361,
            "endLine": 361,
            "startColumn": 4,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SharedSessionContractImplementor implementor=session.unwrap(SharedSessionContractImplementor.class);\n",
            "startLine": 363,
            "endLine": 363,
            "startColumn": 4,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcCoordinator jdbc=implementor.getJdbcCoordinator();\n",
            "startLine": 363,
            "endLine": 363,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcCoordinator jdbc=implementor.getJdbcCoordinator();\n",
            "startLine": 365,
            "endLine": 365,
            "startColumn": 4,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcEnvironment env=implementor.getJdbcServices().getJdbcEnvironment();\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 4,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcEnvironment env=implementor.getJdbcServices().getJdbcEnvironment();\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 4,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String javaVersionString=System.getProperty(\"java.version\");\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 4,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String javaVersionString=System.getProperty(\"java.version\");\n",
            "startLine": 368,
            "endLine": 368,
            "startColumn": 4,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> uuids=new ArrayList<>();\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 4,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> uuids=new ArrayList<>();\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 4,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResultSet resultSet=statement.executeQuery();\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResultSet resultSet=statement.executeQuery();\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 5,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "uuids.add(resultSet.getString(1));\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 6,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "uuids.add(resultSet.getString(1));\n",
            "startLine": 383,
            "endLine": 383,
            "startColumn": 6,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 389,
            "endLine": 389,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 4,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement statement=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_SELECT_ORDERED_IDS))",
            "startLine": 377,
            "endLine": 383,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement statement=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_SELECT_ORDERED_IDS_AND_CREATED_TIME))",
            "startLine": 380,
            "endLine": 386,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 396,
            "endLine": 396,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 4,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,UUID.randomUUID().toString());\n",
            "startLine": 386,
            "endLine": 386,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String temporaryUuid=UUID.randomUUID().toString();\n",
            "startLine": 388,
            "endLine": 388,
            "startColumn": 4,
            "endColumn": 56
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 385,
            "endLine": 390,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID_AND_TIME))",
            "startLine": 400,
            "endLine": 406,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,uuids.get(row2));\n",
            "startLine": 393,
            "endLine": 393,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,newId);\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(2,uuids.get(row1));\n",
            "startLine": 394,
            "endLine": 394,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(3,rowToUpdateId);\n",
            "startLine": 403,
            "endLine": 403,
            "startColumn": 4,
            "endColumn": 37
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 392,
            "endLine": 397,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID_AND_TIME))",
            "startLine": 400,
            "endLine": 406,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,uuids.get(row1));\n",
            "startLine": 400,
            "endLine": 400,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,newId);\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 403,
            "endLine": 403,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 4,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(2,uuids.get(row2));\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(3,rowToUpdateId);\n",
            "startLine": 403,
            "endLine": 403,
            "startColumn": 4,
            "endColumn": 37
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 399,
            "endLine": 404,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID_AND_TIME))",
            "startLine": 400,
            "endLine": 406,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "url": "https://github.com/hibernate/hibernate-search/commit/f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processCreateUpdateDelete",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 65,
        "endLine": 134,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processCreateUpdateDelete",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 70,
        "endLine": 137,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"another value for the field\");\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"another value for the field\");\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 4,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.merge(entity);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 4,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.merge(entity);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(3);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 71,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 76,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  entity.setIndexedField(\"another value for the field\");\n  session.merge(entity);\n}\n);\n",
            "startLine": 78,
            "endLine": 82,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  entity.setIndexedField(\"another value for the field\");\n  session.merge(entity);\n}\n);\n",
            "startLine": 83,
            "endLine": 87,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 84,
            "endLine": 87,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 89,
            "endLine": 92,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 89,
            "endLine": 99,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 94,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 108,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(3);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(2),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 111,
            "endLine": 121,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).delete(\"1\");\n",
            "startLine": 124,
            "endLine": 125,
            "startColumn": 3,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).delete(\"1\");\n",
            "startLine": 127,
            "endLine": 128,
            "startColumn": 3,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.awaitUntilNoMoreVisibleEvents(sessionFactory);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.awaitUntilNoMoreVisibleEvents(sessionFactory);\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  updateOutboxTableRow(session,1,4);\n  updateOutboxTableRow(session,3,1);\n  updateOutboxTableRow(session,4,3);\n}\n);\n",
            "startLine": 101,
            "endLine": 106,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,2);\n}\n);\n",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "updateOutboxTableRow(session,1,4);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,2);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 4,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "url": "https://github.com/hibernate/hibernate-search/commit/f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDeleteRecreate_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 170,
        "endLine": 231,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDeleteRecreate_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 173,
        "endLine": 232,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 177,
            "endLine": 177,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 4,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.remove(entity);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexedEntity entity=new IndexedEntity();\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 4,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setId(id);\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 4,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setIndexedField(\"value for the field\");\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 4,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 4,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 3,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int id=1;\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 3,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 176,
            "endLine": 181,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 179,
            "endLine": 184,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 183,
            "endLine": 184,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).add(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 186,
            "endLine": 187,
            "startColumn": 3,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 188,
            "endLine": 191,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=session.getReference(IndexedEntity.class,id);\n  session.remove(entity);\n}\n);\n",
            "startLine": 191,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 193,
            "endLine": 198,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  IndexedEntity entity=new IndexedEntity();\n  entity.setId(id);\n  entity.setIndexedField(\"value for the field\");\n  session.persist(entity);\n}\n);\n",
            "startLine": 196,
            "endLine": 201,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 200,
            "endLine": 208,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 203,
            "endLine": 211,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 217,
            "endLine": 225,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),IndexedEntity.INDEX,\"1\",null);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),IndexedEntity.INDEX,\"1\",null);\n}\n);\n",
            "startLine": 218,
            "endLine": 226,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).addOrUpdate(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 227,
            "endLine": 228,
            "startColumn": 3,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(IndexedEntity.INDEX).addOrUpdate(\"1\",b -> b.field(\"indexedField\",\"value for the field\"));\n",
            "startLine": 228,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  updateOutboxTableRow(session,2,4);\n  updateOutboxTableRow(session,3,2);\n  updateOutboxTableRow(session,4,3);\n}\n);\n",
            "startLine": 210,
            "endLine": 215,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,1);\n}\n);\n",
            "startLine": 213,
            "endLine": 216,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "updateOutboxTableRow(session,2,4);\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 4,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,1);\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 4,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "url": "https://github.com/hibernate/hibernate-search/commit/f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDifferentRoutesUpdates_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 280,
        "endLine": 358,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "processDifferentRoutesUpdates_outOfOrder",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 281,
        "endLine": 357,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 4,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "session.persist(entity);\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 4,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 4,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 4,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"second\");\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"second\");\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 4,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 4,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"third\");\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "entity.setText(\"third\");\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 317,
            "endLine": 319,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 318,
            "endLine": 320,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 320,
            "endLine": 322,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 321,
            "endLine": 323,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 4,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 335,
            "endLine": 335,
            "startColumn": 4,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(events).hasSize(2);\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 4,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 337,
            "endLine": 339,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n",
            "startLine": 336,
            "endLine": 338,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 340,
            "endLine": 342,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n",
            "startLine": 339,
            "endLine": 341,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n  session.persist(entity);\n}\n);\n",
            "startLine": 286,
            "endLine": 289,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=new RoutedIndexedEntity(1,\"first\",RoutedIndexedEntity.Status.FIRST);\n  session.persist(entity);\n}\n);\n",
            "startLine": 287,
            "endLine": 290,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).add(b -> b.identifier(\"1\").routingKey(\"FIRST\").document(StubDocumentNode.document().field(\"text\",\"first\").build()));\n",
            "startLine": 291,
            "endLine": 295,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).add(b -> b.identifier(\"1\").routingKey(\"FIRST\").document(StubDocumentNode.document().field(\"text\",\"first\").build()));\n",
            "startLine": 292,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 296,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n  entity.setText(\"second\");\n}\n);\n",
            "startLine": 300,
            "endLine": 304,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.SECOND);\n  entity.setText(\"second\");\n}\n);\n",
            "startLine": 301,
            "endLine": 305,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n  entity.setText(\"third\");\n}\n);\n",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  RoutedIndexedEntity entity=session.find(RoutedIndexedEntity.class,1);\n  entity.setStatus(RoutedIndexedEntity.Status.THIRD);\n  entity.setText(\"third\");\n}\n);\n",
            "startLine": 308,
            "endLine": 312,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n}\n);\n",
            "startLine": 313,
            "endLine": 323,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n}\n);\n",
            "startLine": 314,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n}\n);\n",
            "startLine": 333,
            "endLine": 343,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runNoTransaction(session -> {\n  List<OutboxEvent> events=outboxEventFinder.findOutboxEventsNoFilter(session);\n  assertThat(events).hasSize(2);\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(0),RoutedIndexedEntity.NAME,\"1\",\"THIRD\",\"SECOND\");\n  OutboxPollingAutomaticIndexingEventSendingIT.verifyOutboxEntry(events.get(1),RoutedIndexedEntity.NAME,\"1\",\"SECOND\",\"FIRST\");\n}\n);\n",
            "startLine": 332,
            "endLine": 342,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).createAndExecuteFollowingWorksOutOfOrder().delete(b -> b.identifier(\"1\").routingKey(\"FIRST\")).delete(b -> b.identifier(\"1\").routingKey(\"SECOND\"));\n",
            "startLine": 346,
            "endLine": 349,
            "startColumn": 3,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).createAndExecuteFollowingWorksOutOfOrder().delete(b -> b.identifier(\"1\").routingKey(\"FIRST\")).delete(b -> b.identifier(\"1\").routingKey(\"SECOND\"));\n",
            "startLine": 345,
            "endLine": 348,
            "startColumn": 3,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).addOrUpdate(b -> b.identifier(\"1\").routingKey(\"THIRD\").document(StubDocumentNode.document().field(\"text\",\"third\").build()));\n",
            "startLine": 351,
            "endLine": 355,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.expectWorks(RoutedIndexedEntity.NAME).addOrUpdate(b -> b.identifier(\"1\").routingKey(\"THIRD\").document(StubDocumentNode.document().field(\"text\",\"third\").build()));\n",
            "startLine": 350,
            "endLine": 354,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outboxEventFinder.showAllEventsUpToNow(sessionFactory);\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backendMock.verifyExpectationsMet();\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  updateOutboxTableRow(session,2,4);\n  updateOutboxTableRow(session,3,2);\n  updateOutboxTableRow(session,4,3);\n}\n);\n",
            "startLine": 325,
            "endLine": 331,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "with(sessionFactory).runInTransaction(session -> {\n  swapOutboxTableRowIds(session,0,1);\n}\n);\n",
            "startLine": 326,
            "endLine": 330,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "updateOutboxTableRow(session,2,4);\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 4,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "swapOutboxTableRowIds(session,0,1);\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 4,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "url": "https://github.com/hibernate/hibernate-search/commit/f292fa7b4db85f1c036f6b8bd1425c76028b9aef",
      "originalMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "updateOutboxTableRow",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 360,
        "endLine": 387,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingOutOfOrderIdsIT",
        "type": "Method",
        "name": "swapOutboxTableRowIds",
        "filePath": "integrationtest/mapper/orm-coordination-outbox-polling/src/test/java/org/hibernate/search/integrationtest/mapper/orm/coordination/outboxpolling/automaticindexing/OutboxPollingAutomaticIndexingOutOfOrderIdsIT.java",
        "startLine": 359,
        "endLine": 409,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 361,
            "endLine": 386,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 360,
            "endLine": 408,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(exception)",
            "startLine": 384,
            "endLine": 386,
            "startColumn": 34,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(exception)",
            "startLine": 406,
            "endLine": 408,
            "startColumn": 34,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected SQL exception: \" + exception);\n",
            "startLine": 385,
            "endLine": 385,
            "startColumn": 4,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected SQL exception: \" + exception);\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 4,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(javaVersionString != null && !javaVersionString.trim().isEmpty())",
            "startLine": 368,
            "endLine": 375,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(javaVersionString != null && !javaVersionString.trim().isEmpty())",
            "startLine": 367,
            "endLine": 374,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oldJavaVersion=javaVersionString.startsWith(\"1.\");\n",
            "startLine": 369,
            "endLine": 369,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean oldJavaVersion=javaVersionString.startsWith(\"1.\");\n",
            "startLine": 368,
            "endLine": 368,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"The H2 actual maximum available precision depends on operating system and JVM and can be 3 (milliseconds) or higher. \" + \"Higher precision is not available before Java 9.\",!(oldJavaVersion && env.getDialect() instanceof H2Dialect));\n",
            "startLine": 370,
            "endLine": 374,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(\"The H2 actual maximum available precision depends on operating system and JVM and can be 3 (milliseconds) or higher. \" + \"Higher precision is not available before Java 9.\",!(oldJavaVersion && env.getDialect() instanceof H2Dialect));\n",
            "startLine": 369,
            "endLine": 373,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SharedSessionContractImplementor implementor=session.unwrap(SharedSessionContractImplementor.class);\n",
            "startLine": 362,
            "endLine": 362,
            "startColumn": 4,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SharedSessionContractImplementor implementor=session.unwrap(SharedSessionContractImplementor.class);\n",
            "startLine": 361,
            "endLine": 361,
            "startColumn": 4,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcCoordinator jdbc=implementor.getJdbcCoordinator();\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcCoordinator jdbc=implementor.getJdbcCoordinator();\n",
            "startLine": 363,
            "endLine": 363,
            "startColumn": 4,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcEnvironment env=implementor.getJdbcServices().getJdbcEnvironment();\n",
            "startLine": 365,
            "endLine": 365,
            "startColumn": 4,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JdbcEnvironment env=implementor.getJdbcServices().getJdbcEnvironment();\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 4,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String javaVersionString=System.getProperty(\"java.version\");\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 4,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String javaVersionString=System.getProperty(\"java.version\");\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 4,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbc.getResultSetReturn().executeUpdate(ps);\n",
            "startLine": 389,
            "endLine": 389,
            "startColumn": 5,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setInt(1,newId);\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(1,uuids.get(row2));\n",
            "startLine": 393,
            "endLine": 393,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 377,
            "endLine": 382,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 392,
            "endLine": 397,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setInt(2,oldId);\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(2,uuids.get(row1));\n",
            "startLine": 394,
            "endLine": 394,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setInt(2,oldId);\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ps.setString(2,uuids.get(row2));\n",
            "startLine": 387,
            "endLine": 387,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 377,
            "endLine": 382,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(PreparedStatement ps=jdbc.getStatementPreparer().prepareStatement(OUTBOX_EVENT_UPDATE_ID))",
            "startLine": 385,
            "endLine": 390,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "2773f906cdccfacabec67ea02c02f16e0a197efb",
      "url": "https://github.com/hibernate/hibernate-search/commit/2773f906cdccfacabec67ea02c02f16e0a197efb",
      "originalMethod": {
        "container": "org.hibernate.search.util.common.jar.impl.JarUtils",
        "type": "Method",
        "name": "jarOrDirectoryPath",
        "filePath": "util/common/src/main/java/org/hibernate/search/util/common/jar/impl/JarUtils.java",
        "startLine": 63,
        "endLine": 79,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.util.common.jar.impl.JarUtils",
        "type": "Method",
        "name": "codeSourceLocation",
        "filePath": "util/common/src/main/java/org/hibernate/search/util/common/jar/impl/JarUtils.java",
        "startLine": 53,
        "endLine": 63,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(codeSource == null)",
            "startLine": 65,
            "endLine": 67,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(codeSource == null)",
            "startLine": 55,
            "endLine": 57,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 4,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 4,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 69,
            "endLine": 71,
            "startColumn": 61,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 59,
            "endLine": 61,
            "startColumn": 22,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 4,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 4,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=codeSource.getLocation();\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=codeSource.getLocation();\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CodeSource codeSource=classFromJar.getProtectionDomain().getCodeSource();\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 3,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "java.security.CodeSource codeSource=classFromJar.getProtectionDomain().getCodeSource();\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 3,
            "endColumn": 92
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(path);\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(url);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 3,
            "endColumn": 29
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "2773f906cdccfacabec67ea02c02f16e0a197efb",
      "url": "https://github.com/hibernate/hibernate-search/commit/2773f906cdccfacabec67ea02c02f16e0a197efb",
      "originalMethod": {
        "container": "org.hibernate.search.util.common.jar.impl.JandexUtils",
        "type": "Method",
        "name": "readOrBuildIndex",
        "filePath": "util/common/src/main/java/org/hibernate/search/util/common/jar/impl/JandexUtils.java",
        "startLine": 100,
        "endLine": 117,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.util.common.jar.impl.JandexUtils",
        "type": "Method",
        "name": "readOrBuildIndex",
        "filePath": "util/common/src/main/java/org/hibernate/search/util/common/jar/impl/JandexUtils.java",
        "startLine": 99,
        "endLine": 115,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(readIndex.isPresent())",
            "startLine": 104,
            "endLine": 106,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(readIndex.isPresent())",
            "startLine": 102,
            "endLine": 104,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return readIndex.get();\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return readIndex.get();\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 107,
            "endLine": 112,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 105,
            "endLine": 110,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return doBuildJandexIndex(jarRoot);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return doBuildJandexIndex(codeSource.classesPathOrFail());\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.errorBuildingJandexIndex(jarOrDirectoryPath,e.getMessage(),e);\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 5,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.errorBuildingJandexIndex(codeSourceLocation,e.getMessage(),e);\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 110,
            "endLine": 112,
            "startColumn": 45,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 108,
            "endLine": 110,
            "startColumn": 45,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<Index> readIndex=doReadIndex(jarRoot);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<Index> readIndex=doReadIndex(codeSource);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.errorAccessingJandexIndex(jarOrDirectoryPath,e.getMessage(),e);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 4,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.errorAccessingJandexIndex(codeSourceLocation,e.getMessage(),e);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 4,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(FileSystem jarFs=JarUtils.openJarOrDirectory(jarOrDirectoryPath))",
            "startLine": 101,
            "endLine": 116,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(CodeSource codeSource=new CodeSource(codeSourceLocation))",
            "startLine": 100,
            "endLine": 114,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 114,
            "endLine": 116,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 112,
            "endLine": 114,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "24d8ade9aa9bba52226d5ec2ff17da5711a09a93",
      "url": "https://github.com/hibernate/hibernate-search/commit/24d8ade9aa9bba52226d5ec2ff17da5711a09a93",
      "originalMethod": {
        "container": "org.hibernate.search.engine.backend.orchestration.spi.BatchingExecutor",
        "type": "Method",
        "name": "submit",
        "filePath": "engine/src/main/java/org/hibernate/search/engine/backend/orchestration/spi/BatchingExecutor.java",
        "startLine": 103,
        "endLine": 118,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.engine.backend.orchestration.spi.BatchingExecutor",
        "type": "Method",
        "name": "submit",
        "filePath": "engine/src/main/java/org/hibernate/search/engine/backend/orchestration/spi/BatchingExecutor.java",
        "startLine": 104,
        "endLine": 110,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(processingTask == null)",
            "startLine": 111,
            "endLine": 115,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(processingTask == null)",
            "startLine": 120,
            "endLine": 124,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailure(\"Attempt to submit a work to executor '\" + name + \"', which is stopped.\");\n",
            "startLine": 112,
            "endLine": 114,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailure(\"Attempt to submit a work to executor '\" + name + \"', which is stopped.\");\n",
            "startLine": 121,
            "endLine": 123,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "processingTask.ensureScheduled();\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 3,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "processingTask.ensureScheduled();\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 3,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "workQueue.put(work);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 3,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "operationSubmitter.submitToQueue(workQueue,work);\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 3,
            "endColumn": 55
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "52b228c90d4f54fb31b2dd721a73bd6c091307a8",
      "url": "https://github.com/hibernate/hibernate-search/commit/52b228c90d4f54fb31b2dd721a73bd6c091307a8",
      "originalMethod": {
        "container": "org.hibernate.search.mapper.orm.model.impl.HibernateOrmPathInterpreter",
        "type": "Method",
        "name": "value",
        "filePath": "mapper/orm/src/main/java/org/hibernate/search/mapper/orm/model/impl/HibernateOrmPathInterpreter.java",
        "startLine": 231,
        "endLine": 301,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.mapper.orm.model.impl.HibernateOrmPathInterpreter",
        "type": "Method",
        "name": "value",
        "filePath": "mapper/orm/src/main/java/org/hibernate/search/mapper/orm/model/impl/HibernateOrmPathInterpreter.java",
        "startLine": 317,
        "endLine": 395,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(context.found)",
            "startLine": 233,
            "endLine": 236,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(context.found)",
            "startLine": 319,
            "endLine": 322,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(extractorPath.isDefault())",
            "startLine": 243,
            "endLine": 248,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(extractorPath.isDefault())",
            "startLine": 329,
            "endLine": 334,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailure(\"Expected a non-default extractor path as per the \" + PojoPathDefinitionProvider.class.getSimpleName() + \" contract\");\n",
            "startLine": 244,
            "endLine": 247,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AssertionFailure(\"Expected a non-default extractor path as per the \" + PojoPathDefinitionProvider.class.getSimpleName() + \" contract\");\n",
            "startLine": 330,
            "endLine": 333,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Component.class.isAssignableFrom(valueClass))",
            "startLine": 252,
            "endLine": 300,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Component.class.isAssignableFrom(valueClass))",
            "startLine": 338,
            "endLine": 394,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!extractorPath.isEmpty())",
            "startLine": 253,
            "endLine": 255,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!extractorPath.isEmpty())",
            "startLine": 339,
            "endLine": 341,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isWholePath)",
            "startLine": 256,
            "endLine": 264,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isWholePath)",
            "startLine": 342,
            "endLine": 353,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(SimpleValue.class.equals(valueClass))",
            "startLine": 266,
            "endLine": 300,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(SimpleValue.class.equals(valueClass))",
            "startLine": 355,
            "endLine": 394,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(SimpleValue.class.isAssignableFrom(valueClass))",
            "startLine": 271,
            "endLine": 300,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(SimpleValue.class.isAssignableFrom(valueClass))",
            "startLine": 363,
            "endLine": 394,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(org.hibernate.mapping.Collection.class.isAssignableFrom(valueClass))",
            "startLine": 282,
            "endLine": 300,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(org.hibernate.mapping.Collection.class.isAssignableFrom(valueClass))",
            "startLine": 376,
            "endLine": 394,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 282,
            "endLine": 297,
            "startColumn": 85,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 376,
            "endLine": 391,
            "startColumn": 85,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(extractorPath.isEmpty() && !isWholePath)",
            "startLine": 283,
            "endLine": 289,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(extractorPath.isEmpty() && !isWholePath)",
            "startLine": 377,
            "endLine": 383,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> extractorNames=extractorPath.explicitExtractorNames();\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 4,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> extractorNames=extractorPath.explicitExtractorNames();\n",
            "startLine": 385,
            "endLine": 385,
            "startColumn": 4,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Iterator<String> extractorNameIterator=extractorNames.iterator();\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 4,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Iterator<String> extractorNameIterator=extractorNames.iterator();\n",
            "startLine": 386,
            "endLine": 386,
            "startColumn": 4,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return resolveExtractorPath(context,path,isWholePath,propertyNode,baseValue,extractorNameIterator);\n",
            "startLine": 294,
            "endLine": 296,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return resolveExtractorPath(context,path,isWholePath,propertyNode,baseValue,extractorNameIterator);\n",
            "startLine": 388,
            "endLine": 390,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 298,
            "endLine": 300,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 392,
            "endLine": 394,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 4,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw log.unknownPathForDirtyChecking(path,null);\n",
            "startLine": 393,
            "endLine": 393,
            "startColumn": 4,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isWholePath && isSingleValuedAssociation(valueClass))",
            "startLine": 272,
            "endLine": 280,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isWholePath && isSingleValuedAssociation(valueClass))",
            "startLine": 364,
            "endLine": 374,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 278,
            "endLine": 280,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 372,
            "endLine": 374,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return baseValue;\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return baseValue;\n",
            "startLine": 373,
            "endLine": 373,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean isWholePath=context.wholePath.equals(path);\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 3,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean isWholePath=context.wholePath.equals(path);\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value baseValue=property.getValue();\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 3,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value baseValue=property.getValue();\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 3,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PojoModelPathPropertyNode propertyNode=path.parent();\n",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 3,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PojoModelPathPropertyNode propertyNode=path.parent();\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 3,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContainerExtractorPath extractorPath=path.extractorPath();\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 3,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContainerExtractorPath extractorPath=path.extractorPath();\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 3,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<? extends Value> valueClass=baseValue.getClass();\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<? extends Value> valueClass=baseValue.getClass();\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 3,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 348,
            "endLine": 348,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return baseValue;\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return baseValue;\n",
            "startLine": 352,
            "endLine": 352,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 361,
            "endLine": 361,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 370,
            "endLine": 370,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 272,
            "endLine": 277,
            "startColumn": 66,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 364,
            "endLine": 371,
            "startColumn": 66,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 252,
            "endLine": 265,
            "startColumn": 57,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 338,
            "endLine": 354,
            "startColumn": 57,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 262,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 350,
            "endLine": 353,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 266,
            "endLine": 270,
            "startColumn": 54,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 355,
            "endLine": 362,
            "startColumn": 54,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 271,
            "endLine": 281,
            "startColumn": 64,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 363,
            "endLine": 375,
            "startColumn": 64,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "context.found(propertyNode.toPropertyString());\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 4,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "context.resolvedStringRepresentation(propertyNode.toPropertyString());\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 4,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "context.found(propertyNode.toPropertyString());\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "context.resolvedStringRepresentation(propertyNode.toPropertyString());\n",
            "startLine": 344,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 256,
            "endLine": 261,
            "startColumn": 23,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 342,
            "endLine": 349,
            "startColumn": 23,
            "endColumn": 5
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "context.found(propertyNode.toPropertyString());\n",
            "startLine": 274,
            "endLine": 274,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String stringRepresentationAsProperty=propertyNode.toPropertyString();\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 5,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-search.git",
      "sha1": "52b228c90d4f54fb31b2dd721a73bd6c091307a8",
      "url": "https://github.com/hibernate/hibernate-search/commit/52b228c90d4f54fb31b2dd721a73bd6c091307a8",
      "originalMethod": {
        "container": "org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmEntityTypeMetadataContributor",
        "type": "Method",
        "name": "HibernateOrmEntityTypeMetadataContributor",
        "filePath": "mapper/orm/src/main/java/org/hibernate/search/mapper/orm/mapping/impl/HibernateOrmEntityTypeMetadataContributor.java",
        "startLine": 23,
        "endLine": 28,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmEntityTypeMetadataContributor",
        "type": "Method",
        "name": "HibernateOrmEntityTypeMetadataContributor",
        "filePath": "mapper/orm/src/main/java/org/hibernate/search/mapper/orm/mapping/impl/HibernateOrmEntityTypeMetadataContributor.java",
        "startLine": 23,
        "endLine": 28,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.persistentClass=persistentClass;\n",
            "startLine": 26,
            "endLine": 26,
            "startColumn": 3,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.persistentClass=persistentClass;\n",
            "startLine": 26,
            "endLine": 26,
            "startColumn": 3,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.identifierPropertyNameOptional=identifierPropertyNameOptional;\n",
            "startLine": 27,
            "endLine": 27,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.identifierPropertyNameOptional=identifierPropertyNameOptional;\n",
            "startLine": 27,
            "endLine": 27,
            "startColumn": 3,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.typeIdentifier=typeIdentifier;\n",
            "startLine": 25,
            "endLine": 25,
            "startColumn": 3,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.typeModel=typeModel;\n",
            "startLine": 25,
            "endLine": 25,
            "startColumn": 3,
            "endColumn": 30
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}