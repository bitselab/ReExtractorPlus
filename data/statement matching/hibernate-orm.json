{
  "results": [
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "26e73937756de5781043f120905b71abe9398e5e",
      "url": "https://github.com/hibernate/hibernate-orm/commit/26e73937756de5781043f120905b71abe9398e5e",
      "originalMethod": {
        "container": "org.hibernate.cfg.AnnotationBinder",
        "type": "Method",
        "name": "processId",
        "filePath": "hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java",
        "startLine": 1797,
        "endLine": 1824,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.cfg.AnnotationBinder",
        "type": "Method",
        "name": "processId",
        "filePath": "hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java",
        "startLine": 1800,
        "endLine": 1832,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isIdentifierMapper)",
            "startLine": 1804,
            "endLine": 1807,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isIdentifierMapper)",
            "startLine": 1807,
            "endLine": 1810,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AnnotationException(\"Property '\" + getPath(propertyHolder,inferredData) + \"' belongs to an '@IdClass' and may not be annotated '@Id' or '@EmbeddedId'\");\n",
            "startLine": 1805,
            "endLine": 1806,
            "startColumn": 4,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AnnotationException(\"Property '\" + getPath(propertyHolder,inferredData) + \"' belongs to an '@IdClass' and may not be annotated '@Id' or '@EmbeddedId'\");\n",
            "startLine": 1808,
            "endLine": 1809,
            "startColumn": 4,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(generatorAnnotation != null)",
            "startLine": 1810,
            "endLine": 1823,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(generatorAnnotation != null)",
            "startLine": 1818,
            "endLine": 1831,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1813,
            "endLine": 1823,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1821,
            "endLine": 1831,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final XClass entityClass=inferredData.getClassOrElement();\n",
            "startLine": 1814,
            "endLine": 1814,
            "startColumn": 4,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final XClass entityClass=inferredData.getClassOrElement();\n",
            "startLine": 1822,
            "endLine": 1822,
            "startColumn": 4,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "createIdGenerator(idValue,classGenerators,context,entityClass,idProperty);\n",
            "startLine": 1815,
            "endLine": 1815,
            "startColumn": 4,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "createIdGenerator(idValue,classGenerators,context,entityClass,idProperty);\n",
            "startLine": 1823,
            "endLine": 1823,
            "startColumn": 4,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isTraceEnabled())",
            "startLine": 1816,
            "endLine": 1822,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isTraceEnabled())",
            "startLine": 1824,
            "endLine": 1830,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.tracev(\"Bind {0} on {1}\",isCompositeId(entityClass,idProperty) ? \"@EmbeddedId\" : \"@Id\",inferredData.getPropertyName());\n",
            "startLine": 1817,
            "endLine": 1821,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.tracev(\"Bind {0} on {1}\",isCompositeId(entityClass,idProperty) ? \"@EmbeddedId\" : \"@Id\",inferredData.getPropertyName());\n",
            "startLine": 1825,
            "endLine": 1829,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final XProperty idProperty=inferredData.getProperty();\n",
            "startLine": 1808,
            "endLine": 1808,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final XProperty idProperty=inferredData.getProperty();\n",
            "startLine": 1811,
            "endLine": 1811,
            "startColumn": 3,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1810,
            "endLine": 1812,
            "startColumn": 38,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1818,
            "endLine": 1820,
            "startColumn": 43,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "idValue.setCustomIdGeneratorCreator(identifierGeneratorCreator(idProperty,generatorAnnotation));\n",
            "startLine": 1811,
            "endLine": 1811,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "idValue.setCustomGeneratorCreator(generatorCreator(idProperty,generatorAnnotation));\n",
            "startLine": 1819,
            "endLine": 1819,
            "startColumn": 4,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Annotation generatorAnnotation=findContainingAnnotation(idProperty,IdGeneratorType.class);\n",
            "startLine": 1809,
            "endLine": 1809,
            "startColumn": 3,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Annotation generatorAnnotation=findContainingAnnotation(idProperty,ValueGenerationType.class);\n",
            "startLine": 1813,
            "endLine": 1813,
            "startColumn": 3,
            "endColumn": 108
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Annotation generatorAnnotation=findContainingAnnotation(idProperty,IdGeneratorType.class);\n",
            "startLine": 1809,
            "endLine": 1809,
            "startColumn": 3,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Annotation idGeneratorAnnotation=findContainingAnnotation(idProperty,IdGeneratorType.class);\n",
            "startLine": 1812,
            "endLine": 1812,
            "startColumn": 3,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "idValue.setCustomIdGeneratorCreator(identifierGeneratorCreator(idProperty,generatorAnnotation));\n",
            "startLine": 1811,
            "endLine": 1811,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "idValue.setCustomIdGeneratorCreator(identifierGeneratorCreator(idProperty,idGeneratorAnnotation));\n",
            "startLine": 1816,
            "endLine": 1816,
            "startColumn": 4,
            "endColumn": 107
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "26e73937756de5781043f120905b71abe9398e5e",
      "url": "https://github.com/hibernate/hibernate-orm/commit/26e73937756de5781043f120905b71abe9398e5e",
      "originalMethod": {
        "container": "org.hibernate.internal.SessionFactoryImpl",
        "type": "Method",
        "name": "SessionFactoryImpl",
        "filePath": "hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java",
        "startLine": 199,
        "endLine": 420,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.internal.SessionFactoryImpl",
        "type": "Method",
        "name": "SessionFactoryImpl",
        "filePath": "hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java",
        "startLine": 200,
        "endLine": 423,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(cfgXmlAccessService.getAggregatedConfig() != null)",
            "startLine": 222,
            "endLine": 226,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(cfgXmlAccessService.getAggregatedConfig() != null)",
            "startLine": 223,
            "endLine": 227,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sfName == null)",
            "startLine": 223,
            "endLine": 225,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sfName == null)",
            "startLine": 224,
            "endLine": 226,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sfName=cfgXmlAccessService.getAggregatedConfig().getSessionFactoryName();\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sfName=cfgXmlAccessService.getAggregatedConfig().getSessionFactoryName();\n",
            "startLine": 225,
            "endLine": 225,
            "startColumn": 5,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!properties.containsKey(AvailableSettings.JPA_VALIDATION_FACTORY) && !properties.containsKey(AvailableSettings.JAKARTA_VALIDATION_FACTORY))",
            "startLine": 237,
            "endLine": 249,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!properties.containsKey(AvailableSettings.JPA_VALIDATION_FACTORY) && !properties.containsKey(AvailableSettings.JAKARTA_VALIDATION_FACTORY))",
            "startLine": 238,
            "endLine": 250,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 238,
            "endLine": 249,
            "startColumn": 82,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 239,
            "endLine": 250,
            "startColumn": 82,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(getSessionFactoryOptions().getValidatorFactoryReference() != null)",
            "startLine": 239,
            "endLine": 248,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(getSessionFactoryOptions().getValidatorFactoryReference() != null)",
            "startLine": 240,
            "endLine": 249,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.put(AvailableSettings.JPA_VALIDATION_FACTORY,getSessionFactoryOptions().getValidatorFactoryReference());\n",
            "startLine": 240,
            "endLine": 243,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.put(AvailableSettings.JPA_VALIDATION_FACTORY,getSessionFactoryOptions().getValidatorFactoryReference());\n",
            "startLine": 241,
            "endLine": 244,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.put(AvailableSettings.JAKARTA_VALIDATION_FACTORY,getSessionFactoryOptions().getValidatorFactoryReference());\n",
            "startLine": 244,
            "endLine": 247,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.put(AvailableSettings.JAKARTA_VALIDATION_FACTORY,getSessionFactoryOptions().getValidatorFactoryReference());\n",
            "startLine": 245,
            "endLine": 248,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(sessionFactoryObserver: options.getSessionFactoryObservers())",
            "startLine": 261,
            "endLine": 263,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(sessionFactoryObserver: options.getSessionFactoryObservers())",
            "startLine": 262,
            "endLine": 264,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.addObserver(sessionFactoryObserver);\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 4,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.addObserver(sessionFactoryObserver);\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 4,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 288,
            "endLine": 417,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 289,
            "endLine": 420,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 403,
            "endLine": 417,
            "startColumn": 23,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 406,
            "endLine": 420,
            "startColumn": 23,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(integrator: serviceRegistry.getService(IntegratorService.class).getIntegrators())",
            "startLine": 404,
            "endLine": 408,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(integrator: serviceRegistry.getService(IntegratorService.class).getIntegrators())",
            "startLine": 407,
            "endLine": 411,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "integrator.disintegrate(this,serviceRegistry);\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "integrator.disintegrate(this,serviceRegistry);\n",
            "startLine": 408,
            "endLine": 408,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "integratorObserver.integrators.remove(integrator);\n",
            "startLine": 406,
            "endLine": 406,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "integratorObserver.integrators.remove(integrator);\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "serviceRegistry.close();\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "serviceRegistry.close();\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 5,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 410,
            "endLine": 415,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 413,
            "endLine": 418,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "close();\n",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 5,
            "endColumn": 13
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "close();\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 5,
            "endColumn": 13
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(closeException)",
            "startLine": 413,
            "endLine": 415,
            "startColumn": 37,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(closeException)",
            "startLine": 416,
            "endLine": 418,
            "startColumn": 37,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Eating error closing SF on failed attempt to start it\");\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Eating error closing SF on failed attempt to start it\");\n",
            "startLine": 417,
            "endLine": 417,
            "startColumn": 5,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 4,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 4,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(integrator: serviceRegistry.getService(IntegratorService.class).getIntegrators())",
            "startLine": 289,
            "endLine": 292,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(integrator: serviceRegistry.getService(IntegratorService.class).getIntegrators())",
            "startLine": 290,
            "endLine": 293,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "integrator.integrate(bootMetamodel,bootstrapContext,this);\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "integrator.integrate(bootMetamodel,bootstrapContext,this);\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "integratorObserver.integrators.add(integrator);\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "integratorObserver.integrators.add(integrator);\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(options.isNamedQueryStartupCheckingEnabled())",
            "startLine": 322,
            "endLine": 337,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(options.isNamedQueryStartupCheckingEnabled())",
            "startLine": 325,
            "endLine": 340,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,HibernateException> errors=queryEngine.getNamedObjectRepository().checkNamedQueries(queryEngine);\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 5,
            "endColumn": 124
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,HibernateException> errors=queryEngine.getNamedObjectRepository().checkNamedQueries(queryEngine);\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 5,
            "endColumn": 124
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!errors.isEmpty())",
            "startLine": 325,
            "endLine": 336,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!errors.isEmpty())",
            "startLine": 328,
            "endLine": 339,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringBuilder failingQueries=new StringBuilder(\"Errors in named queries: \");\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 6,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StringBuilder failingQueries=new StringBuilder(\"Errors in named queries: \");\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 6,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String sep=\"\";\n",
            "startLine": 327,
            "endLine": 327,
            "startColumn": 6,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String sep=\"\";\n",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 6,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: errors.entrySet())",
            "startLine": 328,
            "endLine": 332,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: errors.entrySet())",
            "startLine": 331,
            "endLine": 335,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "QueryLogging.QUERY_MESSAGE_LOGGER.namedQueryError(entry.getKey(),entry.getValue());\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 7,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "QueryLogging.QUERY_MESSAGE_LOGGER.namedQueryError(entry.getKey(),entry.getValue());\n",
            "startLine": 332,
            "endLine": 332,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failingQueries.append(sep).append(entry.getKey());\n",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 7,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failingQueries.append(sep).append(entry.getKey());\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sep=\", \";\n",
            "startLine": 331,
            "endLine": 331,
            "startColumn": 7,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sep=\", \";\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 7,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final HibernateException exception=new HibernateException(failingQueries.toString());\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 6,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final HibernateException exception=new HibernateException(failingQueries.toString());\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 6,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "errors.values().forEach(exception::addSuppressed);\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 6,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "errors.values().forEach(exception::addSuppressed);\n",
            "startLine": 337,
            "endLine": 337,
            "startColumn": 6,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw exception;\n",
            "startLine": 335,
            "endLine": 335,
            "startColumn": 6,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw exception;\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 6,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(mappingProfile: bootMetamodel.getFetchProfiles())",
            "startLine": 350,
            "endLine": 379,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(mappingProfile: bootMetamodel.getFetchProfiles())",
            "startLine": 353,
            "endLine": 382,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FetchProfile fetchProfile=new FetchProfile(mappingProfile.getName());\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 5,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final FetchProfile fetchProfile=new FetchProfile(mappingProfile.getName());\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 5,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(mappingFetch: mappingProfile.getFetches())",
            "startLine": 352,
            "endLine": 377,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(mappingFetch: mappingProfile.getFetches())",
            "startLine": 355,
            "endLine": 380,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String entityName=this.runtimeMetamodels.getImportedName(mappingFetch.getEntity());\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 6,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String entityName=this.runtimeMetamodels.getImportedName(mappingFetch.getEntity());\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 6,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityPersister owner=entityName == null ? null : this.runtimeMetamodels.getMappingMetamodel().getEntityDescriptor(entityName);\n",
            "startLine": 355,
            "endLine": 357,
            "startColumn": 6,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityPersister owner=entityName == null ? null : this.runtimeMetamodels.getMappingMetamodel().getEntityDescriptor(entityName);\n",
            "startLine": 358,
            "endLine": 360,
            "startColumn": 6,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(owner == null)",
            "startLine": 358,
            "endLine": 363,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(owner == null)",
            "startLine": 361,
            "endLine": 366,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new HibernateException(\"Unable to resolve entity reference [\" + mappingFetch.getEntity() + \"] in fetch profile [\"+ fetchProfile.getName()+ \"]\");\n",
            "startLine": 359,
            "endLine": 362,
            "startColumn": 7,
            "endColumn": 9
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new HibernateException(\"Unable to resolve entity reference [\" + mappingFetch.getEntity() + \"] in fetch profile [\"+ fetchProfile.getName()+ \"]\");\n",
            "startLine": 362,
            "endLine": 365,
            "startColumn": 7,
            "endColumn": 9
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type associationType=owner.getPropertyType(mappingFetch.getAssociation());\n",
            "startLine": 366,
            "endLine": 366,
            "startColumn": 6,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type associationType=owner.getPropertyType(mappingFetch.getAssociation());\n",
            "startLine": 369,
            "endLine": 369,
            "startColumn": 6,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(associationType == null || !associationType.isAssociationType())",
            "startLine": 367,
            "endLine": 369,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(associationType == null || !associationType.isAssociationType())",
            "startLine": 370,
            "endLine": 372,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new HibernateException(\"Fetch profile [\" + fetchProfile.getName() + \"] specified an invalid association\");\n",
            "startLine": 368,
            "endLine": 368,
            "startColumn": 7,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new HibernateException(\"Fetch profile [\" + fetchProfile.getName() + \"] specified an invalid association\");\n",
            "startLine": 371,
            "endLine": 371,
            "startColumn": 7,
            "endColumn": 121
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Fetch.Style fetchStyle=Fetch.Style.parse(mappingFetch.getStyle());\n",
            "startLine": 372,
            "endLine": 372,
            "startColumn": 6,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Fetch.Style fetchStyle=Fetch.Style.parse(mappingFetch.getStyle());\n",
            "startLine": 375,
            "endLine": 375,
            "startColumn": 6,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fetchProfile.addFetch(new Association(owner,mappingFetch.getAssociation()),fetchStyle);\n",
            "startLine": 375,
            "endLine": 375,
            "startColumn": 6,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fetchProfile.addFetch(new Association(owner,mappingFetch.getAssociation()),fetchStyle);\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 6,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((Loadable)owner).registerAffectingFetchProfile(fetchProfile.getName());\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 6,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((Loadable)owner).registerAffectingFetchProfile(fetchProfile.getName());\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 6,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fetchProfiles.put(fetchProfile.getName(),fetchProfile);\n",
            "startLine": 378,
            "endLine": 378,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fetchProfiles.put(fetchProfile.getName(),fetchProfile);\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 5,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Building session factory\");\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 3,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Building session factory\");\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 3,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TypeConfiguration typeConfiguration=bootMetamodel.getTypeConfiguration();\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 3,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TypeConfiguration typeConfiguration=bootMetamodel.getTypeConfiguration();\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 3,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final MetadataBuildingContext bootModelBuildingContext=typeConfiguration.getMetadataBuildingContext();\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 3,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final MetadataBuildingContext bootModelBuildingContext=typeConfiguration.getMetadataBuildingContext();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 3,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BootstrapContext bootstrapContext=bootModelBuildingContext.getBootstrapContext();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 3,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BootstrapContext bootstrapContext=bootModelBuildingContext.getBootstrapContext();\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 3,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.sessionFactoryOptions=options;\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 3,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.sessionFactoryOptions=options;\n",
            "startLine": 209,
            "endLine": 209,
            "startColumn": 3,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.serviceRegistry=options.getServiceRegistry().getService(SessionFactoryServiceRegistryFactory.class).buildServiceRegistry(this,options);\n",
            "startLine": 210,
            "endLine": 213,
            "startColumn": 3,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.serviceRegistry=options.getServiceRegistry().getService(SessionFactoryServiceRegistryFactory.class).buildServiceRegistry(this,options);\n",
            "startLine": 211,
            "endLine": 214,
            "startColumn": 3,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.eventEngine=new EventEngine(bootMetamodel,this);\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 3,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.eventEngine=new EventEngine(bootMetamodel,this);\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 3,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.initSessionFactory(this);\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 3,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.initSessionFactory(this);\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 3,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CfgXmlAccessService cfgXmlAccessService=serviceRegistry.getService(CfgXmlAccessService.class);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 3,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CfgXmlAccessService cfgXmlAccessService=serviceRegistry.getService(CfgXmlAccessService.class);\n",
            "startLine": 220,
            "endLine": 220,
            "startColumn": 3,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String sfName=sessionFactoryOptions.getSessionFactoryName();\n",
            "startLine": 221,
            "endLine": 221,
            "startColumn": 3,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String sfName=sessionFactoryOptions.getSessionFactoryName();\n",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 3,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.name=sfName;\n",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.name=sfName;\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.uuid=options.getUuid();\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.uuid=options.getUuid();\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 3,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcServices=serviceRegistry.getService(JdbcServices.class);\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 3,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcServices=serviceRegistry.getService(JdbcServices.class);\n",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 3,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConfigurationService configurationService=serviceRegistry.getService(ConfigurationService.class);\n",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 3,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConfigurationService configurationService=serviceRegistry.getService(ConfigurationService.class);\n",
            "startLine": 234,
            "endLine": 234,
            "startColumn": 3,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.properties=new HashMap<>();\n",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 3,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.properties=new HashMap<>();\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.properties.putAll(configurationService.getSettings());\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 3,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.properties.putAll(configurationService.getSettings());\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 3,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maskOutSensitiveInformation(this.properties);\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 3,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maskOutSensitiveInformation(this.properties);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 3,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logIfEmptyCompositesEnabled(this.properties);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 3,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logIfEmptyCompositesEnabled(this.properties);\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 3,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sqlStringGenerationContext=SqlStringGenerationContextImpl.fromExplicit(jdbcServices.getJdbcEnvironment(),bootMetamodel.getDatabase(),options.getDefaultCatalog(),options.getDefaultSchema());\n",
            "startLine": 254,
            "endLine": 256,
            "startColumn": 3,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sqlStringGenerationContext=SqlStringGenerationContextImpl.fromExplicit(jdbcServices.getJdbcEnvironment(),bootMetamodel.getDatabase(),options.getDefaultCatalog(),options.getDefaultSchema());\n",
            "startLine": 255,
            "endLine": 257,
            "startColumn": 3,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.cacheAccess=this.serviceRegistry.getService(CacheImplementor.class);\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 3,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.cacheAccess=this.serviceRegistry.getService(CacheImplementor.class);\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 3,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jpaPersistenceUnitUtil=new PersistenceUnitUtilImpl(this);\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jpaPersistenceUnitUtil=new PersistenceUnitUtilImpl(this);\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters=new HashMap<>();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters=new HashMap<>();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 3,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters.putAll(bootMetamodel.getFilterDefinitions());\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 3,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.filters.putAll(bootMetamodel.getFilterDefinitions());\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 3,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Session factory constructed with filter configurations : %s\",filters);\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 3,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Session factory constructed with filter configurations : %s\",filters);\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Instantiating session factory with properties: %s\",properties);\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debugf(\"Instantiating session factory with properties: %s\",properties);\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 3,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IntegratorObserver integratorObserver=new IntegratorObserver();\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 3,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IntegratorObserver integratorObserver=new IntegratorObserver();\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 3,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.addObserver(integratorObserver);\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 3,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.addObserver(integratorObserver);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 3,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.identifierGenerators=new HashMap<>();\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.identifierGenerators=new HashMap<>();\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 4,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.validate();\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.validate();\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 4,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Instantiated session factory\");\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Instantiated session factory\");\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 4,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "primeSecondLevelCacheRegions(bootMetamodel);\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 4,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "primeSecondLevelCacheRegions(bootMetamodel);\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 4,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.queryEngine=QueryEngine.from(this,bootMetamodel);\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 4,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.queryEngine=QueryEngine.from(this,bootMetamodel);\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 4,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final RuntimeMetamodelsImpl runtimeMetamodels=new RuntimeMetamodelsImpl();\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 4,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final RuntimeMetamodelsImpl runtimeMetamodels=new RuntimeMetamodelsImpl();\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 4,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.runtimeMetamodels=runtimeMetamodels;\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 4,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.runtimeMetamodels=runtimeMetamodels;\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 4,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "runtimeMetamodels.finishInitialization(bootMetamodel,bootstrapContext,this);\n",
            "startLine": 314,
            "endLine": 318,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "runtimeMetamodels.finishInitialization(bootMetamodel,bootstrapContext,this);\n",
            "startLine": 317,
            "endLine": 321,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.queryEngine.prepare(this,bootMetamodel,bootstrapContext);\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 4,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.queryEngine.prepare(this,bootMetamodel,bootstrapContext);\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 4,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "SchemaManagementToolCoordinator.process(bootMetamodel,serviceRegistry,properties,action -> SessionFactoryImpl.this.delayedDropAction=action);\n",
            "startLine": 339,
            "endLine": 344,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "SchemaManagementToolCoordinator.process(bootMetamodel,serviceRegistry,properties,action -> SessionFactoryImpl.this.delayedDropAction=action);\n",
            "startLine": 342,
            "endLine": 347,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentSessionContext=buildCurrentSessionContext();\n",
            "startLine": 346,
            "endLine": 346,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentSessionContext=buildCurrentSessionContext();\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 4,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fetchProfiles=new HashMap<>();\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 4,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fetchProfiles=new HashMap<>();\n",
            "startLine": 352,
            "endLine": 352,
            "startColumn": 4,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.defaultSessionOpenOptions=createDefaultSessionOpenOptionsIfPossible();\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 4,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.defaultSessionOpenOptions=createDefaultSessionOpenOptionsIfPossible();\n",
            "startLine": 384,
            "endLine": 384,
            "startColumn": 4,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.temporarySessionOpenOptions=this.defaultSessionOpenOptions == null ? null : buildTemporarySessionOpenOptions();\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 4,
            "endColumn": 122
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.temporarySessionOpenOptions=this.defaultSessionOpenOptions == null ? null : buildTemporarySessionOpenOptions();\n",
            "startLine": 385,
            "endLine": 385,
            "startColumn": 4,
            "endColumn": 122
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.defaultStatelessOptions=this.defaultSessionOpenOptions == null ? null : withStatelessOptions();\n",
            "startLine": 383,
            "endLine": 383,
            "startColumn": 4,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.defaultStatelessOptions=this.defaultSessionOpenOptions == null ? null : withStatelessOptions();\n",
            "startLine": 386,
            "endLine": 386,
            "startColumn": 4,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fastSessionServices=new FastSessionServices(this);\n",
            "startLine": 384,
            "endLine": 384,
            "startColumn": 4,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fastSessionServices=new FastSessionServices(this);\n",
            "startLine": 387,
            "endLine": 387,
            "startColumn": 4,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.wrapperOptions=new SessionFactoryBasedWrapperOptions(this);\n",
            "startLine": 385,
            "endLine": 385,
            "startColumn": 4,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.wrapperOptions=new SessionFactoryBasedWrapperOptions(this);\n",
            "startLine": 388,
            "endLine": 388,
            "startColumn": 4,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.sessionFactoryCreated(this);\n",
            "startLine": 387,
            "endLine": 387,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.observer.sessionFactoryCreated(this);\n",
            "startLine": 390,
            "endLine": 390,
            "startColumn": 4,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "SessionFactoryRegistry.INSTANCE.addSessionFactory(getUuid(),name,sessionFactoryOptions.isSessionFactoryNameAlsoJndiName(),this,serviceRegistry.getService(JndiService.class));\n",
            "startLine": 389,
            "endLine": 395,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "SessionFactoryRegistry.INSTANCE.addSessionFactory(getUuid(),name,sessionFactoryOptions.isSessionFactoryNameAlsoJndiName(),this,serviceRegistry.getService(JndiService.class));\n",
            "startLine": 392,
            "endLine": 398,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bootstrapContext.getReflectionManager().reset();\n",
            "startLine": 399,
            "endLine": 399,
            "startColumn": 4,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootstrapContext.getReflectionManager().reset();\n",
            "startLine": 402,
            "endLine": 402,
            "startColumn": 4,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.entityNameResolver=new CoordinatingEntityNameResolver(this,getInterceptor());\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 4,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.entityNameResolver=new CoordinatingEntityNameResolver(this,getInterceptor());\n",
            "startLine": 404,
            "endLine": 404,
            "startColumn": 4,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.schemaManager=new SchemaManagerImpl(this,bootMetamodel);\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 3,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.schemaManager=new SchemaManagerImpl(this,bootMetamodel);\n",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 3,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.getEntityBindings().stream().filter(model -> !model.isInherited()).forEach(model -> {\n  final IdentifierGenerator generator=model.getIdentifier().createIdentifierGenerator(bootstrapContext.getIdentifierGeneratorFactory(),jdbcServices.getJdbcEnvironment().getDialect(),(RootClass)model);\n  generator.initialize(sqlStringGenerationContext);\n  identifierGenerators.put(model.getEntityName(),generator);\n}\n);\n",
            "startLine": 295,
            "endLine": 303,
            "startColumn": 4,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootMetamodel.getEntityBindings().stream().filter(model -> !model.isInherited()).forEach(model -> {\n  final InMemoryGenerator generator=model.getIdentifier().createGenerator(bootstrapContext.getIdentifierGeneratorFactory(),jdbcServices.getJdbcEnvironment().getDialect(),(RootClass)model);\n  if (generator instanceof IdentifierGenerator) {\n    ((IdentifierGenerator)generator).initialize(sqlStringGenerationContext);\n  }\n  identifierGenerators.put(model.getEntityName(),generator);\n}\n);\n",
            "startLine": 296,
            "endLine": 306,
            "startColumn": 4,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Type Declaration Statement",
            "expression": "class IntegratorObserver implements SessionFactoryObserver {\n  private final ArrayList<Integrator> integrators=new ArrayList<>();\n  @Override public void sessionFactoryCreated(  SessionFactory factory){\n  }\n  @Override public void sessionFactoryClosed(  SessionFactory factory){\n    for (    Integrator integrator : integrators) {\n      integrator.disintegrate(SessionFactoryImpl.this,SessionFactoryImpl.this.serviceRegistry);\n    }\n    integrators.clear();\n  }\n}\n",
            "startLine": 271,
            "endLine": 285,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Type Declaration Statement",
            "expression": "class IntegratorObserver implements SessionFactoryObserver {\n  private final ArrayList<Integrator> integrators=new ArrayList<>();\n  @Override public void sessionFactoryCreated(  SessionFactory factory){\n  }\n  @Override public void sessionFactoryClosed(  SessionFactory factory){\n    for (    Integrator integrator : integrators) {\n      integrator.disintegrate(SessionFactoryImpl.this,SessionFactoryImpl.this.serviceRegistry);\n    }\n    integrators.clear();\n  }\n}\n",
            "startLine": 272,
            "endLine": 286,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerators.put(model.getEntityName(),generator);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerators.put(model.getEntityName(),generator);\n",
            "startLine": 305,
            "endLine": 305,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IdentifierGenerator generator=model.getIdentifier().createIdentifierGenerator(bootstrapContext.getIdentifierGeneratorFactory(),jdbcServices.getJdbcEnvironment().getDialect(),(RootClass)model);\n",
            "startLine": 296,
            "endLine": 300,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final InMemoryGenerator generator=model.getIdentifier().createGenerator(bootstrapContext.getIdentifierGeneratorFactory(),jdbcServices.getJdbcEnvironment().getDialect(),(RootClass)model);\n",
            "startLine": 297,
            "endLine": 301,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "26e73937756de5781043f120905b71abe9398e5e",
      "url": "https://github.com/hibernate/hibernate-orm/commit/26e73937756de5781043f120905b71abe9398e5e",
      "originalMethod": {
        "container": "org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter",
        "type": "Method",
        "name": "visitInsertionTargetPaths",
        "filePath": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/BaseSqmToSqlAstConverter.java",
        "startLine": 1222,
        "endLine": 1349,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter",
        "type": "Method",
        "name": "visitInsertionTargetPaths",
        "filePath": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/BaseSqmToSqlAstConverter.java",
        "startLine": 1222,
        "endLine": 1344,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entityDescriptor.isVersioned())",
            "startLine": 1242,
            "endLine": 1249,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entityDescriptor.isVersioned())",
            "startLine": 1237,
            "endLine": 1244,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1242,
            "endLine": 1245,
            "startColumn": 41,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1237,
            "endLine": 1240,
            "startColumn": 41,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "versionAttributeName=entityDescriptor.getVersionMapping().getVersionAttribute().getAttributeName();\n",
            "startLine": 1243,
            "endLine": 1243,
            "startColumn": 4,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "versionAttributeName=entityDescriptor.getVersionMapping().getVersionAttribute().getAttributeName();\n",
            "startLine": 1238,
            "endLine": 1238,
            "startColumn": 4,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=true;\n",
            "startLine": 1244,
            "endLine": 1244,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=true;\n",
            "startLine": 1239,
            "endLine": 1239,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1246,
            "endLine": 1249,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1241,
            "endLine": 1244,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "versionAttributeName=null;\n",
            "startLine": 1247,
            "endLine": 1247,
            "startColumn": 4,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "versionAttributeName=null;\n",
            "startLine": 1242,
            "endLine": 1242,
            "startColumn": 4,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=false;\n",
            "startLine": 1248,
            "endLine": 1248,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=false;\n",
            "startLine": 1243,
            "endLine": 1243,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < targetPaths.size(); i++)",
            "startLine": 1251,
            "endLine": 1262,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < targetPaths.size(); i++)",
            "startLine": 1246,
            "endLine": 1257,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SqmPath<?> path=targetPaths.get(i);\n",
            "startLine": 1252,
            "endLine": 1252,
            "startColumn": 4,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SqmPath<?> path=targetPaths.get(i);\n",
            "startLine": 1247,
            "endLine": 1247,
            "startColumn": 4,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String localName=path.getNavigablePath().getLocalName();\n",
            "startLine": 1253,
            "endLine": 1253,
            "startColumn": 4,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String localName=path.getNavigablePath().getLocalName();\n",
            "startLine": 1248,
            "endLine": 1248,
            "startColumn": 4,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(localName.equals(identifierPropertyName))",
            "startLine": 1254,
            "endLine": 1259,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(localName.equals(identifierPropertyName))",
            "startLine": 1249,
            "endLine": 1254,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1254,
            "endLine": 1256,
            "startColumn": 54,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1249,
            "endLine": 1251,
            "startColumn": 54,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerator=null;\n",
            "startLine": 1255,
            "endLine": 1255,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerator=null;\n",
            "startLine": 1250,
            "endLine": 1250,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(localName.equals(versionAttributeName))",
            "startLine": 1257,
            "endLine": 1259,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(localName.equals(versionAttributeName))",
            "startLine": 1252,
            "endLine": 1254,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=false;\n",
            "startLine": 1258,
            "endLine": 1258,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "needsVersionInsert=false;\n",
            "startLine": 1253,
            "endLine": 1253,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Assignable assignable=(Assignable)path.accept(this);\n",
            "startLine": 1260,
            "endLine": 1260,
            "startColumn": 4,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Assignable assignable=(Assignable)path.accept(this);\n",
            "startLine": 1255,
            "endLine": 1255,
            "startColumn": 4,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(assignable,assignable.getColumnReferences());\n",
            "startLine": 1261,
            "endLine": 1261,
            "startColumn": 4,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(assignable,assignable.getColumnReferences());\n",
            "startLine": 1256,
            "endLine": 1256,
            "startColumn": 4,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(needsVersionInsert)",
            "startLine": 1263,
            "endLine": 1276,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(needsVersionInsert)",
            "startLine": 1258,
            "endLine": 1271,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> versionPath=BasicValuedPathInterpretation.from((SqmBasicValuedSimplePath<?>)sqmStatement.getTarget().get(versionAttributeName),this,this,jpaQueryComplianceEnabled);\n",
            "startLine": 1264,
            "endLine": 1270,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> versionPath=BasicValuedPathInterpretation.from((SqmBasicValuedSimplePath<?>)sqmStatement.getTarget().get(versionAttributeName),this,this,jpaQueryComplianceEnabled);\n",
            "startLine": 1259,
            "endLine": 1265,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<ColumnReference> targetColumnReferences=versionPath.getColumnReferences();\n",
            "startLine": 1271,
            "endLine": 1271,
            "startColumn": 4,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<ColumnReference> targetColumnReferences=versionPath.getColumnReferences();\n",
            "startLine": 1266,
            "endLine": 1266,
            "startColumn": 4,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Assert Statement",
            "expression": "assert targetColumnReferences.size() == 1;\n",
            "startLine": 1272,
            "endLine": 1272,
            "startColumn": 4,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Assert Statement",
            "expression": "assert targetColumnReferences.size() == 1;\n",
            "startLine": 1267,
            "endLine": 1267,
            "startColumn": 4,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(versionPath,targetColumnReferences);\n",
            "startLine": 1274,
            "endLine": 1274,
            "startColumn": 4,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(versionPath,targetColumnReferences);\n",
            "startLine": 1269,
            "endLine": 1269,
            "startColumn": 4,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "versionExpression=new VersionTypeSeedParameterSpecification(entityDescriptor.getVersionMapping());\n",
            "startLine": 1275,
            "endLine": 1275,
            "startColumn": 4,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "versionExpression=new VersionTypeSeedParameterSpecification(entityDescriptor.getVersionMapping());\n",
            "startLine": 1270,
            "endLine": 1270,
            "startColumn": 4,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(discriminatorMapping != null && discriminatorMapping.isPhysical())",
            "startLine": 1277,
            "endLine": 1293,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(discriminatorMapping != null && discriminatorMapping.isPhysical())",
            "startLine": 1272,
            "endLine": 1288,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> discriminatorPath=new BasicValuedPathInterpretation<>(new ColumnReference(rootTableGroup.resolveTableReference(discriminatorMapping.getContainingTableExpression()),discriminatorMapping),rootTableGroup.getNavigablePath().append(discriminatorMapping.getPartName()),discriminatorMapping,rootTableGroup);\n",
            "startLine": 1278,
            "endLine": 1286,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> discriminatorPath=new BasicValuedPathInterpretation<>(new ColumnReference(rootTableGroup.resolveTableReference(discriminatorMapping.getContainingTableExpression()),discriminatorMapping),rootTableGroup.getNavigablePath().append(discriminatorMapping.getPartName()),discriminatorMapping,rootTableGroup);\n",
            "startLine": 1273,
            "endLine": 1281,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(discriminatorPath,discriminatorPath.getColumnReferences());\n",
            "startLine": 1287,
            "endLine": 1287,
            "startColumn": 4,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(discriminatorPath,discriminatorPath.getColumnReferences());\n",
            "startLine": 1282,
            "endLine": 1282,
            "startColumn": 4,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "discriminatorExpression=new QueryLiteral<>(entityDescriptor.getDiscriminatorValue(),discriminatorMapping);\n",
            "startLine": 1288,
            "endLine": 1291,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "discriminatorExpression=new QueryLiteral<>(entityDescriptor.getDiscriminatorValue(),discriminatorMapping);\n",
            "startLine": 1283,
            "endLine": 1286,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator instanceof PostInsertIdentifierGenerator || identifierGenerator instanceof CompositeNestedGeneratedValueGenerator)",
            "startLine": 1295,
            "endLine": 1341,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator instanceof PostInsertIdentifierGenerator || identifierGenerator instanceof CompositeNestedGeneratedValueGenerator)",
            "startLine": 1290,
            "endLine": 1336,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1296,
            "endLine": 1298,
            "startColumn": 80,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1291,
            "endLine": 1293,
            "startColumn": 80,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerator=null;\n",
            "startLine": 1297,
            "endLine": 1297,
            "startColumn": 4,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerator=null;\n",
            "startLine": 1292,
            "endLine": 1292,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator != null)",
            "startLine": 1299,
            "endLine": 1341,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator != null)",
            "startLine": 1294,
            "endLine": 1336,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean addIdColumn;\n",
            "startLine": 1301,
            "endLine": 1301,
            "startColumn": 4,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean addIdColumn;\n",
            "startLine": 1296,
            "endLine": 1296,
            "startColumn": 4,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sqmStatement instanceof SqmInsertValuesStatement<?>)",
            "startLine": 1302,
            "endLine": 1327,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sqmStatement instanceof SqmInsertValuesStatement<?>)",
            "startLine": 1297,
            "endLine": 1322,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1302,
            "endLine": 1305,
            "startColumn": 63,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1297,
            "endLine": 1300,
            "startColumn": 63,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=true;\n",
            "startLine": 1304,
            "endLine": 1304,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=true;\n",
            "startLine": 1299,
            "endLine": 1299,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(identifierGenerator instanceof BulkInsertionCapableIdentifierGenerator))",
            "startLine": 1306,
            "endLine": 1327,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(identifierGenerator instanceof BulkInsertionCapableIdentifierGenerator))",
            "startLine": 1301,
            "endLine": 1322,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1306,
            "endLine": 1309,
            "startColumn": 92,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1301,
            "endLine": 1304,
            "startColumn": 92,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=false;\n",
            "startLine": 1308,
            "endLine": 1308,
            "startColumn": 5,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=false;\n",
            "startLine": 1303,
            "endLine": 1303,
            "startColumn": 5,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1310,
            "endLine": 1327,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1305,
            "endLine": 1322,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Optimizer optimizer;\n",
            "startLine": 1312,
            "endLine": 1312,
            "startColumn": 5,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Optimizer optimizer;\n",
            "startLine": 1307,
            "endLine": 1307,
            "startColumn": 5,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator instanceof OptimizableGenerator && (optimizer=((OptimizableGenerator)identifierGenerator).getOptimizer()) != null && optimizer.getIncrementSize() > 1 || !((BulkInsertionCapableIdentifierGenerator)identifierGenerator).supportsBulkInsertionIdentifierGeneration())",
            "startLine": 1313,
            "endLine": 1326,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(identifierGenerator instanceof OptimizableGenerator && (optimizer=((OptimizableGenerator)identifierGenerator).getOptimizer()) != null && optimizer.getIncrementSize() > 1 || !((BulkInsertionCapableIdentifierGenerator)identifierGenerator).supportsBulkInsertionIdentifierGeneration())",
            "startLine": 1308,
            "endLine": 1321,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1316,
            "endLine": 1321,
            "startColumn": 123,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1311,
            "endLine": 1316,
            "startColumn": 123,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=creationContext.getSessionFactory().getJdbcServices().getDialect().supportsWindowFunctions();\n",
            "startLine": 1320,
            "endLine": 1320,
            "startColumn": 6,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=creationContext.getSessionFactory().getJdbcServices().getDialect().supportsWindowFunctions();\n",
            "startLine": 1315,
            "endLine": 1315,
            "startColumn": 6,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1322,
            "endLine": 1326,
            "startColumn": 10,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1317,
            "endLine": 1321,
            "startColumn": 10,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=true;\n",
            "startLine": 1325,
            "endLine": 1325,
            "startColumn": 6,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addIdColumn=true;\n",
            "startLine": 1320,
            "endLine": 1320,
            "startColumn": 6,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierMapping=(BasicEntityIdentifierMapping)entityDescriptor.getIdentifierMapping();\n",
            "startLine": 1328,
            "endLine": 1328,
            "startColumn": 4,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierMapping=(BasicEntityIdentifierMapping)entityDescriptor.getIdentifierMapping();\n",
            "startLine": 1323,
            "endLine": 1323,
            "startColumn": 4,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(addIdColumn)",
            "startLine": 1329,
            "endLine": 1340,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(addIdColumn)",
            "startLine": 1324,
            "endLine": 1335,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> identifierPath=new BasicValuedPathInterpretation<>(new ColumnReference(rootTableGroup.resolveTableReference(identifierMapping.getContainingTableExpression()),identifierMapping),rootTableGroup.getNavigablePath().append(identifierMapping.getPartName()),identifierMapping,rootTableGroup);\n",
            "startLine": 1330,
            "endLine": 1338,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final BasicValuedPathInterpretation<?> identifierPath=new BasicValuedPathInterpretation<>(new ColumnReference(rootTableGroup.resolveTableReference(identifierMapping.getContainingTableExpression()),identifierMapping),rootTableGroup.getNavigablePath().append(identifierMapping.getPartName()),identifierMapping,rootTableGroup);\n",
            "startLine": 1325,
            "endLine": 1333,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(identifierPath,identifierPath.getColumnReferences());\n",
            "startLine": 1339,
            "endLine": 1339,
            "startColumn": 5,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "targetColumnReferenceConsumer.accept(identifierPath,identifierPath.getColumnReferences());\n",
            "startLine": 1334,
            "endLine": 1334,
            "startColumn": 5,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<SqmPath<?>> targetPaths=sqmStatement.getInsertionTargetPaths();\n",
            "startLine": 1226,
            "endLine": 1226,
            "startColumn": 3,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<SqmPath<?>> targetPaths=sqmStatement.getInsertionTargetPaths();\n",
            "startLine": 1226,
            "endLine": 1226,
            "startColumn": 3,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityDiscriminatorMapping discriminatorMapping=entityDescriptor.getDiscriminatorMapping();\n",
            "startLine": 1227,
            "endLine": 1227,
            "startColumn": 3,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityDiscriminatorMapping discriminatorMapping=entityDescriptor.getDiscriminatorMapping();\n",
            "startLine": 1227,
            "endLine": 1227,
            "startColumn": 3,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression versionExpression=null;\n",
            "startLine": 1229,
            "endLine": 1229,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression versionExpression=null;\n",
            "startLine": 1228,
            "endLine": 1228,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression discriminatorExpression=null;\n",
            "startLine": 1230,
            "endLine": 1230,
            "startColumn": 3,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression discriminatorExpression=null;\n",
            "startLine": 1229,
            "endLine": 1229,
            "startColumn": 3,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BasicEntityIdentifierMapping identifierMapping=null;\n",
            "startLine": 1231,
            "endLine": 1231,
            "startColumn": 3,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BasicEntityIdentifierMapping identifierMapping=null;\n",
            "startLine": 1230,
            "endLine": 1230,
            "startColumn": 3,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String identifierPropertyName;\n",
            "startLine": 1233,
            "endLine": 1233,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String identifierPropertyName;\n",
            "startLine": 1232,
            "endLine": 1232,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String versionAttributeName;\n",
            "startLine": 1240,
            "endLine": 1240,
            "startColumn": 3,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String versionAttributeName;\n",
            "startLine": 1235,
            "endLine": 1235,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean needsVersionInsert;\n",
            "startLine": 1241,
            "endLine": 1241,
            "startColumn": 3,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean needsVersionInsert;\n",
            "startLine": 1236,
            "endLine": 1236,
            "startColumn": 3,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new AdditionalInsertValues(versionExpression,discriminatorExpression,identifierGenerator,identifierMapping);\n",
            "startLine": 1343,
            "endLine": 1348,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new AdditionalInsertValues(versionExpression,discriminatorExpression,identifierGenerator,identifierMapping);\n",
            "startLine": 1338,
            "endLine": 1343,
            "startColumn": 3,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IdentifierGenerator identifierGenerator=entityDescriptor.getIdentifierGenerator();\n",
            "startLine": 1228,
            "endLine": 1228,
            "startColumn": 3,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InMemoryGenerator identifierGenerator=entityDescriptor.getGenerator();\n",
            "startLine": 1233,
            "endLine": 1233,
            "startColumn": 3,
            "endColumn": 75
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierPropertyName=entityDescriptor.getIdentifierPropertyName();\n",
            "startLine": 1235,
            "endLine": 1235,
            "startColumn": 4,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierPropertyName=identifierGenerator != null ? entityDescriptor.getIdentifierPropertyName() : null;\n",
            "startLine": 1234,
            "endLine": 1234,
            "startColumn": 3,
            "endColumn": 110
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "26e73937756de5781043f120905b71abe9398e5e",
      "url": "https://github.com/hibernate/hibernate-orm/commit/26e73937756de5781043f120905b71abe9398e5e",
      "originalMethod": {
        "container": "org.hibernate.mapping.Component",
        "type": "Method",
        "name": "buildIdentifierGenerator",
        "filePath": "hibernate-core/src/main/java/org/hibernate/mapping/Component.java",
        "startLine": 433,
        "endLine": 494,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.mapping.Component",
        "type": "Method",
        "name": "buildIdentifierGenerator",
        "filePath": "hibernate-core/src/main/java/org/hibernate/mapping/Component.java",
        "startLine": 431,
        "endLine": 483,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(hasCustomGenerator)",
            "startLine": 440,
            "endLine": 444,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(hasCustomGenerator)",
            "startLine": 436,
            "endLine": 442,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(rootClass.getIdentifierMapper() != null)",
            "startLine": 452,
            "endLine": 463,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(rootClass.getIdentifierMapper() != null)",
            "startLine": 450,
            "endLine": 461,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 452,
            "endLine": 455,
            "startColumn": 50,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 450,
            "endLine": 453,
            "startColumn": 50,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=resolveComponentClass();\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=resolveComponentClass();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 4,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(rootClass.getIdentifierProperty() != null)",
            "startLine": 456,
            "endLine": 463,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(rootClass.getIdentifierProperty() != null)",
            "startLine": 454,
            "endLine": 461,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 456,
            "endLine": 459,
            "startColumn": 57,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 454,
            "endLine": 457,
            "startColumn": 57,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=resolveComponentClass();\n",
            "startLine": 458,
            "endLine": 458,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=resolveComponentClass();\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 4,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 460,
            "endLine": 463,
            "startColumn": 8,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 458,
            "endLine": 461,
            "startColumn": 8,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=entityClass;\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 4,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeDeclarer=entityClass;\n",
            "startLine": 460,
            "endLine": 460,
            "startColumn": 4,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(property: getProperties())",
            "startLine": 468,
            "endLine": 492,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(property: getProperties())",
            "startLine": 466,
            "endLine": 481,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(property.getValue().isSimpleValue())",
            "startLine": 469,
            "endLine": 491,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(property.getValue().isSimpleValue())",
            "startLine": 467,
            "endLine": 480,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean hasCustomGenerator=!DEFAULT_ID_GEN_STRATEGY.equals(getIdentifierGeneratorStrategy());\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 3,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean hasCustomGenerator=!DEFAULT_ID_GEN_STRATEGY.equals(getIdentifierGeneratorStrategy());\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 3,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> entityClass=rootClass.getMappedClass();\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> entityClass=rootClass.getMappedClass();\n",
            "startLine": 444,
            "endLine": 444,
            "startColumn": 3,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> attributeDeclarer;\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 3,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> attributeDeclarer;\n",
            "startLine": 445,
            "endLine": 445,
            "startColumn": 3,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeNestedGeneratedValueGenerator.GenerationContextLocator locator;\n",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 3,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompositeNestedGeneratedValueGenerator.GenerationContextLocator locator;\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 3,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "locator=new StandardGenerationContextLocator(rootClass.getEntityName());\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 3,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "locator=new StandardGenerationContextLocator(rootClass.getEntityName());\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 3,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CompositeNestedGeneratedValueGenerator generator=new CompositeNestedGeneratedValueGenerator(locator);\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 3,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CompositeNestedGeneratedValueGenerator generator=new CompositeNestedGeneratedValueGenerator(locator);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 3,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SimpleValue value=(SimpleValue)property.getValue();\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SimpleValue value=(SimpleValue)property.getValue();\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 5,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return generator;\n",
            "startLine": 493,
            "endLine": 493,
            "startColumn": 3,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return generator;\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 3,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(DEFAULT_ID_GEN_STRATEGY.equals(value.getIdentifierGeneratorStrategy()))",
            "startLine": 472,
            "endLine": 476,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!DEFAULT_ID_GEN_STRATEGY.equals(value.getIdentifierGeneratorStrategy()))",
            "startLine": 470,
            "endLine": 479,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return super.createIdentifierGenerator(identifierGeneratorFactory,dialect,defaultCatalog,defaultSchema,rootClass);\n",
            "startLine": 441,
            "endLine": 443,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return super.createGenerator(identifierGeneratorFactory,dialect,rootClass);\n",
            "startLine": 437,
            "endLine": 441,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(customIdGeneratorCreator != null)",
            "startLine": 404,
            "endLine": 449,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(customIdGeneratorCreator != null)",
            "startLine": 399,
            "endLine": 413,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identifierGenerator=customIdGeneratorCreator.createGenerator(creationContext);\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 4,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "generator=customIdGeneratorCreator.createGenerator(new IdGeneratorCreationContext(identifierGeneratorFactory,null,null,rootClass));\n",
            "startLine": 400,
            "endLine": 402,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 404,
            "endLine": 449,
            "startColumn": 43,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 399,
            "endLine": 404,
            "startColumn": 43,
            "endColumn": 4
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "generator.addGeneratedValuePlan(new ValueGenerationPlan(valueGenerator,injector(property,attributeDeclarer)));\n",
            "startLine": 485,
            "endLine": 490,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "generator.addGeneratedValuePlan(new ValueGenerationPlan(value.createGenerator(identifierGeneratorFactory,dialect,rootClass),injector(property,attributeDeclarer)));\n",
            "startLine": 473,
            "endLine": 478,
            "startColumn": 6,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "1bd082bd3e7227553c4357a70ee18adc3a209264",
      "url": "https://github.com/hibernate/hibernate-orm/commit/1bd082bd3e7227553c4357a70ee18adc3a209264",
      "originalMethod": {
        "container": "org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard",
        "type": "Method",
        "name": "decomposeForUpdate",
        "filePath": "hibernate-core/src/main/java/org/hibernate/persister/entity/mutation/UpdateCoordinatorStandard.java",
        "startLine": 639,
        "endLine": 765,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard",
        "type": "Method",
        "name": "decomposeForUpdate",
        "filePath": "hibernate-core/src/main/java/org/hibernate/persister/entity/mutation/UpdateCoordinatorStandard.java",
        "startLine": 639,
        "endLine": 765,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!valuesAnalysis.tablesNeedingUpdate.contains(tableMapping))",
            "startLine": 653,
            "endLine": 655,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!valuesAnalysis.tablesNeedingUpdate.contains(tableMapping))",
            "startLine": 653,
            "endLine": 655,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 5,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 5,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < attributeIndexes.length; i++)",
            "startLine": 658,
            "endLine": 733,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < attributeIndexes.length; i++)",
            "startLine": 658,
            "endLine": 733,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(attributeMapping instanceof SingularAttributeMapping))",
            "startLine": 661,
            "endLine": 663,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(attributeMapping instanceof SingularAttributeMapping))",
            "startLine": 661,
            "endLine": 663,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 6,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 6,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysisRef.isSkipped())",
            "startLine": 666,
            "endLine": 668,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysisRef.isSkipped())",
            "startLine": 666,
            "endLine": 668,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 6,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 6,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysis.includeInSet())",
            "startLine": 672,
            "endLine": 717,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysis.includeInSet())",
            "startLine": 672,
            "endLine": 717,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entityPersister().isVersioned() && entityPersister().getVersionMapping().getVersionAttribute() == attributeMapping)",
            "startLine": 682,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entityPersister().isVersioned() && entityPersister().getVersionMapping().getVersionAttribute() == attributeMapping)",
            "startLine": 682,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 683,
            "endLine": 685,
            "startColumn": 93,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 683,
            "endLine": 685,
            "startColumn": 93,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entityPersister().getEntityMetamodel().isDynamicUpdate() && dirtinessChecker != null)",
            "startLine": 686,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entityPersister().getEntityMetamodel().isDynamicUpdate() && dirtinessChecker != null)",
            "startLine": 686,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 686,
            "endLine": 689,
            "startColumn": 103,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 686,
            "endLine": 689,
            "startColumn": 103,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=attributeAnalysis.includeInSet() && dirtinessChecker.isDirty(attributeIndex,attributeMapping);\n",
            "startLine": 687,
            "endLine": 688,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=attributeAnalysis.includeInSet() && dirtinessChecker.isDirty(attributeIndex,attributeMapping);\n",
            "startLine": 687,
            "endLine": 688,
            "startColumn": 7,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 690,
            "endLine": 692,
            "startColumn": 11,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(includeInSet)",
            "startLine": 694,
            "endLine": 716,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(includeInSet)",
            "startLine": 694,
            "endLine": 716,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeMapping.decompose(values[attributeIndex],(jdbcValue,jdbcMapping) -> {\n  if (jdbcMapping.isFormula()) {\n    return;\n  }\n  if (!jdbcMapping.isUpdateable()) {\n    return;\n  }\n  jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n}\n,session);\n",
            "startLine": 695,
            "endLine": 715,
            "startColumn": 7,
            "endColumn": 9
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeMapping.decompose(values[attributeIndex],(jdbcValue,jdbcMapping) -> {\n  if (jdbcMapping.isFormula()) {\n    return;\n  }\n  if (!jdbcMapping.isUpdateable()) {\n    return;\n  }\n  jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n}\n,session);\n",
            "startLine": 695,
            "endLine": 715,
            "startColumn": 7,
            "endColumn": 9
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(jdbcMapping.isFormula())",
            "startLine": 698,
            "endLine": 700,
            "startColumn": 10,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(jdbcMapping.isFormula())",
            "startLine": 698,
            "endLine": 700,
            "startColumn": 10,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 11,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 11,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!jdbcMapping.isUpdateable())",
            "startLine": 702,
            "endLine": 704,
            "startColumn": 10,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!jdbcMapping.isUpdateable())",
            "startLine": 702,
            "endLine": 704,
            "startColumn": 10,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 11,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 11,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n",
            "startLine": 706,
            "endLine": 712,
            "startColumn": 10,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n",
            "startLine": 706,
            "endLine": 712,
            "startColumn": 10,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysis.includeInLocking())",
            "startLine": 720,
            "endLine": 732,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(attributeAnalysis.includeInLocking())",
            "startLine": 720,
            "endLine": 732,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeAnalysis.columnLockingAnalyses.forEach((columnLockingAnalysis) -> {\n  if (columnLockingAnalysis.getLockValue() != null) {\n    jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n  }\n}\n);\n",
            "startLine": 721,
            "endLine": 731,
            "startColumn": 6,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attributeAnalysis.columnLockingAnalyses.forEach((columnLockingAnalysis) -> {\n  if (columnLockingAnalysis.getLockValue() != null) {\n    jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n  }\n}\n);\n",
            "startLine": 721,
            "endLine": 731,
            "startColumn": 6,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(columnLockingAnalysis.getLockValue() != null)",
            "startLine": 722,
            "endLine": 730,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(columnLockingAnalysis.getLockValue() != null)",
            "startLine": 722,
            "endLine": 730,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n",
            "startLine": 723,
            "endLine": 729,
            "startColumn": 8,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n",
            "startLine": 723,
            "endLine": 729,
            "startColumn": 8,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(tableMapping.isIdentifierTable() && entityPersister().hasRowId() && rowId != null)",
            "startLine": 741,
            "endLine": 763,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(tableMapping.isIdentifierTable() && entityPersister().hasRowId() && rowId != null)",
            "startLine": 741,
            "endLine": 763,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 741,
            "endLine": 750,
            "startColumn": 93,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 741,
            "endLine": 750,
            "startColumn": 93,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(rowId,tableMapping.getTableName(),entityPersister().getRowIdMapping().getRowIdName(),ParameterUsage.RESTRICT,session);\n",
            "startLine": 743,
            "endLine": 749,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcValueBindings.bindValue(rowId,tableMapping.getTableName(),entityPersister().getRowIdMapping().getRowIdName(),ParameterUsage.RESTRICT,session);\n",
            "startLine": 743,
            "endLine": 749,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 751,
            "endLine": 763,
            "startColumn": 9,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 751,
            "endLine": 763,
            "startColumn": 9,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "tableMapping.getKeyMapping().breakDownKeyJdbcValues(id,(jdbcValue,columnMapping) -> jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),columnMapping.getColumnName(),ParameterUsage.RESTRICT,session),session);\n",
            "startLine": 752,
            "endLine": 762,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "tableMapping.getKeyMapping().breakDownKeyJdbcValues(id,(jdbcValue,columnMapping) -> jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),columnMapping.getColumnName(),ParameterUsage.RESTRICT,session),session);\n",
            "startLine": 752,
            "endLine": 762,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 678,
            "endLine": 681,
            "startColumn": 91,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 678,
            "endLine": 681,
            "startColumn": 77,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=false;\n",
            "startLine": 680,
            "endLine": 680,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=false;\n",
            "startLine": 680,
            "endLine": 680,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n",
            "startLine": 738,
            "endLine": 738,
            "startColumn": 4,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n",
            "startLine": 738,
            "endLine": 738,
            "startColumn": 4,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final JdbcValueBindings jdbcValueBindings=mutationExecutor.getJdbcValueBindings();\n",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 3,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final JdbcValueBindings jdbcValueBindings=mutationExecutor.getJdbcValueBindings();\n",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 3,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 4,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 4,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int[] attributeIndexes=tableMapping.getAttributeIndexes();\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 4,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int[] attributeIndexes=tableMapping.getAttributeIndexes();\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 4,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int attributeIndex=attributeIndexes[i];\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int attributeIndex=attributeIndexes[i];\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AttributeMapping attributeMapping=entityPersister().getAttributeMappings().get(attributeIndex);\n",
            "startLine": 660,
            "endLine": 660,
            "startColumn": 5,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AttributeMapping attributeMapping=entityPersister().getAttributeMappings().get(attributeIndex);\n",
            "startLine": 660,
            "endLine": 660,
            "startColumn": 5,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AttributeAnalysis attributeAnalysisRef=valuesAnalysis.attributeAnalyses.get(attributeIndex);\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 5,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AttributeAnalysis attributeAnalysisRef=valuesAnalysis.attributeAnalyses.get(attributeIndex);\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 5,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IncludedAttributeAnalysis attributeAnalysis=(IncludedAttributeAnalysis)attributeAnalysisRef;\n",
            "startLine": 670,
            "endLine": 670,
            "startColumn": 5,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final IncludedAttributeAnalysis attributeAnalysis=(IncludedAttributeAnalysis)attributeAnalysisRef;\n",
            "startLine": 670,
            "endLine": 670,
            "startColumn": 5,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean includeInSet;\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 6,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean includeInSet;\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 6,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcOperationGroup.forEachOperation((position,operation) -> {\n  final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n  if (tableMapping.isIdentifierTable() && entityPersister().hasRowId() && rowId != null) {\n    jdbcValueBindings.bindValue(rowId,tableMapping.getTableName(),entityPersister().getRowIdMapping().getRowIdName(),ParameterUsage.RESTRICT,session);\n  }\n else {\n    tableMapping.getKeyMapping().breakDownKeyJdbcValues(id,(jdbcValue,columnMapping) -> jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),columnMapping.getColumnName(),ParameterUsage.RESTRICT,session),session);\n  }\n}\n);\n",
            "startLine": 737,
            "endLine": 764,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcOperationGroup.forEachOperation((position,operation) -> {\n  final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n  if (tableMapping.isIdentifierTable() && entityPersister().hasRowId() && rowId != null) {\n    jdbcValueBindings.bindValue(rowId,tableMapping.getTableName(),entityPersister().getRowIdMapping().getRowIdName(),ParameterUsage.RESTRICT,session);\n  }\n else {\n    tableMapping.getKeyMapping().breakDownKeyJdbcValues(id,(jdbcValue,columnMapping) -> jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),columnMapping.getColumnName(),ParameterUsage.RESTRICT,session),session);\n  }\n}\n);\n",
            "startLine": 737,
            "endLine": 764,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcOperationGroup.forEachOperation((position,operation) -> {\n  final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n  if (!valuesAnalysis.tablesNeedingUpdate.contains(tableMapping)) {\n    return;\n  }\n  final int[] attributeIndexes=tableMapping.getAttributeIndexes();\n  for (int i=0; i < attributeIndexes.length; i++) {\n    final int attributeIndex=attributeIndexes[i];\n    final AttributeMapping attributeMapping=entityPersister().getAttributeMappings().get(attributeIndex);\n    if (!(attributeMapping instanceof SingularAttributeMapping)) {\n      continue;\n    }\n    final AttributeAnalysis attributeAnalysisRef=valuesAnalysis.attributeAnalyses.get(attributeIndex);\n    if (attributeAnalysisRef.isSkipped()) {\n      continue;\n    }\n    final IncludedAttributeAnalysis attributeAnalysis=(IncludedAttributeAnalysis)attributeAnalysisRef;\n    if (attributeAnalysis.includeInSet()) {\n      final boolean includeInSet;\n      final ValueGenerationStrategy valueGeneration=attributeMapping.getValueGeneration();\n      if (isValueGenerationInSql(valueGeneration) && !((InDatabaseValueGenerationStrategy)valueGeneration).writePropertyValue()) {\n        includeInSet=false;\n      }\n else       if (entityPersister().isVersioned() && entityPersister().getVersionMapping().getVersionAttribute() == attributeMapping) {\n        includeInSet=true;\n      }\n else       if (entityPersister().getEntityMetamodel().isDynamicUpdate() && dirtinessChecker != null) {\n        includeInSet=attributeAnalysis.includeInSet() && dirtinessChecker.isDirty(attributeIndex,attributeMapping);\n      }\n else {\n        includeInSet=true;\n      }\n      if (includeInSet) {\n        attributeMapping.decompose(values[attributeIndex],(jdbcValue,jdbcMapping) -> {\n          if (jdbcMapping.isFormula()) {\n            return;\n          }\n          if (!jdbcMapping.isUpdateable()) {\n            return;\n          }\n          jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n        }\n,session);\n      }\n    }\n    if (attributeAnalysis.includeInLocking()) {\n      attributeAnalysis.columnLockingAnalyses.forEach((columnLockingAnalysis) -> {\n        if (columnLockingAnalysis.getLockValue() != null) {\n          jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n        }\n      }\n);\n    }\n  }\n}\n);\n",
            "startLine": 651,
            "endLine": 734,
            "startColumn": 3,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jdbcOperationGroup.forEachOperation((position,operation) -> {\n  final EntityTableMapping tableMapping=(EntityTableMapping)operation.getTableDetails();\n  if (!valuesAnalysis.tablesNeedingUpdate.contains(tableMapping)) {\n    return;\n  }\n  final int[] attributeIndexes=tableMapping.getAttributeIndexes();\n  for (int i=0; i < attributeIndexes.length; i++) {\n    final int attributeIndex=attributeIndexes[i];\n    final AttributeMapping attributeMapping=entityPersister().getAttributeMappings().get(attributeIndex);\n    if (!(attributeMapping instanceof SingularAttributeMapping)) {\n      continue;\n    }\n    final AttributeAnalysis attributeAnalysisRef=valuesAnalysis.attributeAnalyses.get(attributeIndex);\n    if (attributeAnalysisRef.isSkipped()) {\n      continue;\n    }\n    final IncludedAttributeAnalysis attributeAnalysis=(IncludedAttributeAnalysis)attributeAnalysisRef;\n    if (attributeAnalysis.includeInSet()) {\n      final boolean includeInSet;\n      final Generator valueGeneration=attributeMapping.getValueGeneration();\n      if (isValueGenerationInSql(valueGeneration) && !((InDatabaseGenerator)valueGeneration).writePropertyValue()) {\n        includeInSet=false;\n      }\n else       if (entityPersister().isVersioned() && entityPersister().getVersionMapping().getVersionAttribute() == attributeMapping) {\n        includeInSet=true;\n      }\n else       if (entityPersister().getEntityMetamodel().isDynamicUpdate() && dirtinessChecker != null) {\n        includeInSet=attributeAnalysis.includeInSet() && dirtinessChecker.isDirty(attributeIndex,attributeMapping);\n      }\n else {\n        includeInSet=true;\n      }\n      if (includeInSet) {\n        attributeMapping.decompose(values[attributeIndex],(jdbcValue,jdbcMapping) -> {\n          if (jdbcMapping.isFormula()) {\n            return;\n          }\n          if (!jdbcMapping.isUpdateable()) {\n            return;\n          }\n          jdbcValueBindings.bindValue(jdbcValue,tableMapping.getTableName(),jdbcMapping.getSelectionExpression(),ParameterUsage.SET,session);\n        }\n,session);\n      }\n    }\n    if (attributeAnalysis.includeInLocking()) {\n      attributeAnalysis.columnLockingAnalyses.forEach((columnLockingAnalysis) -> {\n        if (columnLockingAnalysis.getLockValue() != null) {\n          jdbcValueBindings.bindValue(columnLockingAnalysis.getLockValue(),tableMapping.getTableName(),columnLockingAnalysis.getReadExpression(),ParameterUsage.RESTRICT,session);\n        }\n      }\n);\n    }\n  }\n}\n);\n",
            "startLine": 651,
            "endLine": 734,
            "startColumn": 3,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isValueGenerationInSql(valueGeneration) && !((InDatabaseValueGenerationStrategy)valueGeneration).writePropertyValue())",
            "startLine": 677,
            "endLine": 692,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isValueGenerationInSql(valueGeneration) && !((InDatabaseGenerator)valueGeneration).writePropertyValue())",
            "startLine": 677,
            "endLine": 692,
            "startColumn": 6,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ValueGenerationStrategy valueGeneration=attributeMapping.getValueGeneration();\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 6,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Generator valueGeneration=attributeMapping.getValueGeneration();\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 6,
            "endColumn": 78
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 7,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 7,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 7,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 7,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 7,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 7,
            "endColumn": 27
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 7,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "includeInSet=true;\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 7,
            "endColumn": 27
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "1bd082bd3e7227553c4357a70ee18adc3a209264",
      "url": "https://github.com/hibernate/hibernate-orm/commit/1bd082bd3e7227553c4357a70ee18adc3a209264",
      "originalMethod": {
        "container": "org.hibernate.tuple.BaselineAttributeInformation",
        "type": "Method",
        "name": "BaselineAttributeInformation",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/BaselineAttributeInformation.java",
        "startLine": 27,
        "endLine": 46,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.tuple.BaselineAttributeInformation",
        "type": "Method",
        "name": "BaselineAttributeInformation",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/BaselineAttributeInformation.java",
        "startLine": 27,
        "endLine": 46,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.lazy=lazy;\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.lazy=lazy;\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.insertable=insertable;\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 3,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.insertable=insertable;\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 3,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.updateable=updateable;\n",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 3,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.updateable=updateable;\n",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 3,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.nullable=nullable;\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.nullable=nullable;\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.dirtyCheckable=dirtyCheckable;\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 3,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.dirtyCheckable=dirtyCheckable;\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 3,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.versionable=versionable;\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.versionable=versionable;\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 3,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.cascadeStyle=cascadeStyle;\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 3,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.cascadeStyle=cascadeStyle;\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 3,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fetchMode=fetchMode;\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 3,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.fetchMode=fetchMode;\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 3,
            "endColumn": 30
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.valueGenerationStrategy=valueGenerationStrategy;\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 3,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.generator=generator;\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 3,
            "endColumn": 30
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "1bd082bd3e7227553c4357a70ee18adc3a209264",
      "url": "https://github.com/hibernate/hibernate-orm/commit/1bd082bd3e7227553c4357a70ee18adc3a209264",
      "originalMethod": {
        "container": "org.hibernate.tuple.BaselineAttributeInformation.Builder",
        "type": "Method",
        "name": "setValueGenerationStrategy",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/BaselineAttributeInformation.java",
        "startLine": 114,
        "endLine": 117,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.hibernate.tuple.BaselineAttributeInformation.Builder",
        "type": "Method",
        "name": "setValueGenerationStrategy",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/BaselineAttributeInformation.java",
        "startLine": 114,
        "endLine": 117,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 4,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 4,
            "endColumn": 16
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.valueGenerationStrategy=valueGenerationStrategy;\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 4,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.generator=generator;\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 4,
            "endColumn": 31
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "f022d6ef3b33923491062e212623a16c903e214d",
      "url": "https://github.com/hibernate/hibernate-orm/commit/f022d6ef3b33923491062e212623a16c903e214d",
      "originalMethod": {
        "container": "org.hibernate.tuple.VmValueGeneration",
        "type": "Method",
        "name": "initialize",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/VmValueGeneration.java",
        "startLine": 26,
        "endLine": 31,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.tuple.VmValueGeneration",
        "type": "Method",
        "name": "initialize",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/VmValueGeneration.java",
        "startLine": 26,
        "endLine": 30,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.generationTiming=annotation.when().getEquivalent();\n",
            "startLine": 30,
            "endLine": 30,
            "startColumn": 3,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "generationTiming=annotation.when().getEquivalent();\n",
            "startLine": 29,
            "endLine": 29,
            "startColumn": 3,
            "endColumn": 56
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<? extends ValueGenerator<?>> generatorType=annotation.type();\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "constructor=ReflectHelper.getDefaultConstructor(annotation.type());\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 3,
            "endColumn": 74
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "constructor=ReflectHelper.getDefaultConstructor(generatorType);\n",
            "startLine": 29,
            "endLine": 29,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "constructor=ReflectHelper.getDefaultConstructor(annotation.type());\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 3,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "f022d6ef3b33923491062e212623a16c903e214d",
      "url": "https://github.com/hibernate/hibernate-orm/commit/f022d6ef3b33923491062e212623a16c903e214d",
      "originalMethod": {
        "container": "org.hibernate.cfg.annotations.PropertyBinder",
        "type": "Method",
        "name": "instantiateAndInitializeValueGeneration",
        "filePath": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/PropertyBinder.java",
        "startLine": 455,
        "endLine": 490,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.cfg.annotations.PropertyBinder",
        "type": "Method",
        "name": "instantiateAndInitializeValueGeneration",
        "filePath": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/PropertyBinder.java",
        "startLine": 455,
        "endLine": 493,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 464,
            "endLine": 489,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 464,
            "endLine": 492,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 479,
            "endLine": 481,
            "startColumn": 32,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 482,
            "endLine": 484,
            "startColumn": 32,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 4,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 483,
            "endLine": 483,
            "startColumn": 4,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 482,
            "endLine": 489,
            "startColumn": 23,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 485,
            "endLine": 492,
            "startColumn": 23,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AnnotationException(\"Exception occurred during processing of generator annotation: \" + qualify(holder.getPath(),name),e);\n",
            "startLine": 483,
            "endLine": 488,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AnnotationException(\"Exception occurred during processing of generator annotation: \" + qualify(holder.getPath(),name),e);\n",
            "startLine": 486,
            "endLine": 491,
            "startColumn": 4,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return valueGeneration;\n",
            "startLine": 477,
            "endLine": 477,
            "startColumn": 4,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return valueGeneration;\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 4,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "@SuppressWarnings(\"unchecked\") AnnotationValueGeneration<A> valueGeneration=(AnnotationValueGeneration<A>)generationType.newInstance();\n",
            "startLine": 468,
            "endLine": 469,
            "startColumn": 4,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ValueGenerationStrategy valueGeneration=generationType.newInstance();\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 4,
            "endColumn": 81
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "valueGeneration.initialize(annotation,buildingContext.getBootstrapContext().getReflectionManager().toClass(property.getType()),entityBinder.getPersistentClass().getEntityName(),property.getName());\n",
            "startLine": 470,
            "endLine": 475,
            "startColumn": 4,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "generation.initialize(annotation,buildingContext.getBootstrapContext().getReflectionManager().toClass(property.getType()),entityBinder.getPersistentClass().getEntityName(),property.getName());\n",
            "startLine": 472,
            "endLine": 477,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "f022d6ef3b33923491062e212623a16c903e214d",
      "url": "https://github.com/hibernate/hibernate-orm/commit/f022d6ef3b33923491062e212623a16c903e214d",
      "originalMethod": {
        "container": "org.hibernate.tuple.GeneratedValueGeneration",
        "type": "Method",
        "name": "initialize",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/GeneratedValueGeneration.java",
        "startLine": 32,
        "endLine": 37,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.tuple.GeneratedValueGeneration",
        "type": "Method",
        "name": "initialize",
        "filePath": "hibernate-core/src/main/java/org/hibernate/tuple/GeneratedValueGeneration.java",
        "startLine": 34,
        "endLine": 39,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "timing=annotation.value().getEquivalent();\n",
            "startLine": 34,
            "endLine": 34,
            "startColumn": 3,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "timing=annotation.value().getEquivalent();\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 3,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "writable=annotation.writable() || sql != null;\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 3,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "writable=annotation.writable() || sql != null;\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 3,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sql=isEmpty(annotation.sql()) ? null : annotation.sql();\n",
            "startLine": 35,
            "endLine": 35,
            "startColumn": 3,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sql=isEmpty(annotation.sql()) ? null : new String[]{annotation.sql()};\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 80
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "8ce224115361d3db5c275518650ffe70e60c3ed2",
      "url": "https://github.com/hibernate/hibernate-orm/commit/8ce224115361d3db5c275518650ffe70e60c3ed2",
      "originalMethod": {
        "container": "org.hibernate.id.factory.internal.StandardIdentifierGeneratorFactory",
        "type": "Method",
        "name": "getIdentifierGeneratorClass",
        "filePath": "hibernate-core/src/main/java/org/hibernate/id/factory/internal/StandardIdentifierGeneratorFactory.java",
        "startLine": 236,
        "endLine": 256,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.id.factory.internal.StandardIdentifierGeneratorFactory",
        "type": "Method",
        "name": "getIdentifierGeneratorClass",
        "filePath": "hibernate-core/src/main/java/org/hibernate/id/factory/internal/StandardIdentifierGeneratorFactory.java",
        "startLine": 235,
        "endLine": 256,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(\"hilo\".equals(strategy))",
            "startLine": 238,
            "endLine": 240,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(\"hilo\".equals(strategy))",
            "startLine": 237,
            "endLine": 239,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"Support for 'hilo' generator has been removed\");\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 4,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"Support for 'hilo' generator has been removed\");\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 4,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 246,
            "endLine": 254,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 246,
            "endLine": 251,
            "startColumn": 4,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 252,
            "endLine": 254,
            "startColumn": 37,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 249,
            "endLine": 251,
            "startColumn": 38,
            "endColumn": 5
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new MappingException(String.format(\"Could not interpret id generator strategy [%s]\",strategy));\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 4,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new MappingException(String.format(\"Could not interpret id generator strategy [%s]\",strategy));\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 5,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(generatorClass == null)",
            "startLine": 247,
            "endLine": 250,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(generatorClass == null)",
            "startLine": 245,
            "endLine": 255,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return generatorClass;\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 3,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return generatorClass;\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 4,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 247,
            "endLine": 250,
            "startColumn": 34,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 245,
            "endLine": 252,
            "startColumn": 33,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class generatorClass=legacyGeneratorClassNameMap.get(resolvedStrategy);\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 3,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<? extends IdentifierGenerator> generatorClass=legacyGeneratorClassNameMap.get(resolvedStrategy);\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 3,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String resolvedStrategy=\"native\".equals(strategy) ? getDialect().getNativeIdentifierGeneratorStrategy() : strategy;\n",
            "startLine": 241,
            "endLine": 243,
            "startColumn": 3,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String resolvedStrategy=\"native\".equals(strategy) ? getDialect().getNativeIdentifierGeneratorStrategy() : strategy;\n",
            "startLine": 240,
            "endLine": 242,
            "startColumn": 3,
            "endColumn": 16
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ClassLoaderService cls=serviceRegistry.getService(ClassLoaderService.class);\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 5,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return serviceRegistry.getService(ClassLoaderService.class).classForName(resolvedStrategy);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 5,
            "endColumn": 100
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processNext",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 83,
        "endLine": 100,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processNext",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 83,
        "endLine": 86,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 87,
            "endLine": 97,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 204,
            "endLine": 209,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 95,
            "endLine": 97,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 207,
            "endLine": 209,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (next) ResultSet position\",e);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 7,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (next) ResultSet position\",e);\n",
            "startLine": 208,
            "endLine": 208,
            "startColumn": 4,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().next()) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (next) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 85,
            "endLine": 99,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(advanceNext());\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 3,
            "endColumn": 35
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processPrevious",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 102,
        "endLine": 118,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processPrevious",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 88,
        "endLine": 91,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 106,
            "endLine": 115,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 231,
            "endLine": 236,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 113,
            "endLine": 115,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 234,
            "endLine": 236,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (previous) ResultSet position\",e);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 7,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (previous) ResultSet position\",e);\n",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 4,
            "endColumn": 87
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().previous()) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (previous) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 104,
            "endLine": 117,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(advancePrevious());\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 3,
            "endColumn": 39
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processScroll",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 120,
        "endLine": 137,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processScroll",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 93,
        "endLine": 96,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 124,
            "endLine": 134,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 99,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 132,
            "endLine": 134,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 102,
            "endLine": 104,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 7,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().relative(numberOfRows)) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 122,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(scrollRows(numberOfRows));\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 3,
            "endColumn": 48
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processPosition",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 149,
        "endLine": 166,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "processPosition",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 117,
        "endLine": 120,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 153,
            "endLine": 163,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 123,
            "endLine": 128,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 161,
            "endLine": 163,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 126,
            "endLine": 128,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 7,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 4,
            "endColumn": 85
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().absolute(position)) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (scroll) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 151,
            "endLine": 165,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(advanceToPosition(position));\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 3,
            "endColumn": 51
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "first",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 199,
        "endLine": 216,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "first",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 162,
        "endLine": 165,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 203,
            "endLine": 213,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 222,
            "endLine": 227,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 211,
            "endLine": 213,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 225,
            "endLine": 227,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (first) ResultSet position\",e);\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 7,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (first) ResultSet position\",e);\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 4,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().first()) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (first) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 201,
            "endLine": 215,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(advanceToFirst());\n",
            "startLine": 164,
            "endLine": 164,
            "startColumn": 3,
            "endColumn": 38
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/hibernate/hibernate-orm.git",
      "sha1": "c7bd022b075647bee8fd4695595a29334e036d78",
      "url": "https://github.com/hibernate/hibernate-orm/commit/c7bd022b075647bee8fd4695595a29334e036d78",
      "originalMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "last",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 249,
        "endLine": 266,
        "startColumn": 2,
        "endColumn": 3
      },
      "refactoredMethod": {
        "container": "org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl",
        "type": "Method",
        "name": "last",
        "filePath": "hibernate-core/src/main/java/org/hibernate/sql/results/jdbc/internal/JdbcValuesResultSetImpl.java",
        "startLine": 198,
        "endLine": 201,
        "startColumn": 2,
        "endColumn": 3
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 253,
            "endLine": 263,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 213,
            "endLine": 218,
            "startColumn": 3,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 261,
            "endLine": 263,
            "startColumn": 29,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 216,
            "endLine": 218,
            "startColumn": 26,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (last) ResultSet position\",e);\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 7,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw makeExecutionException(\"Error advancing (last) ResultSet position\",e);\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 4,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(() -> {\n  try {\n    if (!resultSetAccess.getResultSet().last()) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException e) {\n    throw makeExecutionException(\"Error advancing (last) ResultSet position\",e);\n  }\n}\n);\n",
            "startLine": 251,
            "endLine": 265,
            "startColumn": 3,
            "endColumn": 5
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return advance(advanceToLast());\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 3,
            "endColumn": 37
          },
          "developerConfirmation": false
        }
      ]
    }
  ]
}