{
  "results": [
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "16abca6a1525515a9ac83f4a96ea67ff64992162",
      "url": "https://github.com/JetBrains/intellij-community/commit/16abca6a1525515a9ac83f4a96ea67ff64992162",
      "originalMethod": {
        "container": "externalApp.nativessh.NativeSshAskPassApp",
        "type": "Method",
        "name": "main",
        "filePath": "platform/external-process-auth-helper/rt/src/externalApp/nativessh/NativeSshAskPassApp.java",
        "startLine": 15,
        "endLine": 43,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "externalApp.nativessh.NativeSshAskPassApp",
        "type": "Method",
        "name": "main",
        "filePath": "platform/external-process-auth-helper/rt/src/externalApp/nativessh/NativeSshAskPassApp.java",
        "startLine": 15,
        "endLine": 44,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 17,
            "endLine": 42,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 17,
            "endLine": 43,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 38,
            "endLine": 42,
            "startColumn": 25,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 39,
            "endLine": 43,
            "startColumn": 25,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 7,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 7,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 7,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 7,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(passphrase == null)",
            "startLine": 32,
            "endLine": 34,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(passphrase == null)",
            "startLine": 32,
            "endLine": 34,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 33,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 33,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(passphrase);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(passphrase);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerNo=ExternalAppUtil.getEnv(NativeSshAskPassAppHandler.IJ_SSH_ASK_PASS_HANDLER_ENV);\n",
            "startLine": 26,
            "endLine": 26,
            "startColumn": 7,
            "endColumn": 105
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerId=ExternalAppUtil.getEnv(NativeSshAskPassAppHandler.IJ_SSH_ASK_PASS_HANDLER_ENV);\n",
            "startLine": 18,
            "endLine": 18,
            "startColumn": 7,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int xmlRpcPort=ExternalAppUtil.getEnvInt(NativeSshAskPassAppHandler.IJ_SSH_ASK_PASS_PORT_ENV);\n",
            "startLine": 27,
            "endLine": 27,
            "startColumn": 7,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int idePort=ExternalAppUtil.getEnvInt(NativeSshAskPassAppHandler.IJ_SSH_ASK_PASS_PORT_ENV);\n",
            "startLine": 19,
            "endLine": 19,
            "startColumn": 7,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String response=ExternalAppUtil.sendXmlRequest(NativeSshAskPassAppHandler.RPC_METHOD_NAME,xmlRpcPort,handlerNo,description);\n",
            "startLine": 29,
            "endLine": 30,
            "startColumn": 7,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExternalAppUtil.Result result=ExternalAppUtil.sendIdeRequest(NativeSshAskPassAppHandler.ENTRY_POINT_NAME,idePort,handlerId,description);\n",
            "startLine": 23,
            "endLine": 24,
            "startColumn": 7,
            "endColumn": 94
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 19,
            "endLine": 21,
            "startColumn": 28,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 26,
            "endLine": 29,
            "startColumn": 27,
            "endColumn": 8
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(args.length > 0)",
            "startLine": 19,
            "endLine": 24,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(result.isError)",
            "startLine": 26,
            "endLine": 29,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String passphrase=ExternalAppUtil.adjustNullFrom(response);\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 7,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String passphrase=result.response;\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 7,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String description;\n",
            "startLine": 18,
            "endLine": 18,
            "startColumn": 7,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String description=args.length > 0 ? args[0] : null;\n",
            "startLine": 21,
            "endLine": 21,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "16abca6a1525515a9ac83f4a96ea67ff64992162",
      "url": "https://github.com/JetBrains/intellij-community/commit/16abca6a1525515a9ac83f4a96ea67ff64992162",
      "originalMethod": {
        "container": "git4idea.editor.GitRebaseEditorApp",
        "type": "Method",
        "name": "main",
        "filePath": "plugins/git4idea/rt/src/git4idea/editor/GitRebaseEditorApp.java",
        "startLine": 21,
        "endLine": 53,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "git4idea.editor.GitRebaseEditorApp",
        "type": "Method",
        "name": "main",
        "filePath": "plugins/git4idea/rt/src/git4idea/editor/GitRebaseEditorApp.java",
        "startLine": 17,
        "endLine": 54,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 23,
            "endLine": 52,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 19,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 48,
            "endLine": 52,
            "startColumn": 25,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 49,
            "endLine": 53,
            "startColumn": 25,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 7,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 7,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 7,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 7,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 7,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 7,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 26,
            "endLine": 26,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 22,
            "endLine": 22,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 27,
            "endLine": 27,
            "startColumn": 9,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 23,
            "endLine": 23,
            "startColumn": 9,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(ERROR_EXIT_CODE);\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(exitCode);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(exitCode);\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerNo=ExternalAppUtil.getEnv(IJ_EDITOR_HANDLER_ENV);\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 7,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerId=ExternalAppUtil.getEnv(GitRebaseEditorAppHandler.IJ_EDITOR_HANDLER_ENV);\n",
            "startLine": 26,
            "endLine": 26,
            "startColumn": 7,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Invalid amount of arguments: \" + Arrays.asList(args));\n",
            "startLine": 25,
            "endLine": 25,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Invalid arguments: \" + Arrays.asList(args));\n",
            "startLine": 21,
            "endLine": 21,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 24,
            "endLine": 28,
            "startColumn": 29,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 20,
            "endLine": 24,
            "startColumn": 29,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Invalid port number: \" + args[0]);\n",
            "startLine": 35,
            "endLine": 35,
            "startColumn": 9,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(result.error);\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int exitCode=response != null ? response.intValue() : ERROR_EXIT_CODE;\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 7,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int exitCode=Integer.parseInt(response);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer response=ExternalAppUtil.sendXmlRequest(GitRebaseEditorAppHandler.RPC_METHOD_NAME,xmlRpcPort,handlerNo,args[1],new File(\"\").getAbsolutePath());\n",
            "startLine": 42,
            "endLine": 43,
            "startColumn": 7,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String response=result.response;\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 7,
            "endColumn": 41
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "xmlRpcPort=Integer.parseInt(args[0]);\n",
            "startLine": 32,
            "endLine": 32,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int exitCode=Integer.parseInt(response);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer response=ExternalAppUtil.sendXmlRequest(GitRebaseEditorAppHandler.RPC_METHOD_NAME,xmlRpcPort,handlerNo,args[1],new File(\"\").getAbsolutePath());\n",
            "startLine": 42,
            "endLine": 43,
            "startColumn": 7,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExternalAppUtil.Result result=ExternalAppUtil.sendIdeRequest(GitRebaseEditorAppHandler.ENTRY_POINT_NAME,idePort,handlerId,bodyContent);\n",
            "startLine": 33,
            "endLine": 34,
            "startColumn": 7,
            "endColumn": 94
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "16abca6a1525515a9ac83f4a96ea67ff64992162",
      "url": "https://github.com/JetBrains/intellij-community/commit/16abca6a1525515a9ac83f4a96ea67ff64992162",
      "originalMethod": {
        "container": "git4idea.http.GitAskPassApp",
        "type": "Method",
        "name": "main",
        "filePath": "plugins/git4idea/rt/src/git4idea/http/GitAskPassApp.java",
        "startLine": 46,
        "endLine": 65,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "git4idea.http.GitAskPassApp",
        "type": "Method",
        "name": "main",
        "filePath": "plugins/git4idea/rt/src/git4idea/http/GitAskPassApp.java",
        "startLine": 45,
        "endLine": 75,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 48,
            "endLine": 64,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 47,
            "endLine": 74,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 60,
            "endLine": 64,
            "startColumn": 25,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 70,
            "endLine": 74,
            "startColumn": 25,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 7,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(t.getMessage());\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 7,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 7,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "t.printStackTrace(System.err);\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 7,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.exit(1);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(args.length < 1)",
            "startLine": 49,
            "endLine": 51,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(args.length < 1)",
            "startLine": 48,
            "endLine": 50,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"No arguments specified!\");\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"No arguments specified!\");\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int xmlRpcPort=ExternalAppUtil.getEnvInt(GitAskPassAppHandler.IJ_ASK_PASS_PORT_ENV);\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 7,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int xmlRpcPort=ExternalAppUtil.getEnvInt(GitAskPassAppHandler.IJ_ASK_PASS_PORT_ENV);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(ans);\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 7,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(ans);\n",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerNo=ExternalAppUtil.getEnv(GitAskPassAppHandler.IJ_ASK_PASS_HANDLER_ENV);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 7,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String handlerId=ExternalAppUtil.getEnv(GitAskPassAppHandler.IJ_ASK_PASS_HANDLER_ENV);\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 7,
            "endColumn": 95
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String ans=ExternalAppUtil.sendXmlRequest(GitAskPassAppHandler.RPC_METHOD_NAME,xmlRpcPort,handlerNo,args[0]);\n",
            "startLine": 56,
            "endLine": 57,
            "startColumn": 7,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String ans=result.response;\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 7,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String ans=ExternalAppUtil.sendXmlRequest(GitAskPassAppHandler.RPC_METHOD_NAME,xmlRpcPort,handlerNo,args[0]);\n",
            "startLine": 56,
            "endLine": 57,
            "startColumn": 7,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ExternalAppUtil.Result result=ExternalAppUtil.sendIdeRequest(GitAskPassAppHandler.ENTRY_POINT_NAME,xmlRpcPort,handlerId,description);\n",
            "startLine": 57,
            "endLine": 58,
            "startColumn": 7,
            "endColumn": 94
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "16abca6a1525515a9ac83f4a96ea67ff64992162",
      "url": "https://github.com/JetBrains/intellij-community/commit/16abca6a1525515a9ac83f4a96ea67ff64992162",
      "originalMethod": {
        "container": "git4idea.rebase.GitHandlerRebaseEditorManager",
        "type": "Method",
        "name": "prepareEditor",
        "filePath": "plugins/git4idea/src/git4idea/rebase/GitHandlerRebaseEditorManager.java",
        "startLine": 39,
        "endLine": 44,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "git4idea.rebase.GitHandlerRebaseEditorManager",
        "type": "Method",
        "name": "prepareEditor",
        "filePath": "plugins/git4idea/src/git4idea/rebase/GitHandlerRebaseEditorManager.java",
        "startLine": 47,
        "endLine": 63,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(myHandler.containsCustomEnvironmentVariable(GIT_EDITOR_ENV))",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(myHandler.containsCustomEnvironmentVariable(GIT_EDITOR_ENV))",
            "startLine": 48,
            "endLine": 48,
            "startColumn": 5,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myHandlerId=myService.registerHandler(myHandler,myEditorHandler);\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UUID handlerId=myService.registerHandler(myEditorHandler,executable,myDisposable);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myHandler.addCustomEnvironmentVariable(GIT_EDITOR_ENV,myService.getEditorCommand(myHandler.getExecutable()));\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 5,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myHandler.addCustomEnvironmentVariable(GIT_EDITOR_ENV,scriptFile);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 7,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myHandler.addCustomEnvironmentVariable(GitRebaseEditorAppHandler.IJ_EDITOR_HANDLER_ENV,myHandlerId.toString());\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 5,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myHandler.addCustomEnvironmentVariable(GitRebaseEditorAppHandler.IJ_EDITOR_HANDLER_ENV,handlerId.toString());\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 7,
            "endColumn": 117
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "4fa13c2470387454504baca7064747347a662e7d",
      "url": "https://github.com/JetBrains/intellij-community/commit/4fa13c2470387454504baca7064747347a662e7d",
      "originalMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection.ImplicitElse",
        "type": "Method",
        "name": "from",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 694,
        "endLine": 718,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection.ImplicitElse",
        "type": "Method",
        "name": "from",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 698,
        "endLine": 730,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseBranch.length != 0 || thenBranch.length == 0)",
            "startLine": 698,
            "endLine": 698,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseBranch.length != 0 || thenBranch.length == 0)",
            "startLine": 702,
            "endLine": 702,
            "startColumn": 7,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse == null)",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 7,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse == null)",
            "startLine": 715,
            "endLine": 715,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse.myImplicitElseStatements.isEmpty())",
            "startLine": 704,
            "endLine": 704,
            "startColumn": 7,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse.myImplicitElseStatements.isEmpty())",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 7,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse.myImplicitElseStatements.size() == 1)",
            "startLine": 705,
            "endLine": 710,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implicitElse.myImplicitElseStatements.size() == 1)",
            "startLine": 717,
            "endLine": 722,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement statement=implicitElse.myImplicitElseStatements.get(0);\n",
            "startLine": 706,
            "endLine": 706,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement statement=implicitElse.myImplicitElseStatements.get(0);\n",
            "startLine": 718,
            "endLine": 718,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(statement instanceof PsiReturnStatement)",
            "startLine": 707,
            "endLine": 709,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(statement instanceof PsiReturnStatement)",
            "startLine": 719,
            "endLine": 721,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(((PsiReturnStatement)statement).getReturnValue() == null)",
            "startLine": 708,
            "endLine": 708,
            "startColumn": 11,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(((PsiReturnStatement)statement).getReturnValue() == null)",
            "startLine": 720,
            "endLine": 720,
            "startColumn": 11,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!branchesAreEquivalent(thenBranch,elseStatements,new LocalEquivalenceChecker(variables)))",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 7,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!branchesAreEquivalent(thenBranch,elseStatements,new LocalEquivalenceChecker(variables)))",
            "startLine": 728,
            "endLine": 728,
            "startColumn": 7,
            "endColumn": 115
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement lastThenStatement=thenBranch[thenBranch.length - 1];\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 7,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement lastThenStatement=thenBranch[thenBranch.length - 1];\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 7,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 700,
            "endLine": 700,
            "startColumn": 63,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 713,
            "endLine": 713,
            "startColumn": 32,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> elseStatements=implicitElse.myImplicitElseStatements;\n",
            "startLine": 711,
            "endLine": 711,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> elseStatements=implicitElse.myImplicitElseStatements;\n",
            "startLine": 723,
            "endLine": 723,
            "startColumn": 7,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<PsiLocalVariable> variables=new HashSet<>();\n",
            "startLine": 712,
            "endLine": 712,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<PsiLocalVariable> variables=new HashSet<>();\n",
            "startLine": 724,
            "endLine": 724,
            "startColumn": 7,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> thenStatements=new ArrayList<>(Arrays.asList(thenBranch));\n",
            "startLine": 713,
            "endLine": 713,
            "startColumn": 7,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> thenStatements=new ArrayList<>(Arrays.asList(thenBranch));\n",
            "startLine": 725,
            "endLine": 725,
            "startColumn": 7,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addLocalVariables(variables,thenStatements);\n",
            "startLine": 714,
            "endLine": 714,
            "startColumn": 7,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addLocalVariables(variables,thenStatements);\n",
            "startLine": 726,
            "endLine": 726,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "addLocalVariables(variables,implicitElse.myImplicitElseStatements);\n",
            "startLine": 715,
            "endLine": 715,
            "startColumn": 7,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "addLocalVariables(variables,implicitElse.myImplicitElseStatements);\n",
            "startLine": 727,
            "endLine": 727,
            "startColumn": 7,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new ImplicitElse(implicitElse.myIfWithImplicitElse);\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 7,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new ImplicitElse(implicitElse.myIfWithImplicitElse);\n",
            "startLine": 729,
            "endLine": 729,
            "startColumn": 7,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ImplicitElseData implicitElse=getIfWithImplicitElse(ifStatement,thenBranch,returnsNothing);\n",
            "startLine": 702,
            "endLine": 702,
            "startColumn": 7,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ImplicitElseData implicitElse=getIfWithImplicitElse(ifStatement,thenBranch,jumpKeyword,basicJumpStatement);\n",
            "startLine": 714,
            "endLine": 714,
            "startColumn": 7,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean returnsNothing=((PsiReturnStatement)lastThenStatement).getReturnValue() == null;\n",
            "startLine": 701,
            "endLine": 701,
            "startColumn": 7,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "basicJumpStatement=((PsiReturnStatement)lastThenStatement).getReturnValue() == null;\n",
            "startLine": 708,
            "endLine": 708,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(lastThenStatement instanceof PsiReturnStatement))",
            "startLine": 700,
            "endLine": 700,
            "startColumn": 7,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lastThenStatement instanceof PsiReturnStatement)",
            "startLine": 706,
            "endLine": 712,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "4fa13c2470387454504baca7064747347a662e7d",
      "url": "https://github.com/JetBrains/intellij-community/commit/4fa13c2470387454504baca7064747347a662e7d",
      "originalMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection.ElseIf",
        "type": "Method",
        "name": "from",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 1160,
        "endLine": 1180,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection.ElseIf",
        "type": "Method",
        "name": "from",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 1172,
        "endLine": 1189,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ifStatement.getCondition() == null)",
            "startLine": 1163,
            "endLine": 1163,
            "startColumn": 7,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ifStatement.getCondition() == null)",
            "startLine": 1175,
            "endLine": 1175,
            "startColumn": 7,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIf == null)",
            "startLine": 1165,
            "endLine": 1165,
            "startColumn": 7,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIf == null)",
            "startLine": 1177,
            "endLine": 1177,
            "startColumn": 7,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfCondition == null)",
            "startLine": 1167,
            "endLine": 1167,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfCondition == null)",
            "startLine": 1179,
            "endLine": 1179,
            "startColumn": 7,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfThenBranch == null)",
            "startLine": 1169,
            "endLine": 1169,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfThenBranch == null)",
            "startLine": 1181,
            "endLine": 1181,
            "startColumn": 7,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfElseBranch == null)",
            "startLine": 1172,
            "endLine": 1172,
            "startColumn": 7,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfElseBranch == null)",
            "startLine": 1184,
            "endLine": 1184,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfThen.length != thenStatements.length)",
            "startLine": 1173,
            "endLine": 1173,
            "startColumn": 7,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(elseIfThen.length != thenStatements.length)",
            "startLine": 1185,
            "endLine": 1185,
            "startColumn": 7,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!branchesAreEquivalent(thenStatements,Arrays.asList(elseIfThen),equivalence))",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 7,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!branchesAreEquivalent(thenStatements,Arrays.asList(elseIfThen),equivalence))",
            "startLine": 1187,
            "endLine": 1187,
            "startColumn": 7,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseBranch=ifStatement.getElseBranch();\n",
            "startLine": 1162,
            "endLine": 1162,
            "startColumn": 7,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseBranch=ifStatement.getElseBranch();\n",
            "startLine": 1174,
            "endLine": 1174,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement elseIf=tryCast(ControlFlowUtils.stripBraces(elseBranch),PsiIfStatement.class);\n",
            "startLine": 1164,
            "endLine": 1164,
            "startColumn": 7,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement elseIf=tryCast(ControlFlowUtils.stripBraces(elseBranch),PsiIfStatement.class);\n",
            "startLine": 1176,
            "endLine": 1176,
            "startColumn": 7,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiExpression elseIfCondition=elseIf.getCondition();\n",
            "startLine": 1166,
            "endLine": 1166,
            "startColumn": 7,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiExpression elseIfCondition=elseIf.getCondition();\n",
            "startLine": 1178,
            "endLine": 1178,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseIfThenBranch=elseIf.getThenBranch();\n",
            "startLine": 1168,
            "endLine": 1168,
            "startColumn": 7,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseIfThenBranch=elseIf.getThenBranch();\n",
            "startLine": 1180,
            "endLine": 1180,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement[] elseIfThen=ControlFlowUtils.unwrapBlock(elseIfThenBranch);\n",
            "startLine": 1170,
            "endLine": 1170,
            "startColumn": 7,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement[] elseIfThen=ControlFlowUtils.unwrapBlock(elseIfThenBranch);\n",
            "startLine": 1182,
            "endLine": 1182,
            "startColumn": 7,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseIfElseBranch=elseIf.getElseBranch();\n",
            "startLine": 1171,
            "endLine": 1171,
            "startColumn": 7,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement elseIfElseBranch=elseIf.getElseBranch();\n",
            "startLine": 1183,
            "endLine": 1183,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new ElseIf(elseBranch,elseIfElseBranch,elseIfThenBranch,elseIfCondition,equivalence.mySubstitutionTable);\n",
            "startLine": 1179,
            "endLine": 1179,
            "startColumn": 7,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new ElseIf(elseBranch,elseIfElseBranch,elseIfThenBranch,elseIfCondition,equivalence.mySubstitutionTable);\n",
            "startLine": 1188,
            "endLine": 1188,
            "startColumn": 7,
            "endColumn": 123
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocalEquivalenceChecker equivalence=new LocalEquivalenceChecker(variables);\n",
            "startLine": 1177,
            "endLine": 1177,
            "startColumn": 7,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocalEquivalenceChecker equivalence=getChecker(thenStatements,elseIfThen);\n",
            "startLine": 1186,
            "endLine": 1186,
            "startColumn": 7,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "4fa13c2470387454504baca7064747347a662e7d",
      "url": "https://github.com/JetBrains/intellij-community/commit/4fa13c2470387454504baca7064747347a662e7d",
      "originalMethod": {
        "container": "com.siyeh.igtest.controlflow.if_statement_with_identical_branches.NotADup",
        "type": "Method",
        "name": "m",
        "filePath": "plugins/InspectionGadgets/test/com/siyeh/igtest/controlflow/if_statement_with_identical_branches/IfStatementWithIdenticalBranches.java",
        "startLine": 166,
        "endLine": 175,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.siyeh.igtest.controlflow.if_statement_with_identical_branches.NotADup",
        "type": "Method",
        "name": "m",
        "filePath": "plugins/InspectionGadgets/test/com/siyeh/igtest/controlflow/if_statement_with_identical_branches/IfStatementWithIdenticalBranches.java",
        "startLine": 176,
        "endLine": 185,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int j;\n",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int j;\n",
            "startLine": 177,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Super Constructor Invocation",
            "expression": "<warning>super();\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 5,
            "endColumn": 13
          },
          "rightSideLocation": {
            "type": "Super Constructor Invocation",
            "expression": "<weak_warning>super();\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 5,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "4fa13c2470387454504baca7064747347a662e7d",
      "url": "https://github.com/JetBrains/intellij-community/commit/4fa13c2470387454504baca7064747347a662e7d",
      "originalMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection",
        "type": "Method",
        "name": "getIfWithImplicitElse",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 604,
        "endLine": 660,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.siyeh.ig.controlflow.IfStatementWithIdenticalBranchesInspection",
        "type": "Method",
        "name": "getIfWithImplicitElse",
        "filePath": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/controlflow/IfStatementWithIdenticalBranchesInspection.java",
        "startLine": 604,
        "endLine": 664,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(statementsLength == 0)",
            "startLine": 618,
            "endLine": 618,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(statementsLength == 0)",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 623,
            "endLine": 643,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(true)",
            "startLine": 624,
            "endLine": 644,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf.getElseBranch() != null)",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 7,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf.getElseBranch() != null)",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 7,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf != ifStatement && ControlFlowUtils.unwrapBlock(currentIf.getThenBranch()).length != 1)",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 7,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf != ifStatement && ControlFlowUtils.unwrapBlock(currentIf.getThenBranch()).length != 1)",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 7,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf.getCondition() != null && SideEffectChecker.mayHaveSideEffects(currentIf.getCondition()))",
            "startLine": 626,
            "endLine": 628,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(currentIf.getCondition() != null && SideEffectChecker.mayHaveSideEffects(currentIf.getCondition()))",
            "startLine": 627,
            "endLine": 629,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conditionHasSideEffects=true;\n",
            "startLine": 627,
            "endLine": 627,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conditionHasSideEffects=true;\n",
            "startLine": 628,
            "endLine": 628,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement sibling=currentIf;\n",
            "startLine": 629,
            "endLine": 629,
            "startColumn": 7,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiStatement sibling=currentIf;\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 7,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Do Statement",
            "expression": "do(count <= statementsLength)",
            "startLine": 630,
            "endLine": 637,
            "startColumn": 7,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Do Statement",
            "expression": "do(count <= statementsLength)",
            "startLine": 631,
            "endLine": 638,
            "startColumn": 7,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 630,
            "endLine": 636,
            "startColumn": 10,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 631,
            "endLine": 637,
            "startColumn": 10,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sibling=PsiTreeUtil.getNextSiblingOfType(sibling,PsiStatement.class);\n",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sibling=PsiTreeUtil.getNextSiblingOfType(sibling,PsiStatement.class);\n",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sibling == null)",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sibling == null)",
            "startLine": 633,
            "endLine": 633,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!isMeaningful(sibling))",
            "startLine": 633,
            "endLine": 633,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!isMeaningful(sibling))",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "count++;\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 9,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "count++;\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 9,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "statements.add(sibling);\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "statements.add(sibling);\n",
            "startLine": 636,
            "endLine": 636,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!statements.isEmpty())",
            "startLine": 638,
            "endLine": 638,
            "startColumn": 7,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!statements.isEmpty())",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 7,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement enclosingIf=getEnclosingIfStmt(currentIf);\n",
            "startLine": 640,
            "endLine": 640,
            "startColumn": 7,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement enclosingIf=getEnclosingIfStmt(currentIf);\n",
            "startLine": 641,
            "endLine": 641,
            "startColumn": 7,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(enclosingIf == null)",
            "startLine": 641,
            "endLine": 641,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(enclosingIf == null)",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentIf=enclosingIf;\n",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 7,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentIf=enclosingIf;\n",
            "startLine": 643,
            "endLine": 643,
            "startColumn": 7,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(conditionHasSideEffects && ifStatement != currentIf)",
            "startLine": 644,
            "endLine": 644,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(conditionHasSideEffects && ifStatement != currentIf)",
            "startLine": 645,
            "endLine": 645,
            "startColumn": 5,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(parent instanceof PsiCodeBlock))",
            "startLine": 647,
            "endLine": 647,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(parent instanceof PsiCodeBlock))",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(count == statementsLength || count == statementsLength - 1)",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 7,
            "endColumn": 122
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(count == statementsLength || count == statementsLength - 1)",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 7,
            "endColumn": 122
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(parent.getParent() instanceof PsiMethod))",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(parent.getParent() instanceof PsiMethod))",
            "startLine": 650,
            "endLine": 650,
            "startColumn": 7,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!statements.isEmpty())",
            "startLine": 649,
            "endLine": 651,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!statements.isEmpty())",
            "startLine": 651,
            "endLine": 653,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(PsiTreeUtil.getNextSiblingOfType(statements.get(statements.size() - 1),PsiStatement.class) != null)",
            "startLine": 650,
            "endLine": 650,
            "startColumn": 7,
            "endColumn": 124
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(PsiTreeUtil.getNextSiblingOfType(statements.get(statements.size() - 1),PsiStatement.class) != null)",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 9,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(count == statementsLength)",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 7,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(count == statementsLength)",
            "startLine": 660,
            "endLine": 662,
            "startColumn": 10,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 652,
            "endLine": 655,
            "startColumn": 25,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 656,
            "endLine": 659,
            "startColumn": 29,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int statementsLength=thenStatements.length;\n",
            "startLine": 617,
            "endLine": 617,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int statementsLength=thenStatements.length;\n",
            "startLine": 618,
            "endLine": 618,
            "startColumn": 5,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement currentIf=ifStatement;\n",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiIfStatement currentIf=ifStatement;\n",
            "startLine": 620,
            "endLine": 620,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> statements=new ArrayList<>();\n",
            "startLine": 620,
            "endLine": 620,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<PsiStatement> statements=new ArrayList<>();\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int count=0;\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 5,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int count=0;\n",
            "startLine": 622,
            "endLine": 622,
            "startColumn": 5,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean conditionHasSideEffects=false;\n",
            "startLine": 622,
            "endLine": 622,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean conditionHasSideEffects=false;\n",
            "startLine": 623,
            "endLine": 623,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiElement parent=currentIf.getParent();\n",
            "startLine": 646,
            "endLine": 646,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "PsiElement parent=currentIf.getParent();\n",
            "startLine": 647,
            "endLine": 647,
            "startColumn": 5,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new ImplicitElseData(statements,currentIf);\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 38,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new ImplicitElseData(statements,currentIf);\n",
            "startLine": 661,
            "endLine": 661,
            "startColumn": 7,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(returnsNothing)",
            "startLine": 652,
            "endLine": 658,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(basicJumpStatement)",
            "startLine": 656,
            "endLine": 662,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 656,
            "endLine": 658,
            "startColumn": 10,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 660,
            "endLine": 662,
            "startColumn": 41,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "456195648b6fc2336e2203977729cafab8907de4",
      "url": "https://github.com/JetBrains/intellij-community/commit/456195648b6fc2336e2203977729cafab8907de4",
      "originalMethod": {
        "container": "com.intellij.codeInspection.ui.SwingOptPaneRenderer",
        "type": "Method",
        "name": "render",
        "filePath": "platform/lang-api/src/com/intellij/codeInspection/ui/SwingOptPaneRenderer.java",
        "startLine": 13,
        "endLine": 41,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.intellij.codeInspection.ui.SwingOptPaneRenderer",
        "type": "Method",
        "name": "render",
        "filePath": "platform/lang-api/src/com/intellij/codeInspection/ui/SwingOptPaneRenderer.java",
        "startLine": 11,
        "endLine": 35,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(component: pane.components())",
            "startLine": 17,
            "endLine": 39,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(component: pane.components())",
            "startLine": 14,
            "endLine": 33,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptCheckbox checkbox)",
            "startLine": 18,
            "endLine": 38,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptCheckbox checkbox)",
            "startLine": 15,
            "endLine": 32,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 18,
            "endLine": 21,
            "startColumn": 54,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 15,
            "endLine": 18,
            "startColumn": 54,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.addCheckbox(checkbox.label().label(),checkbox.bindId());\n",
            "startLine": 19,
            "endLine": 19,
            "startColumn": 9,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.addCheckbox(checkbox.label().label(),checkbox.bindId());\n",
            "startLine": 16,
            "endLine": 16,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptNumber number)",
            "startLine": 22,
            "endLine": 38,
            "startColumn": 12,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptNumber number)",
            "startLine": 19,
            "endLine": 32,
            "startColumn": 12,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptCustom custom)",
            "startLine": 29,
            "endLine": 38,
            "startColumn": 12,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(component instanceof OptCustom custom)",
            "startLine": 26,
            "endLine": 32,
            "startColumn": 12,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 36,
            "endLine": 38,
            "startColumn": 12,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 30,
            "endLine": 32,
            "startColumn": 12,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"Control \" + component.getClass() + \" is not supported yet\");\n",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 9,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"Control \" + component.getClass() + \" is not supported yet\");\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 9,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocMessage.PrefixSuffix prefixSuffix=number.splitLabel().splitLabel();\n",
            "startLine": 23,
            "endLine": 23,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LocMessage.PrefixSuffix prefixSuffix=number.splitLabel().splitLabel();\n",
            "startLine": 20,
            "endLine": 20,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.addLabeledRow(prefixSuffix.prefix(),field);\n",
            "startLine": 25,
            "endLine": 25,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.addLabeledRow(prefixSuffix.prefix(),field);\n",
            "startLine": 22,
            "endLine": 22,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.add(jComponent);\n",
            "startLine": 34,
            "endLine": 34,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "panel.add(jComponent);\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return panel;\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 5,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return panel;\n",
            "startLine": 34,
            "endLine": 34,
            "startColumn": 5,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 22,
            "endLine": 28,
            "startColumn": 55,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 19,
            "endLine": 25,
            "startColumn": 55,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 29,
            "endLine": 35,
            "startColumn": 55,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 26,
            "endLine": 29,
            "startColumn": 55,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JFormattedTextField field=SingleIntegerFieldOptionsPanel.createIntegerFieldTrackingValue(entry,number.bindId(),4);\n",
            "startLine": 24,
            "endLine": 24,
            "startColumn": 9,
            "endColumn": 127
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JFormattedTextField field=SingleIntegerFieldOptionsPanel.createIntegerFieldTrackingValue(tool,number.bindId(),4);\n",
            "startLine": 21,
            "endLine": 21,
            "startColumn": 9,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InspectionOptionsPanel panel=new InspectionOptionsPanel(entry);\n",
            "startLine": 16,
            "endLine": 16,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InspectionOptionsPanel panel=new InspectionOptionsPanel(tool);\n",
            "startLine": 13,
            "endLine": 13,
            "startColumn": 5,
            "endColumn": 69
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JComponent jComponent=controls.get(custom);\n",
            "startLine": 30,
            "endLine": 30,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JComponent jComponent=customControls.getCustomOptionComponent(custom,panel);\n",
            "startLine": 27,
            "endLine": 27,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "76933b41cd974a245058de86e632178f503e1632",
      "url": "https://github.com/JetBrains/intellij-community/commit/76933b41cd974a245058de86e632178f503e1632",
      "originalMethod": {
        "container": "com.intellij.psi.codeStyle.CodeStyleSettingsManager",
        "type": "Method",
        "name": "fireCodeStyleSettingsChanged",
        "filePath": "platform/code-style-api/src/com/intellij/psi/codeStyle/CodeStyleSettingsManager.java",
        "startLine": 311,
        "endLine": 315,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.intellij.psi.codeStyle.CodeStyleSettingsManager",
        "type": "Method",
        "name": "fireCodeStyleSettingsChanged",
        "filePath": "platform/code-style-api/src/com/intellij/psi/codeStyle/CodeStyleSettingsManager.java",
        "startLine": 313,
        "endLine": 324,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(listener: myListeners)",
            "startLine": 312,
            "endLine": 314,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(listener: myListeners)",
            "startLine": 333,
            "endLine": 335,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.codeStyleSettingsChanged(new CodeStyleSettingsChangeEvent(file));\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.codeStyleSettingsChanged(new CodeStyleSettingsChangeEvent(getProject(),null));\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 7,
            "endColumn": 95
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 312,
            "endLine": 314,
            "startColumn": 60,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 318,
            "endLine": 320,
            "startColumn": 23,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.codeStyleSettingsChanged(new CodeStyleSettingsChangeEvent(file));\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.codeStyleSettingsChanged(new CodeStyleSettingsChangeEvent(getProject(),file));\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 7,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(listener: myListeners)",
            "startLine": 312,
            "endLine": 314,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(listener: myListeners)",
            "startLine": 327,
            "endLine": 329,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "76933b41cd974a245058de86e632178f503e1632",
      "url": "https://github.com/JetBrains/intellij-community/commit/76933b41cd974a245058de86e632178f503e1632",
      "originalMethod": {
        "container": "com.intellij.application.options.codeStyle.cache.CodeStyleCachedValueProvider.AsyncComputation",
        "type": "Method",
        "name": "notifyCachedValueComputed",
        "filePath": "platform/code-style-impl/src/com/intellij/application/options/codeStyle/cache/CodeStyleCachedValueProvider.java",
        "startLine": 260,
        "endLine": 285,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.intellij.application.options.codeStyle.cache.CodeStyleCachedValueProvider.AsyncComputation",
        "type": "Method",
        "name": "notifyCachedValueComputed",
        "filePath": "platform/code-style-impl/src/com/intellij/application/options/codeStyle/cache/CodeStyleCachedValueProvider.java",
        "startLine": 260,
        "endLine": 282,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(myOldTrackerSetting < newTrackerSetting && !myInsideRestartedComputation)",
            "startLine": 264,
            "endLine": 273,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(myOldTrackerSetting < newTrackerSetting && !myInsideRestartedComputation)",
            "startLine": 264,
            "endLine": 273,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myInsideRestartedComputation=true;\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myInsideRestartedComputation=true;\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 266,
            "endLine": 270,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 266,
            "endLine": 270,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "start();\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 11,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "start();\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 11,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 268,
            "endLine": 270,
            "startColumn": 19,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 268,
            "endLine": 270,
            "startColumn": 19,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myInsideRestartedComputation=false;\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 11,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myInsideRestartedComputation=false;\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 11,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 9,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 9,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(runnable: myScheduledRunnables)",
            "startLine": 275,
            "endLine": 277,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(runnable: myScheduledRunnables)",
            "startLine": 275,
            "endLine": 277,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "runnable.run();\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "runnable.run();\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!myProject.isDisposed())",
            "startLine": 278,
            "endLine": 283,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!myProject.isDisposed())",
            "startLine": 278,
            "endLine": 280,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "@SuppressWarnings(\"deprecation\") CodeStyleSettings currSettings=mySettingsManager.getCurrentSettings();\n",
            "startLine": 261,
            "endLine": 262,
            "startColumn": 7,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "@SuppressWarnings(\"deprecation\") CodeStyleSettings currSettings=mySettingsManager.getCurrentSettings();\n",
            "startLine": 261,
            "endLine": 262,
            "startColumn": 7,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long newTrackerSetting=currSettings.getModificationTracker().getModificationCount();\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 7,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long newTrackerSetting=currSettings.getModificationTracker().getModificationCount();\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myComputation.reset();\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myComputation.reset();\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CodeStyleSettingsManager.getInstance(myProject).fireCodeStyleSettingsChanged(psiFile);\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 11,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CodeStyleSettingsManager.getInstance(myProject).fireCodeStyleSettingsChanged(myViewProvider.getVirtualFile());\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 9,
            "endColumn": 119
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "76933b41cd974a245058de86e632178f503e1632",
      "url": "https://github.com/JetBrains/intellij-community/commit/76933b41cd974a245058de86e632178f503e1632",
      "originalMethod": {
        "container": "com.intellij.openapi.editor.impl.EditorImpl",
        "type": "Method",
        "name": "codeStyleSettingsChanged",
        "filePath": "platform/platform-impl/src/com/intellij/openapi/editor/impl/EditorImpl.java",
        "startLine": 4980,
        "endLine": 4998,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.intellij.openapi.editor.impl.EditorImpl",
        "type": "Method",
        "name": "codeStyleSettingsChanged",
        "filePath": "platform/platform-impl/src/com/intellij/openapi/editor/impl/EditorImpl.java",
        "startLine": 4978,
        "endLine": 4996,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(myProject != null)",
            "startLine": 4982,
            "endLine": 4997,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(myProject != null)",
            "startLine": 4980,
            "endLine": 4995,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(oldTabSize != newTabSize)",
            "startLine": 4990,
            "endLine": 4996,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(oldTabSize != newTabSize)",
            "startLine": 4988,
            "endLine": 4994,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4990,
            "endLine": 4992,
            "startColumn": 37,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4988,
            "endLine": 4990,
            "startColumn": 37,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "reinitSettings(false);\n",
            "startLine": 4991,
            "endLine": 4991,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "reinitSettings(false);\n",
            "startLine": 4989,
            "endLine": 4989,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4993,
            "endLine": 4996,
            "startColumn": 12,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4991,
            "endLine": 4994,
            "startColumn": 12,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myEditorComponent.repaint();\n",
            "startLine": 4995,
            "endLine": 4995,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myEditorComponent.repaint();\n",
            "startLine": 4993,
            "endLine": 4993,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 4985,
            "endLine": 4985,
            "startColumn": 47,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 4983,
            "endLine": 4983,
            "startColumn": 9,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int oldTabSize=EditorUtil.getTabSize(this);\n",
            "startLine": 4987,
            "endLine": 4987,
            "startColumn": 7,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int oldTabSize=EditorUtil.getTabSize(this);\n",
            "startLine": 4985,
            "endLine": 4985,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "mySettings.reinitSettings();\n",
            "startLine": 4988,
            "endLine": 4988,
            "startColumn": 7,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "mySettings.reinitSettings();\n",
            "startLine": 4986,
            "endLine": 4986,
            "startColumn": 7,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int newTabSize=EditorUtil.getTabSize(this);\n",
            "startLine": 4989,
            "endLine": 4989,
            "startColumn": 7,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int newTabSize=EditorUtil.getTabSize(this);\n",
            "startLine": 4987,
            "endLine": 4987,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4983,
            "endLine": 4986,
            "startColumn": 39,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 4982,
            "endLine": 4984,
            "startColumn": 69,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(editorFile != event.getPsiFile())",
            "startLine": 4985,
            "endLine": 4985,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(eventFile != null && !eventFile.equals(getVirtualFile()))",
            "startLine": 4982,
            "endLine": 4984,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/JetBrains/intellij-community.git",
      "sha1": "690324a9b3ada0c04572a242d4153f31d406326a",
      "url": "https://github.com/JetBrains/intellij-community/commit/690324a9b3ada0c04572a242d4153f31d406326a",
      "originalMethod": {
        "container": "com.intellij.diff.impl.CacheDiffRequestProcessor",
        "type": "Method",
        "name": "updateRequest",
        "filePath": "platform/diff-impl/src/com/intellij/diff/impl/CacheDiffRequestProcessor.java",
        "startLine": 94,
        "endLine": 123,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "com.intellij.diff.impl.CacheDiffRequestProcessor",
        "type": "Method",
        "name": "updateRequest",
        "filePath": "platform/diff-impl/src/com/intellij/diff/impl/CacheDiffRequestProcessor.java",
        "startLine": 98,
        "endLine": 135,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isDisposed())",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isDisposed())",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(requestProvider == null)",
            "startLine": 101,
            "endLine": 104,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(requestProvider == null)",
            "startLine": 104,
            "endLine": 108,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(cachedRequest != null)",
            "startLine": 107,
            "endLine": 110,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(cachedRequest != null)",
            "startLine": 111,
            "endLine": 115,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ApplicationManager.getApplication().assertIsDispatchThread();\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ApplicationManager.getApplication().assertIsDispatchThread();\n",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final T requestProvider=getCurrentRequestProvider();\n",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final T requestProvider=getCurrentRequestProvider();\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 7,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 7,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DiffRequest cachedRequest=useCache ? loadRequestFast(requestProvider) : null;\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DiffRequest cachedRequest=useCache ? loadRequestFast(requestProvider) : null;\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 5,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 7,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 7,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myQueue.abort();\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 5,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myQueue.abort();\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 7,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "myQueue.executeAndTryWait(indicator -> {\n  final DiffRequest request=doLoadRequest(requestProvider,indicator);\n  return () -> {\n    myRequestCache.put(requestProvider,request);\n    applyRequest(request,force,scrollToChangePolicy);\n  }\n;\n}\n,() -> applyRequest(new LoadingDiffRequest(getRequestName(requestProvider)),force,scrollToChangePolicy),getFastLoadingTimeMillis());\n",
            "startLine": 112,
            "endLine": 122,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "myQueue.executeAndTryWait(indicator -> {\n  final DiffRequest request=doLoadRequest(requestProvider,indicator);\n  return () -> finishRequestLoading(request,force,scrollToChangePolicy,requestProvider);\n}\n,() -> applyRequest(new LoadingDiffRequest(getRequestName(requestProvider)),force,scrollToChangePolicy),getFastLoadingTimeMillis());\n",
            "startLine": 127,
            "endLine": 134,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DiffRequest request=doLoadRequest(requestProvider,indicator);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DiffRequest request=doLoadRequest(requestProvider,indicator);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(request,force,scrollToChangePolicy);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 11,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(request,force,scrollToChangePolicy);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(NoDiffRequest.INSTANCE,force,scrollToChangePolicy);\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "finishUpdate(NoDiffRequest.INSTANCE,force,scrollToChangePolicy);\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 7,
            "endColumn": 73
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(cachedRequest,force,scrollToChangePolicy);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 7,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "finishUpdate(cachedRequest,force,scrollToChangePolicy);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 7,
            "endColumn": 64
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return () -> {\n  myRequestCache.put(requestProvider,request);\n  applyRequest(request,force,scrollToChangePolicy);\n}\n;\n",
            "startLine": 115,
            "endLine": 118,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return () -> finishRequestLoading(request,force,scrollToChangePolicy,requestProvider);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(NoDiffRequest.INSTANCE,force,scrollToChangePolicy);\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(request,force,scrollToChangePolicy);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(cachedRequest,force,scrollToChangePolicy);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 7,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "applyRequest(request,force,scrollToChangePolicy);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}