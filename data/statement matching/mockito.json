{
  "results": [
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "8f4af189a9f98190c1ead3aff630e05cda721a89",
      "url": "https://github.com/mockito/mockito/commit/8f4af189a9f98190c1ead3aff630e05cda721a89",
      "originalMethod": {
        "container": "org.mockito.internal.invocation.MatcherApplicationStrategy",
        "type": "Method",
        "name": "forEachMatcherAndArgument",
        "filePath": "src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java",
        "startLine": 60,
        "endLine": 91,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.invocation.MatcherApplicationStrategy",
        "type": "Method",
        "name": "forEachMatcherAndArgument",
        "filePath": "src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java",
        "startLine": 44,
        "endLine": 77,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < arguments.length; i++)",
            "startLine": 82,
            "endLine": 89,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < arguments.length; i++)",
            "startLine": 83,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!action.apply(matcher,argument))",
            "startLine": 86,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!action.apply(matcher,argument))",
            "startLine": 87,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 17,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 17,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ArgumentMatcher<?> matcher=matchers.get(i);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 13,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ArgumentMatcher<?> matcher=matchers.get(i);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object argument=arguments[i];\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 13,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object argument=arguments[i];\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 13,
            "endColumn": 44
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 77,
            "endLine": 79,
            "startColumn": 67,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 87,
            "endLine": 89,
            "startColumn": 51,
            "endColumn": 14
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 13,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 17,
            "endColumn": 30
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object[] arguments=invocation.getArguments();\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return argsMatch(invocation.getArguments(),matchers,action);\n",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 13,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "3e910ea990e61b29ec76d8b47a6d1b1607d9da3f",
      "url": "https://github.com/mockito/mockito/commit/3e910ea990e61b29ec76d8b47a6d1b1607d9da3f",
      "originalMethod": {
        "container": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        "type": "Method",
        "name": "answer",
        "filePath": "src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "startLine": 42,
        "endLine": 64,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        "type": "Method",
        "name": "answer",
        "filePath": "src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "startLine": 45,
        "endLine": 74,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(defaultReturnValue != null)",
            "startLine": 46,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(defaultReturnValue != null)",
            "startLine": 49,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return defaultReturnValue;\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 13,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return defaultReturnValue;\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 13,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type == null)",
            "startLine": 55,
            "endLine": 57,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type == null)",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 29,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 29,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object defaultReturnValue=delegate.answer(invocation);\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object defaultReturnValue=delegate.answer(invocation);\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return RetrieveGenericsForDefaultAnswers.returnTypeForMockWithCorrectGenerics(invocation,new RetrieveGenericsForDefaultAnswers.AnswerCallback(){\n  @Override public Object apply(  Class<?> type){\n    if (type == null) {\n      return null;\n    }\n    return Mockito.mock(type,new ThrowsSmartNullPointer(invocation,LocationFactory.create()));\n  }\n}\n);\n",
            "startLine": 50,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return RetrieveGenericsForDefaultAnswers.returnTypeForMockWithCorrectGenerics(invocation,new RetrieveGenericsForDefaultAnswers.AnswerCallback(){\n  @Override public Object apply(  Class<?> type){\n    if (type == null) {\n      return null;\n    }\n    MockCreationSettings<?> mockSettings=MockUtil.getMockSettings(invocation.getMock());\n    Answer<?> defaultAnswer=new ThrowsSmartNullPointer(invocation,LocationFactory.create());\n    return Mockito.mock(type,new MockSettingsImpl<>().defaultAnswer(defaultAnswer).mockMaker(mockSettings.getMockMaker()));\n  }\n}\n);\n",
            "startLine": 53,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 20
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Mockito.mock(type,new ThrowsSmartNullPointer(invocation,LocationFactory.create()));\n",
            "startLine": 59,
            "endLine": 61,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Answer<?> defaultAnswer=new ThrowsSmartNullPointer(invocation,LocationFactory.create());\n",
            "startLine": 64,
            "endLine": 65,
            "startColumn": 25,
            "endColumn": 98
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Mockito.mock(type,new ThrowsSmartNullPointer(invocation,LocationFactory.create()));\n",
            "startLine": 59,
            "endLine": 61,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Mockito.mock(type,new MockSettingsImpl<>().defaultAnswer(defaultAnswer).mockMaker(mockSettings.getMockMaker()));\n",
            "startLine": 67,
            "endLine": 71,
            "startColumn": 25,
            "endColumn": 82
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "3e910ea990e61b29ec76d8b47a6d1b1607d9da3f",
      "url": "https://github.com/mockito/mockito/commit/3e910ea990e61b29ec76d8b47a6d1b1607d9da3f",
      "originalMethod": {
        "container": "org.mockito.internal.util.MockUtil",
        "type": "Method",
        "name": "getMockHandler",
        "filePath": "src/main/java/org/mockito/internal/util/MockUtil.java",
        "startLine": 68,
        "endLine": 81,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.util.MockUtil",
        "type": "Method",
        "name": "getMockHandler",
        "filePath": "src/main/java/org/mockito/internal/util/MockUtil.java",
        "startLine": 114,
        "endLine": 121,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mock == null)",
            "startLine": 69,
            "endLine": 71,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mock == null)",
            "startLine": 151,
            "endLine": 153,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotAMockException(\"Argument should be a mock, but is null!\");\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 13,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotAMockException(\"Argument should be a mock, but is null!\");\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(handler != null)",
            "startLine": 76,
            "endLine": 80,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(handler != null)",
            "startLine": 116,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 76,
            "endLine": 78,
            "startColumn": 30,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 116,
            "endLine": 118,
            "startColumn": 30,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return handler;\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 13,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return handler;\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 13,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 78,
            "endLine": 80,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 118,
            "endLine": 120,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 13,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 13,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "mock=resolve(mock);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "mock=resolve(mock);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler handler=mockMaker.getHandler(mock);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler handler=getMockHandlerOrNull(mock);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler handler=mockMaker.getHandler(mock);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler<?> handler=mockMaker.getHandler(mock);\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 13,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "url": "https://github.com/mockito/mockito/commit/73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "originalMethod": {
        "container": "org.mockitointegration.NoByteCodeDependenciesTest",
        "type": "Method",
        "name": "pure_mockito_should_not_depend_bytecode_libraries",
        "filePath": "src/test/java/org/mockitointegration/NoByteCodeDependenciesTest.java",
        "startLine": 18,
        "endLine": 49,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockitointegration.NoByteCodeDependenciesTest",
        "type": "Method",
        "name": "pure_mockito_should_not_depend_bytecode_libraries",
        "filePath": "src/test/java/org/mockitointegration/NoByteCodeDependenciesTest.java",
        "startLine": 18,
        "endLine": 52,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(pureMockitoAPIClass: pureMockitoAPIClasses)",
            "startLine": 46,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(pureMockitoAPIClass: pureMockitoAPIClasses)",
            "startLine": 49,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClassLoader classLoader_without_bytecode_libraries=ClassLoaders.excludingClassLoader().withCodeSourceUrlOf(Mockito.class,Matcher.class).withCodeSourceUrlOf(coverageTool()).without(\"net.bytebuddy\",\"org.objenesis\").build();\n",
            "startLine": 21,
            "endLine": 26,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClassLoader classLoader_without_bytecode_libraries=ClassLoaders.excludingClassLoader().withCodeSourceUrlOf(Mockito.class,Matcher.class).withCodeSourceUrlOf(coverageTool()).without(\"net.bytebuddy\",\"org.objenesis\").build();\n",
            "startLine": 21,
            "endLine": 26,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> pureMockitoAPIClasses=ClassLoaders.in(classLoader_without_bytecode_libraries).omit(\"bytebuddy\",\"runners\",\"junit\",\"JUnit\",\"opentest4j\").listOwnedClasses();\n",
            "startLine": 28,
            "endLine": 31,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> pureMockitoAPIClasses=ClassLoaders.in(classLoader_without_bytecode_libraries).omit(\"bytebuddy\",\"runners\",\"junit\",\"JUnit\",\"opentest4j\").listOwnedClasses();\n",
            "startLine": 28,
            "endLine": 31,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.instance.DefaultInstantiatorProvider\");\n",
            "startLine": 32,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.instance.DefaultInstantiatorProvider\");\n",
            "startLine": 32,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.instance.ObjenesisInstantiator\");\n",
            "startLine": 34,
            "endLine": 35,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.instance.ObjenesisInstantiator\");\n",
            "startLine": 34,
            "endLine": 35,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.debugging.LocationImpl\");\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.debugging.LocationImpl\");\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.exceptions.stacktrace.StackTraceFilter\");\n",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 9,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.exceptions.stacktrace.StackTraceFilter\");\n",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.util.MockUtil\");\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.util.MockUtil\");\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.util.reflection.InstrumentationMemberAccessor\");\n",
            "startLine": 43,
            "endLine": 44,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.util.reflection.InstrumentationMemberAccessor\");\n",
            "startLine": 43,
            "endLine": 44,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkDependency(classLoader_without_bytecode_libraries,pureMockitoAPIClass);\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 13,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checker.checkLoadability(pureMockitoAPIClass);\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "url": "https://github.com/mockito/mockito/commit/73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "originalMethod": {
        "container": "org.mockitointegration.NoJUnitDependenciesTest",
        "type": "Method",
        "name": "pure_mockito_should_not_depend_JUnit___ByteBuddy",
        "filePath": "src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java",
        "startLine": 23,
        "endLine": 56,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockitointegration.NoJUnitDependenciesTest",
        "type": "Method",
        "name": "pure_mockito_should_not_depend_JUnit___ByteBuddy",
        "filePath": "src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java",
        "startLine": 23,
        "endLine": 58,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(pureMockitoAPIClass: pureMockitoAPIClasses)",
            "startLine": 53,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(pureMockitoAPIClass: pureMockitoAPIClasses)",
            "startLine": 55,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assume.assumeTrue(\"ByteBuddyMockMaker\".equals(Plugins.getMockMaker().getClass().getSimpleName()));\n",
            "startLine": 25,
            "endLine": 26,
            "startColumn": 9,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Assume.assumeTrue(\"ByteBuddyMockMaker\".equals(Plugins.getMockMaker().getClass().getSimpleName()));\n",
            "startLine": 25,
            "endLine": 26,
            "startColumn": 9,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClassLoader classLoader_without_JUnit=ClassLoaders.excludingClassLoader().withCodeSourceUrlOf(Mockito.class,Matcher.class,ByteBuddy.class,ByteBuddyAgent.class,Objenesis.class).withCodeSourceUrlOf(coverageTool()).without(\"junit\",\"org.junit\",\"org.opentest4j\").build();\n",
            "startLine": 28,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ClassLoader classLoader_without_JUnit=ClassLoaders.excludingClassLoader().withCodeSourceUrlOf(Mockito.class,Matcher.class,ByteBuddy.class,ByteBuddyAgent.class,Objenesis.class).withCodeSourceUrlOf(coverageTool()).without(\"junit\",\"org.junit\",\"org.opentest4j\").build();\n",
            "startLine": 28,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> pureMockitoAPIClasses=ClassLoaders.in(classLoader_without_JUnit).omit(\"runners\",\"junit\",\"JUnit\",\"opentest4j\").listOwnedClasses();\n",
            "startLine": 40,
            "endLine": 43,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> pureMockitoAPIClasses=ClassLoaders.in(classLoader_without_JUnit).omit(\"runners\",\"junit\",\"JUnit\",\"opentest4j\").listOwnedClasses();\n",
            "startLine": 40,
            "endLine": 43,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker\");\n",
            "startLine": 50,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pureMockitoAPIClasses.remove(\"org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker\");\n",
            "startLine": 52,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkDependency(classLoader_without_JUnit,\"org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker\");\n",
            "startLine": 47,
            "endLine": 49,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checker.checkLoadability(\"org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker\");\n",
            "startLine": 50,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkDependency(classLoader_without_JUnit,pureMockitoAPIClass);\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 13,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checker.checkLoadability(pureMockitoAPIClass);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "url": "https://github.com/mockito/mockito/commit/73a861f778e117ad0ccd7388b8d7a614e65c1623",
      "originalMethod": {
        "container": "org.mockitousage.internal.debugging.LocationImplTest",
        "type": "Method",
        "name": "provides_location_class",
        "filePath": "src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java",
        "startLine": 50,
        "endLine": 62,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockitousage.internal.debugging.LocationFactoryTest",
        "type": "Method",
        "name": "provides_location_class",
        "filePath": "src/test/java/org/mockitousage/internal/debugging/LocationFactoryTest.java",
        "startLine": 25,
        "endLine": 37,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> files=new ArrayList<String>();\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> files=new ArrayList<String>();\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"LocationImplTest.java\",files.get(0));\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"LocationFactoryTest.java\",files.get(0));\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "new Runnable(){\n  public void run(){\n    files.add(new LocationImpl().getSourceFile());\n  }\n}\n.run();\n",
            "startLine": 54,
            "endLine": 58,
            "startColumn": 9,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "new Runnable(){\n  public void run(){\n    files.add(LocationFactory.create().getSourceFile());\n  }\n}\n.run();\n",
            "startLine": 29,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 17
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "files.add(new LocationImpl().getSourceFile());\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 17,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "files.add(LocationFactory.create().getSourceFile());\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 17,
            "endColumn": 69
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "70cf2d2f48506fca24f16963e9c3d2223898ae5a",
      "url": "https://github.com/mockito/mockito/commit/70cf2d2f48506fca24f16963e9c3d2223898ae5a",
      "originalMethod": {
        "container": "org.mockito.internal.stubbing.StrictnessSelector",
        "type": "Method",
        "name": "determineStrictness",
        "filePath": "src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java",
        "startLine": 16,
        "endLine": 39,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.stubbing.StrictnessSelector",
        "type": "Method",
        "name": "determineStrictness",
        "filePath": "src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java",
        "startLine": 16,
        "endLine": 39,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(stubbing != null && stubbing.getStrictness() != null)",
            "startLine": 30,
            "endLine": 32,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(stubbing != null && stubbing.getStrictness() != null)",
            "startLine": 30,
            "endLine": 32,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return stubbing.getStrictness();\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 13,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return stubbing.getStrictness();\n",
            "startLine": 31,
            "endLine": 31,
            "startColumn": 13,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return testLevelStrictness;\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return testLevelStrictness;\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mockSettings.isLenient())",
            "startLine": 34,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mockSettings.getStrictness() != null)",
            "startLine": 34,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "f6ce1bb04fe0d0ca65f88e4395dea528b6b749bc",
      "url": "https://github.com/mockito/mockito/commit/f6ce1bb04fe0d0ca65f88e4395dea528b6b749bc",
      "originalMethod": {
        "container": "org.mockito.internal.stubbing.answers.InvocationInfo",
        "type": "Method",
        "name": "isValidException",
        "filePath": "src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java",
        "startLine": 27,
        "endLine": 37,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.stubbing.answers.InvocationInfo",
        "type": "Method",
        "name": "isValidException",
        "filePath": "src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java",
        "startLine": 30,
        "endLine": 36,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 31,
            "endLine": 33,
            "startColumn": 61,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 31,
            "endLine": 33,
            "startColumn": 50,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 32,
            "endLine": 32,
            "startColumn": 17,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 32,
            "endLine": 32,
            "startColumn": 13,
            "endColumn": 25
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<?>[] exceptions=method.getExceptionTypes();\n",
            "startLine": 28,
            "endLine": 28,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?>[] exceptions=method.getExceptionTypes();\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Class<?> throwableClass=throwable.getClass();\n",
            "startLine": 29,
            "endLine": 29,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> throwableClass=throwable.getClass();\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(exception.isAssignableFrom(throwableClass))",
            "startLine": 31,
            "endLine": 33,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(exception.isAssignableFrom(throwableClass))",
            "startLine": 72,
            "endLine": 74,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 30,
            "endLine": 34,
            "startColumn": 47,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 71,
            "endLine": 75,
            "startColumn": 53,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "8cdf0cce796a3497460de93abbe395108feae74c",
      "url": "https://github.com/mockito/mockito/commit/8cdf0cce796a3497460de93abbe395108feae74c",
      "originalMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMakerTest",
        "type": "Method",
        "name": "should_leave_causing_stack",
        "filePath": "src/test/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMakerTest.java",
        "startLine": 246,
        "endLine": 267,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMakerTest",
        "type": "Method",
        "name": "should_leave_causing_stack",
        "filePath": "src/test/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMakerTest.java",
        "startLine": 241,
        "endLine": 267,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockSettingsImpl<ExceptionThrowingClass> settings=new MockSettingsImpl<>();\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockSettingsImpl<ExceptionThrowingClass> settings=new MockSettingsImpl<>();\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "settings.setTypeToMock(ExceptionThrowingClass.class);\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "settings.setTypeToMock(ExceptionThrowingClass.class);\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "settings.defaultAnswer(Answers.CALLS_REAL_METHODS);\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "settings.defaultAnswer(Answers.CALLS_REAL_METHODS);\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<ExceptionThrowingClass> proxy=mockMaker.createSpy(settings,new MockHandlerImpl<>(settings),new ExceptionThrowingClass());\n",
            "startLine": 252,
            "endLine": 254,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<ExceptionThrowingClass> proxy=mockMaker.createSpy(settings,new MockHandlerImpl<>(settings),new ExceptionThrowingClass());\n",
            "startLine": 247,
            "endLine": 249,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotNull(\"Stack trace from mockito expected\",returnedStack);\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertNotNull(\"Stack trace from mockito expected\",returnedStack);\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"internalThrowException\",returnedStack[0].getMethodName());\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"internalThrowException\",exceptionClassElements.get(0).getMethodName());\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(ExceptionThrowingClass.class.getName(),returnedStack[0].getClassName());\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<StackTraceElement> exceptionClassElements=Arrays.stream(returnedStack).filter(element -> element.getClassName().equals(ExceptionThrowingClass.class.getName())).collect(Collectors.toList());\n",
            "startLine": 256,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StackTraceElement[] returnedStack=null;\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StackTraceElement[] returnedStack=assertThrows(IOException.class,() -> proxy.get().throwException()).getStackTrace();\n",
            "startLine": 251,
            "endLine": 252,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "returnedStack=ex.getStackTrace();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 13,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "StackTraceElement[] returnedStack=assertThrows(IOException.class,() -> proxy.get().throwException()).getStackTrace();\n",
            "startLine": 251,
            "endLine": 252,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(ExceptionThrowingClass.class.getName(),returnedStack[0].getClassName());\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"throwException\",exceptionClassElements.get(2).getMethodName());\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "47ef05814784183cd5c1d297078e2ad7e31cce34",
      "url": "https://github.com/mockito/mockito/commit/47ef05814784183cd5c1d297078e2ad7e31cce34",
      "originalMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker",
        "type": "Method",
        "name": "InlineByteBuddyMockMaker",
        "filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java",
        "startLine": 202,
        "endLine": 287,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker",
        "type": "Method",
        "name": "InlineByteBuddyMockMaker",
        "filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java",
        "startLine": 204,
        "endLine": 292,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(INITIALIZATION_ERROR != null)",
            "startLine": 203,
            "endLine": 234,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(INITIALIZATION_ERROR != null)",
            "startLine": 205,
            "endLine": 236,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String detail;\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String detail;\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(System.getProperty(\"java.specification.vendor\",\"\").toLowerCase().contains(\"android\"))",
            "startLine": 205,
            "endLine": 226,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(System.getProperty(\"java.specification.vendor\",\"\").toLowerCase().contains(\"android\"))",
            "startLine": 207,
            "endLine": 228,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 207,
            "endLine": 210,
            "startColumn": 43,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 209,
            "endLine": 212,
            "startColumn": 43,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are trying to run this mock maker on Android which does not support the instrumentation API.\";\n",
            "startLine": 208,
            "endLine": 209,
            "startColumn": 17,
            "endColumn": 141
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are trying to run this mock maker on Android which does not support the instrumentation API.\";\n",
            "startLine": 210,
            "endLine": 211,
            "startColumn": 17,
            "endColumn": 141
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 210,
            "endLine": 226,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 212,
            "endLine": 228,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 211,
            "endLine": 225,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 213,
            "endLine": 227,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Class.forName(\"javax.tools.ToolProvider\").getMethod(\"getSystemJavaCompiler\").invoke(null) == null)",
            "startLine": 212,
            "endLine": 221,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Class.forName(\"javax.tools.ToolProvider\").getMethod(\"getSystemJavaCompiler\").invoke(null) == null)",
            "startLine": 214,
            "endLine": 223,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 215,
            "endLine": 218,
            "startColumn": 38,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 217,
            "endLine": 220,
            "startColumn": 38,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are running on a JRE. Either install a JDK or add JNA to the class path.\";\n",
            "startLine": 216,
            "endLine": 217,
            "startColumn": 25,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are running on a JRE. Either install a JDK or add JNA to the class path.\";\n",
            "startLine": 218,
            "endLine": 219,
            "startColumn": 25,
            "endColumn": 129
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 218,
            "endLine": 221,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 220,
            "endLine": 223,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if your JDK does not supply a working agent attachment mechanism.\";\n",
            "startLine": 219,
            "endLine": 220,
            "startColumn": 25,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if your JDK does not supply a working agent attachment mechanism.\";\n",
            "startLine": 221,
            "endLine": 222,
            "startColumn": 25,
            "endColumn": 115
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ignored)",
            "startLine": 222,
            "endLine": 225,
            "startColumn": 45,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ignored)",
            "startLine": 224,
            "endLine": 227,
            "startColumn": 45,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are running an incomplete JVM installation that might not support all tooling APIs\";\n",
            "startLine": 223,
            "endLine": 224,
            "startColumn": 21,
            "endColumn": 135
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "detail=\"It appears as if you are running an incomplete JVM installation that might not support all tooling APIs\";\n",
            "startLine": 225,
            "endLine": 226,
            "startColumn": 21,
            "endColumn": 135
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new MockitoInitializationException(join(\"Could not initialize inline Byte Buddy mock maker.\",\"\",detail,Platform.describe()),INITIALIZATION_ERROR);\n",
            "startLine": 227,
            "endLine": 233,
            "startColumn": 13,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new MockitoInitializationException(join(\"Could not initialize inline Byte Buddy mock maker.\",\"\",detail,Platform.describe()),INITIALIZATION_ERROR);\n",
            "startLine": 229,
            "endLine": 235,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isSuspended.get())",
            "startLine": 240,
            "endLine": 244,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isSuspended.get())",
            "startLine": 242,
            "endLine": 246,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 240,
            "endLine": 242,
            "startColumn": 44,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 242,
            "endLine": 244,
            "startColumn": 44,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 25,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 25,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mockitoConstruction.get() || currentConstruction.get() != null)",
            "startLine": 242,
            "endLine": 244,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mockitoConstruction.get() || currentConstruction.get() != null)",
            "startLine": 244,
            "endLine": 246,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 25,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 25,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptors != null && interceptors.containsKey(type))",
            "startLine": 246,
            "endLine": 251,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptors != null && interceptors.containsKey(type))",
            "startLine": 248,
            "endLine": 253,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 246,
            "endLine": 249,
            "startColumn": 81,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 248,
            "endLine": 251,
            "startColumn": 81,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentConstruction.set(type);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 25,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentConstruction.set(type);\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 25,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 25,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 25,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 249,
            "endLine": 251,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 251,
            "endLine": 253,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 25,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 25,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 260,
            "endLine": 275,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 264,
            "endLine": 279,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<Class<?>,BiConsumer<Object,MockedConstruction.Context>> interceptors=mockedConstruction.get();\n",
            "startLine": 261,
            "endLine": 262,
            "startColumn": 25,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<Class<?>,BiConsumer<Object,MockedConstruction.Context>> interceptors=mockedConstruction.get();\n",
            "startLine": 265,
            "endLine": 266,
            "startColumn": 25,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptors != null)",
            "startLine": 263,
            "endLine": 272,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptors != null)",
            "startLine": 267,
            "endLine": 276,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BiConsumer<Object,MockedConstruction.Context> interceptor=interceptors.get(type);\n",
            "startLine": 264,
            "endLine": 265,
            "startColumn": 29,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BiConsumer<Object,MockedConstruction.Context> interceptor=interceptors.get(type);\n",
            "startLine": 268,
            "endLine": 269,
            "startColumn": 29,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptor != null)",
            "startLine": 266,
            "endLine": 271,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(interceptor != null)",
            "startLine": 270,
            "endLine": 275,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "interceptor.accept(object,new InlineConstructionMockContext(arguments,object.getClass(),parameterTypeNames));\n",
            "startLine": 267,
            "endLine": 270,
            "startColumn": 33,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "interceptor.accept(object,new InlineConstructionMockContext(arguments,object.getClass(),parameterTypeNames));\n",
            "startLine": 271,
            "endLine": 274,
            "startColumn": 33,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 273,
            "endLine": 275,
            "startColumn": 31,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 277,
            "endLine": 279,
            "startColumn": 31,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "isSuspended.set(false);\n",
            "startLine": 274,
            "endLine": 274,
            "startColumn": 25,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "isSuspended.set(false);\n",
            "startLine": 278,
            "endLine": 278,
            "startColumn": 25,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<Class<?>,?> interceptors=mockedConstruction.get();\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 21,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<Class<?>,?> interceptors=mockedConstruction.get();\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 21,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadLocal<Class<?>> currentConstruction=new ThreadLocal<>();\n",
            "startLine": 236,
            "endLine": 236,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadLocal<Class<?>> currentConstruction=new ThreadLocal<>();\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadLocal<Boolean> isSuspended=ThreadLocal.withInitial(() -> false);\n",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadLocal<Boolean> isSuspended=ThreadLocal.withInitial(() -> false);\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Predicate<Class<?>> isMockConstruction=type -> {\n  if (isSuspended.get()) {\n    return false;\n  }\n else   if (mockitoConstruction.get() || currentConstruction.get() != null) {\n    return true;\n  }\n  Map<Class<?>,?> interceptors=mockedConstruction.get();\n  if (interceptors != null && interceptors.containsKey(type)) {\n    currentConstruction.set(type);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n;\n",
            "startLine": 238,
            "endLine": 252,
            "startColumn": 9,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Predicate<Class<?>> isMockConstruction=type -> {\n  if (isSuspended.get()) {\n    return false;\n  }\n else   if (mockitoConstruction.get() || currentConstruction.get() != null) {\n    return true;\n  }\n  Map<Class<?>,?> interceptors=mockedConstruction.get();\n  if (interceptors != null && interceptors.containsKey(type)) {\n    currentConstruction.set(type);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n;\n",
            "startLine": 240,
            "endLine": 254,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentConstruction.remove();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 21,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentConstruction.remove();\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 21,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "isSuspended.set(true);\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 21,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "isSuspended.set(true);\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 21,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bytecodeGenerator=new TypeCachingBytecodeGenerator(new InlineBytecodeGenerator(INSTRUMENTATION,mocks,mockedStatics,isMockConstruction,onConstruction),true);\n",
            "startLine": 278,
            "endLine": 286,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bytecodeGenerator=new TypeCachingBytecodeGenerator(new InlineBytecodeGenerator(INSTRUMENTATION,mocks,mockedStatics,isMockConstruction,onConstruction),true);\n",
            "startLine": 283,
            "endLine": 291,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructionCallback onConstruction=(type,object,arguments,parameterTypeNames) -> {\n  if (mockitoConstruction.get() || currentConstruction.get() != type) {\n    return;\n  }\n  currentConstruction.remove();\n  isSuspended.set(true);\n  try {\n    Map<Class<?>,BiConsumer<Object,MockedConstruction.Context>> interceptors=mockedConstruction.get();\n    if (interceptors != null) {\n      BiConsumer<Object,MockedConstruction.Context> interceptor=interceptors.get(type);\n      if (interceptor != null) {\n        interceptor.accept(object,new InlineConstructionMockContext(arguments,object.getClass(),parameterTypeNames));\n      }\n    }\n  }\n  finally {\n    isSuspended.set(false);\n  }\n}\n;\n",
            "startLine": 253,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ConstructionCallback onConstruction=(type,object,arguments,parameterTypeNames) -> {\n  if (mockitoConstruction.get()) {\n    return currentSpied.get();\n  }\n else   if (currentConstruction.get() != type) {\n    return null;\n  }\n  currentConstruction.remove();\n  isSuspended.set(true);\n  try {\n    Map<Class<?>,BiConsumer<Object,MockedConstruction.Context>> interceptors=mockedConstruction.get();\n    if (interceptors != null) {\n      BiConsumer<Object,MockedConstruction.Context> interceptor=interceptors.get(type);\n      if (interceptor != null) {\n        interceptor.accept(object,new InlineConstructionMockContext(arguments,object.getClass(),parameterTypeNames));\n      }\n    }\n  }\n  finally {\n    isSuspended.set(false);\n  }\n  return null;\n}\n;\n",
            "startLine": 255,
            "endLine": 281,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 255,
            "endLine": 257,
            "startColumn": 89,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 257,
            "endLine": 259,
            "startColumn": 52,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mockitoConstruction.get() || currentConstruction.get() != type)",
            "startLine": 255,
            "endLine": 257,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(mockitoConstruction.get())",
            "startLine": 257,
            "endLine": 261,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 25,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 25,
            "endColumn": 37
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(mockitoConstruction.get() || currentConstruction.get() != type)",
            "startLine": 255,
            "endLine": 257,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(currentConstruction.get() != type)",
            "startLine": 259,
            "endLine": 261,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 254,
            "endLine": 276,
            "startColumn": 66,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 256,
            "endLine": 281,
            "startColumn": 66,
            "endColumn": 18
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "47ef05814784183cd5c1d297078e2ad7e31cce34",
      "url": "https://github.com/mockito/mockito/commit/47ef05814784183cd5c1d297078e2ad7e31cce34",
      "originalMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.ConstructorShortcut",
        "type": "Method",
        "name": "wrap",
        "filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java",
        "startLine": 388,
        "endLine": 585,
        "startColumn": 9,
        "endColumn": 10
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.ConstructorShortcut",
        "type": "Method",
        "name": "wrap",
        "filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java",
        "startLine": 392,
        "endLine": 645,
        "startColumn": 9,
        "endColumn": 10
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(instrumentedMethod.isConstructor() && !instrumentedType.represents(Object.class))",
            "startLine": 397,
            "endLine": 583,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(instrumentedMethod.isConstructor() && !instrumentedType.represents(Object.class))",
            "startLine": 401,
            "endLine": 643,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(constructor: constructors)",
            "startLine": 407,
            "endLine": 413,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(constructor: constructors)",
            "startLine": 411,
            "endLine": 417,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(constructor.getParameters().size() < arguments && (!visible || constructor.isPackagePrivate()))",
            "startLine": 408,
            "endLine": 412,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(constructor.getParameters().size() < arguments && (!visible || constructor.isPackagePrivate()))",
            "startLine": 412,
            "endLine": 416,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 409,
            "endLine": 412,
            "startColumn": 78,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 413,
            "endLine": 416,
            "startColumn": 78,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "current=constructor;\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 25,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "current=constructor;\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 25,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "visible=constructor.isPackagePrivate();\n",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 25,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "visible=constructor.isPackagePrivate();\n",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 25,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(current != null)",
            "startLine": 414,
            "endLine": 582,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(current != null)",
            "startLine": 418,
            "endLine": 642,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5))",
            "startLine": 438,
            "endLine": 452,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5))",
            "startLine": 445,
            "endLine": 459,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 440,
            "endLine": 442,
            "startColumn": 75,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 447,
            "endLine": 449,
            "startColumn": 75,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 33,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 33,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 442,
            "endLine": 452,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 449,
            "endLine": 459,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedType.getName());\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 33,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedType.getName());\n",
            "startLine": 450,
            "endLine": 450,
            "startColumn": 33,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n",
            "startLine": 444,
            "endLine": 451,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n",
            "startLine": 451,
            "endLine": 458,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(type: selected.getParameters().asTypeList().asErasures())",
            "startLine": 465,
            "endLine": 482,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(type: selected.getParameters().asTypeList().asErasures())",
            "startLine": 472,
            "endLine": 489,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 466,
            "endLine": 482,
            "startColumn": 89,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 473,
            "endLine": 489,
            "startColumn": 89,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class))",
            "startLine": 467,
            "endLine": 481,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class))",
            "startLine": 474,
            "endLine": 488,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 471,
            "endLine": 473,
            "startColumn": 72,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 478,
            "endLine": 480,
            "startColumn": 72,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ICONST_0);\n",
            "startLine": 472,
            "endLine": 472,
            "startColumn": 37,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ICONST_0);\n",
            "startLine": 479,
            "endLine": 479,
            "startColumn": 37,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(long.class))",
            "startLine": 473,
            "endLine": 481,
            "startColumn": 40,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(long.class))",
            "startLine": 480,
            "endLine": 488,
            "startColumn": 40,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 473,
            "endLine": 475,
            "startColumn": 73,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 480,
            "endLine": 482,
            "startColumn": 73,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.LCONST_0);\n",
            "startLine": 474,
            "endLine": 474,
            "startColumn": 37,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.LCONST_0);\n",
            "startLine": 481,
            "endLine": 481,
            "startColumn": 37,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(float.class))",
            "startLine": 475,
            "endLine": 481,
            "startColumn": 40,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(float.class))",
            "startLine": 482,
            "endLine": 488,
            "startColumn": 40,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 475,
            "endLine": 477,
            "startColumn": 74,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 482,
            "endLine": 484,
            "startColumn": 74,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.FCONST_0);\n",
            "startLine": 476,
            "endLine": 476,
            "startColumn": 37,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.FCONST_0);\n",
            "startLine": 483,
            "endLine": 483,
            "startColumn": 37,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(double.class))",
            "startLine": 477,
            "endLine": 481,
            "startColumn": 40,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.represents(double.class))",
            "startLine": 484,
            "endLine": 488,
            "startColumn": 40,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 477,
            "endLine": 479,
            "startColumn": 75,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 484,
            "endLine": 486,
            "startColumn": 75,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DCONST_0);\n",
            "startLine": 478,
            "endLine": 478,
            "startColumn": 37,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DCONST_0);\n",
            "startLine": 485,
            "endLine": 485,
            "startColumn": 37,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 479,
            "endLine": 481,
            "startColumn": 40,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 486,
            "endLine": 488,
            "startColumn": 40,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ACONST_NULL);\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 37,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ACONST_NULL);\n",
            "startLine": 487,
            "endLine": 487,
            "startColumn": 37,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5))",
            "startLine": 490,
            "endLine": 504,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5))",
            "startLine": 497,
            "endLine": 511,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 492,
            "endLine": 494,
            "startColumn": 75,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 499,
            "endLine": 501,
            "startColumn": 75,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n",
            "startLine": 493,
            "endLine": 493,
            "startColumn": 33,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n",
            "startLine": 500,
            "endLine": 500,
            "startColumn": 33,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 494,
            "endLine": 504,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 501,
            "endLine": 511,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedType.getName());\n",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 33,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedType.getName());\n",
            "startLine": 502,
            "endLine": 502,
            "startColumn": 33,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n",
            "startLine": 496,
            "endLine": 503,
            "startColumn": 33,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n",
            "startLine": 503,
            "endLine": 510,
            "startColumn": 33,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: instrumentedMethod.getParameters())",
            "startLine": 510,
            "endLine": 535,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: instrumentedMethod.getParameters())",
            "startLine": 517,
            "endLine": 542,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 511,
            "endLine": 535,
            "startColumn": 73,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 518,
            "endLine": 542,
            "startColumn": 73,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DUP);\n",
            "startLine": 512,
            "endLine": 512,
            "startColumn": 33,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DUP);\n",
            "startLine": 519,
            "endLine": 519,
            "startColumn": 33,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(index++);\n",
            "startLine": 513,
            "endLine": 513,
            "startColumn": 33,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(index++);\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 33,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n",
            "startLine": 514,
            "endLine": 516,
            "startColumn": 33,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n",
            "startLine": 521,
            "endLine": 523,
            "startColumn": 33,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n",
            "startLine": 517,
            "endLine": 518,
            "startColumn": 33,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n",
            "startLine": 524,
            "endLine": 525,
            "startColumn": 33,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parameter.getType().isPrimitive())",
            "startLine": 519,
            "endLine": 533,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parameter.getType().isPrimitive())",
            "startLine": 526,
            "endLine": 540,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n",
            "startLine": 520,
            "endLine": 526,
            "startColumn": 37,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n",
            "startLine": 527,
            "endLine": 533,
            "startColumn": 37,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n",
            "startLine": 527,
            "endLine": 532,
            "startColumn": 37,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n",
            "startLine": 534,
            "endLine": 539,
            "startColumn": 37,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.AASTORE);\n",
            "startLine": 534,
            "endLine": 534,
            "startColumn": 33,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.AASTORE);\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(typeDescription: instrumentedMethod.getParameters().asTypeList().asErasures())",
            "startLine": 540,
            "endLine": 546,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(typeDescription: instrumentedMethod.getParameters().asTypeList().asErasures())",
            "startLine": 547,
            "endLine": 553,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 541,
            "endLine": 546,
            "startColumn": 99,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 548,
            "endLine": 553,
            "startColumn": 99,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DUP);\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 33,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.DUP);\n",
            "startLine": 549,
            "endLine": 549,
            "startColumn": 33,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(index++);\n",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 33,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(index++);\n",
            "startLine": 550,
            "endLine": 550,
            "startColumn": 33,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(typeDescription.getName());\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 33,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(typeDescription.getName());\n",
            "startLine": 551,
            "endLine": 551,
            "startColumn": 33,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.AASTORE);\n",
            "startLine": 545,
            "endLine": 545,
            "startColumn": 33,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.AASTORE);\n",
            "startLine": 552,
            "endLine": 552,
            "startColumn": 33,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6))",
            "startLine": 561,
            "endLine": 565,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6))",
            "startLine": 613,
            "endLine": 625,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: instrumentedMethod.getParameters())",
            "startLine": 571,
            "endLine": 578,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: instrumentedMethod.getParameters())",
            "startLine": 631,
            "endLine": 638,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 572,
            "endLine": 578,
            "startColumn": 73,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 632,
            "endLine": 638,
            "startColumn": 73,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "prequel=Math.max(prequel,6 + parameter.getType().getStackSize().getSize());\n",
            "startLine": 573,
            "endLine": 576,
            "startColumn": 33,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "prequel=Math.max(prequel,6 + parameter.getType().getStackSize().getSize());\n",
            "startLine": 633,
            "endLine": 636,
            "startColumn": 33,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "prequel=Math.max(prequel,8);\n",
            "startLine": 577,
            "endLine": 577,
            "startColumn": 33,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "prequel=Math.max(prequel,8);\n",
            "startLine": 637,
            "endLine": 637,
            "startColumn": 33,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodList<MethodDescription.InDefinedShape> constructors=instrumentedType.getSuperClass().asErasure().getDeclaredMethods().filter(isConstructor().and(not(isPrivate())));\n",
            "startLine": 398,
            "endLine": 403,
            "startColumn": 17,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodList<MethodDescription.InDefinedShape> constructors=instrumentedType.getSuperClass().asErasure().getDeclaredMethods().filter(isConstructor().and(not(isPrivate())));\n",
            "startLine": 402,
            "endLine": 407,
            "startColumn": 17,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int arguments=Integer.MAX_VALUE;\n",
            "startLine": 404,
            "endLine": 404,
            "startColumn": 17,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int arguments=Integer.MAX_VALUE;\n",
            "startLine": 408,
            "endLine": 408,
            "startColumn": 17,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean visible=false;\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 17,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean visible=false;\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 17,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodDescription.InDefinedShape current=null;\n",
            "startLine": 406,
            "endLine": 406,
            "startColumn": 17,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodDescription.InDefinedShape current=null;\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 17,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final MethodDescription.InDefinedShape selected=current;\n",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 21,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final MethodDescription.InDefinedShape selected=current;\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 21,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitCode();\n",
            "startLine": 419,
            "endLine": 419,
            "startColumn": 29,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitCode();\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 29,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Label label=new Label();\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 29,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Label label=new Label();\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 29,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(identifier);\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 29,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(identifier);\n",
            "startLine": 444,
            "endLine": 444,
            "startColumn": 29,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n",
            "startLine": 453,
            "endLine": 461,
            "startColumn": 29,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n",
            "startLine": 460,
            "endLine": 468,
            "startColumn": 29,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ICONST_0);\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 29,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.ICONST_0);\n",
            "startLine": 469,
            "endLine": 469,
            "startColumn": 29,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 29,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 29,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(Opcodes.ALOAD,0);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(Opcodes.ALOAD,0);\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n",
            "startLine": 483,
            "endLine": 488,
            "startColumn": 29,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n",
            "startLine": 490,
            "endLine": 495,
            "startColumn": 29,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(identifier);\n",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 29,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(identifier);\n",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 29,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(Opcodes.ALOAD,0);\n",
            "startLine": 505,
            "endLine": 505,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitVarInsn(Opcodes.ALOAD,0);\n",
            "startLine": 512,
            "endLine": 512,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedMethod.getParameters().size());\n",
            "startLine": 506,
            "endLine": 506,
            "startColumn": 29,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedMethod.getParameters().size());\n",
            "startLine": 513,
            "endLine": 513,
            "startColumn": 29,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n",
            "startLine": 507,
            "endLine": 508,
            "startColumn": 29,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n",
            "startLine": 514,
            "endLine": 515,
            "startColumn": 29,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "index=0;\n",
            "startLine": 536,
            "endLine": 536,
            "startColumn": 29,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "index=0;\n",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 29,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedMethod.getParameters().size());\n",
            "startLine": 537,
            "endLine": 537,
            "startColumn": 29,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLdcInsn(instrumentedMethod.getParameters().size());\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 29,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n",
            "startLine": 538,
            "endLine": 539,
            "startColumn": 29,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n",
            "startLine": 545,
            "endLine": 546,
            "startColumn": 29,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.RETURN);\n",
            "startLine": 559,
            "endLine": 559,
            "startColumn": 29,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitInsn(Opcodes.RETURN);\n",
            "startLine": 611,
            "endLine": 611,
            "startColumn": 29,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLabel(label);\n",
            "startLine": 560,
            "endLine": 560,
            "startColumn": 29,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitLabel(label);\n",
            "startLine": 612,
            "endLine": 612,
            "startColumn": 29,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int prequel=Math.max(5,selected.getStackSize());\n",
            "startLine": 570,
            "endLine": 570,
            "startColumn": 29,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int prequel=Math.max(5,selected.getStackSize());\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 29,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMaxs(Math.max(maxStack,prequel),maxLocals);\n",
            "startLine": 579,
            "endLine": 579,
            "startColumn": 29,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMaxs(Math.max(maxStack,prequel),maxLocals);\n",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 29,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return methodVisitor;\n",
            "startLine": 584,
            "endLine": 584,
            "startColumn": 13,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return methodVisitor;\n",
            "startLine": 644,
            "endLine": 644,
            "startColumn": 13,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 563,
            "endLine": 565,
            "startColumn": 75,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 615,
            "endLine": 625,
            "startColumn": 75,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new MethodVisitor(OpenedClassReader.ASM_API,methodVisitor){\n  @Override public void visitCode(){\n    super.visitCode();\n    Label label=new Label();\n    super.visitLdcInsn(identifier);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n      super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n    }\n else {\n      super.visitLdcInsn(instrumentedType.getName());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n    }\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n    super.visitInsn(Opcodes.ICONST_0);\n    super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    for (    TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n      if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n        super.visitInsn(Opcodes.ICONST_0);\n      }\n else       if (type.represents(long.class)) {\n        super.visitInsn(Opcodes.LCONST_0);\n      }\n else       if (type.represents(float.class)) {\n        super.visitInsn(Opcodes.FCONST_0);\n      }\n else       if (type.represents(double.class)) {\n        super.visitInsn(Opcodes.DCONST_0);\n      }\n else {\n        super.visitInsn(Opcodes.ACONST_NULL);\n      }\n    }\n    super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n    super.visitLdcInsn(identifier);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n      super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n    }\n else {\n      super.visitLdcInsn(instrumentedType.getName());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n    }\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitLdcInsn(instrumentedMethod.getParameters().size());\n    super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n    int index=0;\n    for (    ParameterDescription parameter : instrumentedMethod.getParameters()) {\n      super.visitInsn(Opcodes.DUP);\n      super.visitLdcInsn(index++);\n      Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n      super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n      if (parameter.getType().isPrimitive()) {\n        Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n        super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n      }\n      super.visitInsn(Opcodes.AASTORE);\n    }\n    index=0;\n    super.visitLdcInsn(instrumentedMethod.getParameters().size());\n    super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n    for (    TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n      super.visitInsn(Opcodes.DUP);\n      super.visitLdcInsn(index++);\n      super.visitLdcInsn(typeDescription.getName());\n      super.visitInsn(Opcodes.AASTORE);\n    }\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.VOID_TYPE,Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n    super.visitInsn(Opcodes.RETURN);\n    super.visitLabel(label);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n      super.visitFrame(Opcodes.F_SAME,0,null,0,null);\n    }\n  }\n  @Override public void visitMaxs(  int maxStack,  int maxLocals){\n    int prequel=Math.max(5,selected.getStackSize());\n    for (    ParameterDescription parameter : instrumentedMethod.getParameters()) {\n      prequel=Math.max(prequel,6 + parameter.getType().getStackSize().getSize());\n      prequel=Math.max(prequel,8);\n    }\n    super.visitMaxs(Math.max(maxStack,prequel),maxLocals);\n  }\n}\n;\n",
            "startLine": 416,
            "endLine": 581,
            "startColumn": 21,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new MethodVisitor(OpenedClassReader.ASM_API,methodVisitor){\n  @Override public void visitCode(){\n    super.visitCode();\n    Label label=new Label();\n    super.visitLdcInsn(identifier);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n      super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n    }\n else {\n      super.visitLdcInsn(instrumentedType.getName());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n    }\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n    super.visitInsn(Opcodes.ICONST_0);\n    super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    for (    TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n      if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n        super.visitInsn(Opcodes.ICONST_0);\n      }\n else       if (type.represents(long.class)) {\n        super.visitInsn(Opcodes.LCONST_0);\n      }\n else       if (type.represents(float.class)) {\n        super.visitInsn(Opcodes.FCONST_0);\n      }\n else       if (type.represents(double.class)) {\n        super.visitInsn(Opcodes.DCONST_0);\n      }\n else {\n        super.visitInsn(Opcodes.ACONST_NULL);\n      }\n    }\n    super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n    super.visitLdcInsn(identifier);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n      super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n    }\n else {\n      super.visitLdcInsn(instrumentedType.getName());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n    }\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitLdcInsn(instrumentedMethod.getParameters().size());\n    super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n    int index=0;\n    for (    ParameterDescription parameter : instrumentedMethod.getParameters()) {\n      super.visitInsn(Opcodes.DUP);\n      super.visitLdcInsn(index++);\n      Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n      super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n      if (parameter.getType().isPrimitive()) {\n        Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n        super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n      }\n      super.visitInsn(Opcodes.AASTORE);\n    }\n    index=0;\n    super.visitLdcInsn(instrumentedMethod.getParameters().size());\n    super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n    for (    TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n      super.visitInsn(Opcodes.DUP);\n      super.visitLdcInsn(index++);\n      super.visitLdcInsn(typeDescription.getName());\n      super.visitInsn(Opcodes.AASTORE);\n    }\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n    FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n    super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n    super.visitInsn(Opcodes.DUP);\n    Label noSpy=new Label();\n    super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n    for (    FieldDescription field : fields) {\n      super.visitInsn(Opcodes.DUP);\n      super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n      super.visitVarInsn(Opcodes.ALOAD,0);\n      super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n      super.visitInsn(Opcodes.POP);\n      super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    }\n    super.visitLabel(noSpy);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n      Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n      super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n    }\n    super.visitInsn(Opcodes.POP);\n    super.visitInsn(Opcodes.RETURN);\n    super.visitLabel(label);\n    if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n      Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n      super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n    }\n  }\n  @Override public void visitMaxs(  int maxStack,  int maxLocals){\n    int prequel=Math.max(5,selected.getStackSize());\n    for (    ParameterDescription parameter : instrumentedMethod.getParameters()) {\n      prequel=Math.max(prequel,6 + parameter.getType().getStackSize().getSize());\n      prequel=Math.max(prequel,8);\n    }\n    super.visitMaxs(Math.max(maxStack,prequel),maxLocals);\n  }\n}\n;\n",
            "startLine": 420,
            "endLine": 641,
            "startColumn": 21,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitFrame(Opcodes.F_SAME,0,null,0,null);\n",
            "startLine": 564,
            "endLine": 564,
            "startColumn": 33,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n",
            "startLine": 623,
            "endLine": 624,
            "startColumn": 33,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.VOID_TYPE,Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n",
            "startLine": 547,
            "endLine": 558,
            "startColumn": 29,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n",
            "startLine": 554,
            "endLine": 565,
            "startColumn": 29,
            "endColumn": 44
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=0;\n",
            "startLine": 509,
            "endLine": 509,
            "startColumn": 29,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=0;\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 29,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=0;\n",
            "startLine": 509,
            "endLine": 509,
            "startColumn": 29,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=0;\n",
            "startLine": 650,
            "endLine": 650,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/mockito/mockito.git",
      "sha1": "47ef05814784183cd5c1d297078e2ad7e31cce34",
      "url": "https://github.com/mockito/mockito/commit/47ef05814784183cd5c1d297078e2ad7e31cce34",
      "originalMethod": {
        "container": "org.mockito.internal.util.MockUtil",
        "type": "Method",
        "name": "createMock",
        "filePath": "src/main/java/org/mockito/internal/util/MockUtil.java",
        "startLine": 35,
        "endLine": 46,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.mockito.internal.util.MockUtil",
        "type": "Method",
        "name": "createMock",
        "filePath": "src/main/java/org/mockito/internal/util/MockUtil.java",
        "startLine": 35,
        "endLine": 56,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(spiedInstance != null)",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(spiedInstance != null)",
            "startLine": 41,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler mockHandler=createMockHandler(settings);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockHandler mockHandler=createMockHandler(settings);\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object spiedInstance=settings.getSpiedInstance();\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object spiedInstance=settings.getSpiedInstance();\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return mock;\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return mock;\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "T mock=mockMaker.createMock(settings,mockHandler);\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "T mock;\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 9,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 36,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 51,
            "endLine": 53,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "T mock=mockMaker.createMock(settings,mockHandler);\n",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "mock=mockMaker.createMock(settings,mockHandler);\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 13,
            "endColumn": 64
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 36,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 41,
            "endLine": 51,
            "startColumn": 36,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}