{
  "results": [
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "d745f5b3f7a64445854c735668afa9b72edb3fee",
      "url": "https://github.com/apache/flink/commit/d745f5b3f7a64445854c735668afa9b72edb3fee",
      "originalMethod": {
        "container": "org.apache.flink.runtime.jobmaster.JobMasterServiceLeadershipRunner",
        "type": "Method",
        "name": "closeAsync",
        "filePath": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterServiceLeadershipRunner.java",
        "startLine": 125,
        "endLine": 162,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.runtime.jobmaster.JobMasterServiceLeadershipRunner",
        "type": "Method",
        "name": "closeAsync",
        "filePath": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterServiceLeadershipRunner.java",
        "startLine": 125,
        "endLine": 162,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "classLoaderLease.release();\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 37,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "classLoaderLease.release();\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 29,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "leaderElectionService.stop();\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 37,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "leaderElectionService.stop();\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 29,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return terminationFuture;\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return terminationFuture;\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "state=State.STOPPED;\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 17,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "state=State.STOPPED;\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 13,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Terminating the leadership runner for job {}.\",getJobID());\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Terminating the leadership runner for job {}.\",getJobID());\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jobMasterGatewayFuture.completeExceptionally(new FlinkException(\"JobMasterServiceLeadershipRunner is closed. Therefore, the corresponding JobMaster will never acquire the leadership.\"));\n",
            "startLine": 133,
            "endLine": 135,
            "startColumn": 17,
            "endColumn": 155
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jobMasterGatewayFuture.completeExceptionally(new FlinkException(\"JobMasterServiceLeadershipRunner is closed. Therefore, the corresponding JobMaster will never acquire the leadership.\"));\n",
            "startLine": 137,
            "endLine": 139,
            "startColumn": 13,
            "endColumn": 151
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "resultFuture.complete(JobManagerRunnerResult.forSuccess(createExecutionGraphInfoWithJobStatus(JobStatus.SUSPENDED)));\n",
            "startLine": 136,
            "endLine": 138,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "resultFuture.complete(JobManagerRunnerResult.forSuccess(createExecutionGraphInfoWithJobStatus(JobStatus.SUSPENDED)));\n",
            "startLine": 141,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CompletableFuture<Void> serviceTerminationFuture=FutureUtils.runAfterwards(processTerminationFuture,() -> {\n  classLoaderLease.release();\n  leaderElectionService.stop();\n}\n);\n",
            "startLine": 143,
            "endLine": 149,
            "startColumn": 17,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CompletableFuture<Void> serviceTerminationFuture=FutureUtils.runAfterwards(processTerminationFuture,() -> {\n  classLoaderLease.release();\n  leaderElectionService.stop();\n}\n);\n",
            "startLine": 148,
            "endLine": 154,
            "startColumn": 9,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "FutureUtils.forward(serviceTerminationFuture,terminationFuture);\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 17,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "FutureUtils.forward(serviceTerminationFuture,terminationFuture);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "terminationFuture.whenComplete((unused,throwable) -> LOG.debug(\"Leadership runner for job {} has been terminated.\",getJobID()));\n",
            "startLine": 153,
            "endLine": 157,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "terminationFuture.whenComplete((unused,throwable) -> LOG.debug(\"Leadership runner for job {} has been terminated.\",getJobID()));\n",
            "startLine": 158,
            "endLine": 160,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CompletableFuture<Void> processTerminationFuture=jobMasterServiceProcess.closeAsync();\n",
            "startLine": 140,
            "endLine": 141,
            "startColumn": 17,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "processTerminationFuture=jobMasterServiceProcess.closeAsync();\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 13,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Synchronized Statement",
            "expression": "synchronized(lock)",
            "startLine": 127,
            "endLine": 159,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Synchronized Statement",
            "expression": "synchronized(lock)",
            "startLine": 128,
            "endLine": 146,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(state != State.STOPPED)",
            "startLine": 128,
            "endLine": 158,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(state == State.STOPPED)",
            "startLine": 129,
            "endLine": 131,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "url": "https://github.com/apache/flink/commit/575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "originalMethod": {
        "container": "org.apache.flink.runtime.security.modules.HadoopModule",
        "type": "Method",
        "name": "install",
        "filePath": "flink-runtime/src/main/java/org/apache/flink/runtime/security/modules/HadoopModule.java",
        "startLine": 64,
        "endLine": 141,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.runtime.security.modules.HadoopModule",
        "type": "Method",
        "name": "install",
        "filePath": "flink-runtime/src/main/java/org/apache/flink/runtime/security/modules/HadoopModule.java",
        "startLine": 56,
        "endLine": 96,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 71,
            "endLine": 140,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 63,
            "endLine": 95,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 138,
            "endLine": 140,
            "startColumn": 32,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 93,
            "endLine": 95,
            "startColumn": 32,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SecurityInstallException(\"Unable to set the Hadoop login user\",ex);\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 13,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new SecurityInstallException(\"Unable to set the Hadoop login user\",ex);\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 13,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fileLocation != null)",
            "startLine": 84,
            "endLine": 107,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fileLocation != null)",
            "startLine": 72,
            "endLine": 77,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "UserGroupInformation.setConfiguration(hadoopConfiguration);\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "UserGroupInformation.setConfiguration(hadoopConfiguration);\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation loginUser;\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation loginUser;\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser=UserGroupInformation.getLoginUser();\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 17,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser=UserGroupInformation.getLoginUser();\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 17,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser=UserGroupInformation.getLoginUser();\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 17,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser=UserGroupInformation.getLoginUser();\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 17,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Hadoop user set to {}\",loginUser);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 13,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Hadoop user set to {}\",loginUser);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n",
            "startLine": 82,
            "endLine": 83,
            "startColumn": 17,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String fileLocation=System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION);\n",
            "startLine": 70,
            "endLine": 71,
            "startColumn": 21,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser.addCredentials(credentialsToBeAdded);\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 21,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "loginUser.addCredentials(credentials);\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Credentials credentialsFromTokenStorageFile=Credentials.readTokenStorageFile(new File(fileLocation),hadoopConfiguration);\n",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 21,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Credentials credentials=Credentials.readTokenStorageFile(new File(fileLocation),hadoopConfiguration);\n",
            "startLine": 73,
            "endLine": 75,
            "startColumn": 25,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 108,
            "endLine": 125,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 79,
            "endLine": 81,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(UserGroupInformation.isSecurityEnabled() && !StringUtils.isBlank(securityConfig.getKeytab()) && !StringUtils.isBlank(securityConfig.getPrincipal()))",
            "startLine": 72,
            "endLine": 125,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(kerberosLoginProvider.isLoginPossible())",
            "startLine": 65,
            "endLine": 81,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 129,
            "endLine": 137,
            "startColumn": 67,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 88,
            "endLine": 92,
            "startColumn": 44,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 74,
            "endLine": 108,
            "startColumn": 77,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 65,
            "endLine": 79,
            "startColumn": 58,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Kerberos security is enabled and credentials are {}.\",isCredentialsConfigured ? \"valid\" : \"invalid\");\n",
            "startLine": 134,
            "endLine": 136,
            "startColumn": 17,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Kerberos credentials are {}.\",loginUser.hasKerberosCredentials() ? \"valid\" : \"invalid\");\n",
            "startLine": 89,
            "endLine": 91,
            "startColumn": 17,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Kerberos security is enabled and credentials are {}.\",isCredentialsConfigured ? \"valid\" : \"invalid\");\n",
            "startLine": 134,
            "endLine": 136,
            "startColumn": 17,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Kerberos security is {}.\",isKerberosSecurityEnabled ? \"enabled\" : \"disabled\");\n",
            "startLine": 86,
            "endLine": 87,
            "startColumn": 13,
            "endColumn": 101
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 74,
            "endLine": 108,
            "startColumn": 77,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 69,
            "endLine": 78,
            "startColumn": 47,
            "endColumn": 18
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "url": "https://github.com/apache/flink/commit/575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "originalMethod": {
        "container": "org.apache.flink.runtime.security.token.KerberosDelegationTokenManagerITCase",
        "type": "Method",
        "name": "startTokensUpdateShouldScheduleRenewal",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/security/token/KerberosDelegationTokenManagerITCase.java",
        "startLine": 138,
        "endLine": 186,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.runtime.security.token.KerberosDelegationTokenManagerITCase",
        "type": "Method",
        "name": "startTokensUpdateShouldScheduleRenewal",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/security/token/KerberosDelegationTokenManagerITCase.java",
        "startLine": 138,
        "endLine": 186,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(MockedStatic<UserGroupInformation> ugi=mockStatic(UserGroupInformation.class))",
            "startLine": 145,
            "endLine": 185,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(MockedStatic<UserGroupInformation> ugi=mockStatic(UserGroupInformation.class))",
            "startLine": 145,
            "endLine": 185,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ManuallyTriggeredScheduledExecutor scheduledExecutor=new ManuallyTriggeredScheduledExecutor();\n",
            "startLine": 140,
            "endLine": 141,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ManuallyTriggeredScheduledExecutor scheduledExecutor=new ManuallyTriggeredScheduledExecutor();\n",
            "startLine": 140,
            "endLine": 141,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ManuallyTriggeredScheduledExecutorService scheduler=new ManuallyTriggeredScheduledExecutorService();\n",
            "startLine": 142,
            "endLine": 143,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ManuallyTriggeredScheduledExecutorService scheduler=new ManuallyTriggeredScheduledExecutorService();\n",
            "startLine": 142,
            "endLine": 143,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation userGroupInformation=mock(UserGroupInformation.class);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 13,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation userGroupInformation=mock(UserGroupInformation.class);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 13,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ugi.when(UserGroupInformation::getCurrentUser).thenReturn(userGroupInformation);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 13,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ugi.when(UserGroupInformation::getCurrentUser).thenReturn(userGroupInformation);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 13,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ExceptionThrowingDelegationTokenProvider.enabled=false;\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 13,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ExceptionThrowingDelegationTokenProvider.enabled=false;\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 13,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ExceptionThrowingDelegationTokenProvider.constructed=false;\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 13,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ExceptionThrowingDelegationTokenProvider.constructed=false;\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 13,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration configuration=new Configuration();\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration configuration=new Configuration();\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "configuration.setBoolean(\"security.kerberos.token.provider.throw.enabled\",false);\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 13,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "configuration.setBoolean(\"security.kerberos.token.provider.throw.enabled\",false);\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 13,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger startTokensUpdateCallCount=new AtomicInteger(0);\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 13,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger startTokensUpdateCallCount=new AtomicInteger(0);\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 13,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicBoolean retryExceptionThrown=new AtomicBoolean(false);\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicBoolean retryExceptionThrown=new AtomicBoolean(false);\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosDelegationTokenManager delegationTokenManager=new KerberosDelegationTokenManager(configuration,scheduledExecutor,scheduler,kerberosLoginProvider){\n  @Override void startTokensUpdate(){\n    startTokensUpdateCallCount.incrementAndGet();\n    super.startTokensUpdate();\n  }\n}\n;\n",
            "startLine": 166,
            "endLine": 174,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosDelegationTokenManager delegationTokenManager=new KerberosDelegationTokenManager(configuration,scheduledExecutor,scheduler,kerberosLoginProvider){\n  @Override void startTokensUpdate(){\n    startTokensUpdateCallCount.incrementAndGet();\n    super.startTokensUpdate();\n  }\n}\n;\n",
            "startLine": 166,
            "endLine": 174,
            "startColumn": 13,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "startTokensUpdateCallCount.incrementAndGet();\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 29,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "startTokensUpdateCallCount.incrementAndGet();\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 29,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.startTokensUpdate();\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 29,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.startTokensUpdate();\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 29,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "delegationTokenManager.startTokensUpdate();\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "delegationTokenManager.startTokensUpdate();\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduledExecutor.triggerScheduledTasks();\n",
            "startLine": 177,
            "endLine": 177,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduledExecutor.triggerScheduledTasks();\n",
            "startLine": 177,
            "endLine": 177,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler.triggerAll();\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler.triggerAll();\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 13,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduledExecutor.triggerScheduledTasks();\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduledExecutor.triggerScheduledTasks();\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler.triggerAll();\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "scheduler.triggerAll();\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 13,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "delegationTokenManager.stopTokensUpdate();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "delegationTokenManager.stopTokensUpdate();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(retryExceptionThrown.get());\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(retryExceptionThrown.get());\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(3,startTokensUpdateCallCount.get());\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(3,startTokensUpdateCallCount.get());\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosLoginProvider kerberosLoginProvider=new KerberosLoginProvider(configuration){\n  @Override public UserGroupInformation doLogin(){\n    if (startTokensUpdateCallCount.get() == 2) {\n      retryExceptionThrown.set(true);\n      throw new RuntimeException(\"Intended exception to test retry\");\n    }\n    return userGroupInformation;\n  }\n}\n;\n",
            "startLine": 155,
            "endLine": 165,
            "startColumn": 13,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosLoginProvider kerberosLoginProvider=new KerberosLoginProvider(configuration){\n  @Override public UserGroupInformation doLoginAndReturnUGI(){\n    if (startTokensUpdateCallCount.get() == 2) {\n      retryExceptionThrown.set(true);\n      throw new RuntimeException(\"Intended exception to test retry\");\n    }\n    return userGroupInformation;\n  }\n}\n;\n",
            "startLine": 155,
            "endLine": 165,
            "startColumn": 13,
            "endColumn": 23
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(startTokensUpdateCallCount.get() == 2)",
            "startLine": 159,
            "endLine": 162,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(startTokensUpdateCallCount.get() == 2)",
            "startLine": 159,
            "endLine": 162,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "retryExceptionThrown.set(true);\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 33,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "retryExceptionThrown.set(true);\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 33,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(\"Intended exception to test retry\");\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 33,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(\"Intended exception to test retry\");\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 33,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return userGroupInformation;\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 29,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return userGroupInformation;\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 29,
            "endColumn": 57
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "url": "https://github.com/apache/flink/commit/575517bbb8de36b21632e54b441b7dcbc4d061c4",
      "originalMethod": {
        "container": "org.apache.flink.runtime.security.token.KerberosLoginProviderITCase",
        "type": "Method",
        "name": "isLoginPossibleMustReturnTrueWithTGT",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/security/token/KerberosLoginProviderITCase.java",
        "startLine": 80,
        "endLine": 95,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.runtime.security.token.KerberosLoginProviderITCase",
        "type": "Method",
        "name": "isLoginPossibleMustReturnTrueWithTGT",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/security/token/KerberosLoginProviderITCase.java",
        "startLine": 95,
        "endLine": 109,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(MockedStatic<UserGroupInformation> ugi=mockStatic(UserGroupInformation.class))",
            "startLine": 86,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(MockedStatic<UserGroupInformation> ugi=mockStatic(UserGroupInformation.class))",
            "startLine": 101,
            "endLine": 108,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration configuration=new Configuration();\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration configuration=new Configuration();\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "configuration.setBoolean(KERBEROS_LOGIN_USETICKETCACHE,true);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "configuration.setBoolean(KERBEROS_LOGIN_USETICKETCACHE,true);\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosLoginProvider kerberosLoginProvider=new KerberosLoginProvider(configuration);\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "KerberosLoginProvider kerberosLoginProvider=new KerberosLoginProvider(configuration);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation userGroupInformation=mock(UserGroupInformation.class);\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 13,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "UserGroupInformation userGroupInformation=mock(UserGroupInformation.class);\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 13,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "when(userGroupInformation.hasKerberosCredentials()).thenReturn(true);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "when(userGroupInformation.hasKerberosCredentials()).thenReturn(true);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 13,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ugi.when(UserGroupInformation::getCurrentUser).thenReturn(userGroupInformation);\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 13,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ugi.when(UserGroupInformation::getCurrentUser).thenReturn(userGroupInformation);\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 13,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(kerberosLoginProvider.isLoginPossible());\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 13,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(kerberosLoginProvider.isLoginPossible());\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 13,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "when(userGroupInformation.getAuthenticationMethod()).thenReturn(UserGroupInformation.AuthenticationMethod.KERBEROS);\n",
            "startLine": 88,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ugi.when(UserGroupInformation::isSecurityEnabled).thenReturn(true);\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "c319340e9728bd60565c15922add220dc233d921",
      "url": "https://github.com/apache/flink/commit/c319340e9728bd60565c15922add220dc233d921",
      "originalMethod": {
        "container": "org.apache.flink.api.common.ExecutionConfig",
        "type": "Method",
        "name": "setAutoWatermarkInterval",
        "filePath": "flink-core/src/main/java/org/apache/flink/api/common/ExecutionConfig.java",
        "startLine": 252,
        "endLine": 266,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.api.common.ExecutionConfig",
        "type": "Method",
        "name": "setAutoWatermarkInterval",
        "filePath": "flink-core/src/main/java/org/apache/flink/api/common/ExecutionConfig.java",
        "startLine": 231,
        "endLine": 244,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(interval >= 0,\"Auto watermark interval must not be negative.\");\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(interval >= 0,\"Auto watermark interval must not be negative.\");\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 9,
            "endColumn": 101
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "url": "https://github.com/apache/flink/commit/db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "originalMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetColumnarRowInputFormatTest",
        "type": "Method",
        "name": "testReadingSplit",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java",
        "startLine": 400,
        "endLine": 552,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetColumnarRowInputFormatTest",
        "type": "Method",
        "name": "testReadingSplit",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java",
        "startLine": 397,
        "endLine": 548,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 409,
            "endLine": 413,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 406,
            "endLine": 410,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "InstantiationUtil.clone(format);\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 13,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "InstantiationUtil.clone(format);\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 13,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 411,
            "endLine": 413,
            "startColumn": 44,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 408,
            "endLine": 410,
            "startColumn": 44,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(e);\n",
            "startLine": 412,
            "endLine": 412,
            "startColumn": 13,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException(e);\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 13,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(previousRow.get() == null)",
            "startLine": 436,
            "endLine": 441,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(previousRow.get() == null)",
            "startLine": 433,
            "endLine": 438,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 436,
            "endLine": 438,
            "startColumn": 52,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 433,
            "endLine": 435,
            "startColumn": 52,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "previousRow.set(row);\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 25,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "previousRow.set(row);\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 25,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 438,
            "endLine": 441,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 435,
            "endLine": 438,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row).isSameAs(previousRow.get());\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 25,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row).isSameAs(previousRow.get());\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 25,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(v == null)",
            "startLine": 443,
            "endLine": 547,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(v == null)",
            "startLine": 440,
            "endLine": 543,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 443,
            "endLine": 477,
            "startColumn": 36,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 440,
            "endLine": 474,
            "startColumn": 36,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(0)).isTrue();\n",
            "startLine": 444,
            "endLine": 444,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(0)).isTrue();\n",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(1)).isTrue();\n",
            "startLine": 445,
            "endLine": 445,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(1)).isTrue();\n",
            "startLine": 442,
            "endLine": 442,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(2)).isTrue();\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(2)).isTrue();\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(3)).isTrue();\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(3)).isTrue();\n",
            "startLine": 444,
            "endLine": 444,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(4)).isTrue();\n",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(4)).isTrue();\n",
            "startLine": 445,
            "endLine": 445,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(5)).isTrue();\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(5)).isTrue();\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(6)).isTrue();\n",
            "startLine": 450,
            "endLine": 450,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(6)).isTrue();\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(7)).isTrue();\n",
            "startLine": 451,
            "endLine": 451,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(7)).isTrue();\n",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(8)).isTrue();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(8)).isTrue();\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 453,
            "endLine": 453,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 450,
            "endLine": 450,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(10)).isTrue();\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(10)).isTrue();\n",
            "startLine": 451,
            "endLine": 451,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(11)).isTrue();\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(11)).isTrue();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 453,
            "endLine": 453,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(13)).isTrue();\n",
            "startLine": 457,
            "endLine": 457,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(13)).isTrue();\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(14)).isTrue();\n",
            "startLine": 458,
            "endLine": 458,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(14)).isTrue();\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(15)).isTrue();\n",
            "startLine": 459,
            "endLine": 459,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(15)).isTrue();\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(16)).isTrue();\n",
            "startLine": 460,
            "endLine": 460,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(16)).isTrue();\n",
            "startLine": 457,
            "endLine": 457,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(17)).isTrue();\n",
            "startLine": 461,
            "endLine": 461,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(17)).isTrue();\n",
            "startLine": 458,
            "endLine": 458,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(18)).isTrue();\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(18)).isTrue();\n",
            "startLine": 459,
            "endLine": 459,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(19)).isTrue();\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(19)).isTrue();\n",
            "startLine": 460,
            "endLine": 460,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(20)).isTrue();\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(20)).isTrue();\n",
            "startLine": 461,
            "endLine": 461,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(21)).isTrue();\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(21)).isTrue();\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(22)).isTrue();\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(22)).isTrue();\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(23)).isTrue();\n",
            "startLine": 467,
            "endLine": 467,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(23)).isTrue();\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(25)).isTrue();\n",
            "startLine": 469,
            "endLine": 469,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(25)).isTrue();\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(26)).isTrue();\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(26)).isTrue();\n",
            "startLine": 467,
            "endLine": 467,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(28)).isTrue();\n",
            "startLine": 472,
            "endLine": 472,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(28)).isTrue();\n",
            "startLine": 469,
            "endLine": 469,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(29)).isTrue();\n",
            "startLine": 473,
            "endLine": 473,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(29)).isTrue();\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(30)).isTrue();\n",
            "startLine": 474,
            "endLine": 474,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(30)).isTrue();\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(31)).isTrue();\n",
            "startLine": 475,
            "endLine": 475,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(31)).isTrue();\n",
            "startLine": 472,
            "endLine": 472,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(32)).isTrue();\n",
            "startLine": 476,
            "endLine": 476,
            "startColumn": 25,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(32)).isTrue();\n",
            "startLine": 473,
            "endLine": 473,
            "startColumn": 25,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null)",
            "startLine": 488,
            "endLine": 510,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null)",
            "startLine": 485,
            "endLine": 507,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 488,
            "endLine": 493,
            "startColumn": 94,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 485,
            "endLine": 490,
            "startColumn": 94,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 486,
            "endLine": 486,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 490,
            "endLine": 490,
            "startColumn": 29,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 487,
            "endLine": 487,
            "startColumn": 29,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 491,
            "endLine": 491,
            "startColumn": 29,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 488,
            "endLine": 488,
            "startColumn": 29,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 29,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 29,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 493,
            "endLine": 510,
            "startColumn": 32,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 490,
            "endLine": 507,
            "startColumn": 32,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 494,
            "endLine": 497,
            "startColumn": 29,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 491,
            "endLine": 494,
            "startColumn": 29,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 498,
            "endLine": 501,
            "startColumn": 29,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 495,
            "endLine": 498,
            "startColumn": 29,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 502,
            "endLine": 505,
            "startColumn": 29,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 499,
            "endLine": 502,
            "startColumn": 29,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 506,
            "endLine": 509,
            "startColumn": 29,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 503,
            "endLine": 506,
            "startColumn": 29,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowInputFormat format=new ParquetColumnarRowInputFormat(new Configuration(),ROW_TYPE,null,500,false,true);\n",
            "startLine": 404,
            "endLine": 406,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowInputFormat format=new ParquetColumnarRowInputFormat(new Configuration(),ROW_TYPE,null,500,false,true);\n",
            "startLine": 401,
            "endLine": 403,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileStatus fileStatus=path.getFileSystem().getFileStatus(path);\n",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileStatus fileStatus=path.getFileSystem().getFileStatus(path);\n",
            "startLine": 412,
            "endLine": 412,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BulkFormat.Reader<RowData> reader=format.restoreReader(EMPTY_CONF,new FileSourceSplit(\"id\",path,splitStart,splitLength,fileStatus.getModificationTime(),fileStatus.getLen(),new String[0],new CheckpointedPosition(CheckpointedPosition.NO_OFFSET,seekToRow)));\n",
            "startLine": 417,
            "endLine": 429,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "BulkFormat.Reader<RowData> reader=format.restoreReader(EMPTY_CONF,new FileSourceSplit(\"id\",path,splitStart,splitLength,fileStatus.getModificationTime(),fileStatus.getLen(),new String[0],new CheckpointedPosition(CheckpointedPosition.NO_OFFSET,seekToRow)));\n",
            "startLine": 414,
            "endLine": 426,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger cnt=new AtomicInteger(0);\n",
            "startLine": 431,
            "endLine": 431,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger cnt=new AtomicInteger(0);\n",
            "startLine": 428,
            "endLine": 428,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<RowData> previousRow=new AtomicReference<>();\n",
            "startLine": 432,
            "endLine": 432,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AtomicReference<RowData> previousRow=new AtomicReference<>();\n",
            "startLine": 429,
            "endLine": 429,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer v=expected.get(cnt.get());\n",
            "startLine": 442,
            "endLine": 442,
            "startColumn": 21,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer v=expected.get(cnt.get());\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 21,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n",
            "startLine": 479,
            "endLine": 479,
            "startColumn": 25,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n",
            "startLine": 476,
            "endLine": 476,
            "startColumn": 25,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 25,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n",
            "startLine": 477,
            "endLine": 477,
            "startColumn": 25,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n",
            "startLine": 481,
            "endLine": 481,
            "startColumn": 25,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n",
            "startLine": 478,
            "endLine": 478,
            "startColumn": 25,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(4)).isEqualTo(v.intValue());\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 25,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(4)).isEqualTo(v.intValue());\n",
            "startLine": 479,
            "endLine": 479,
            "startColumn": 25,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(5)).isEqualTo(v.longValue());\n",
            "startLine": 483,
            "endLine": 483,
            "startColumn": 25,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(5)).isEqualTo(v.longValue());\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 25,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n",
            "startLine": 484,
            "endLine": 484,
            "startColumn": 25,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n",
            "startLine": 481,
            "endLine": 481,
            "startColumn": 25,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n",
            "startLine": 485,
            "endLine": 485,
            "startColumn": 25,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 25,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 486,
            "endLine": 487,
            "startColumn": 25,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 483,
            "endLine": 484,
            "startColumn": 25,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(10,15,2)).isEqualTo(DecimalData.fromUnscaledLong(v.longValue(),15,2));\n",
            "startLine": 511,
            "endLine": 512,
            "startColumn": 25,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(10,15,2)).isEqualTo(DecimalData.fromUnscaledLong(v.longValue(),15,2));\n",
            "startLine": 508,
            "endLine": 509,
            "startColumn": 25,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(11,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 513,
            "endLine": 514,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(11,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 510,
            "endLine": 511,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 515,
            "endLine": 516,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 512,
            "endLine": 513,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 517,
            "endLine": 518,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n",
            "startLine": 514,
            "endLine": 515,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 25,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 517,
            "endLine": 517,
            "startColumn": 25,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 25,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n",
            "startLine": 518,
            "endLine": 518,
            "startColumn": 25,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 25,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n",
            "startLine": 519,
            "endLine": 519,
            "startColumn": 25,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 25,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 25,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n",
            "startLine": 524,
            "endLine": 524,
            "startColumn": 25,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 25,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n",
            "startLine": 525,
            "endLine": 525,
            "startColumn": 25,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 25,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n",
            "startLine": 526,
            "endLine": 526,
            "startColumn": 25,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 25,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 527,
            "endLine": 528,
            "startColumn": 25,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 524,
            "endLine": 525,
            "startColumn": 25,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 530,
            "endLine": 532,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 527,
            "endLine": 529,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 533,
            "endLine": 535,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 530,
            "endLine": 532,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 536,
            "endLine": 538,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 533,
            "endLine": 535,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 539,
            "endLine": 541,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 536,
            "endLine": 538,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 25,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 25,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n",
            "startLine": 546,
            "endLine": 546,
            "startColumn": 25,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 25,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cnt.incrementAndGet();\n",
            "startLine": 548,
            "endLine": 548,
            "startColumn": 21,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cnt.incrementAndGet();\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 21,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return cnt.get();\n",
            "startLine": 551,
            "endLine": 551,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return cnt.get();\n",
            "startLine": 547,
            "endLine": 547,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 477,
            "endLine": 547,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 474,
            "endLine": 543,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "forEachRemaining(reader,row -> {\n  if (previousRow.get() == null) {\n    previousRow.set(row);\n  }\n else {\n    assertThat(row).isSameAs(previousRow.get());\n  }\n  Integer v=expected.get(cnt.get());\n  if (v == null) {\n    assertThat(row.isNullAt(0)).isTrue();\n    assertThat(row.isNullAt(1)).isTrue();\n    assertThat(row.isNullAt(2)).isTrue();\n    assertThat(row.isNullAt(3)).isTrue();\n    assertThat(row.isNullAt(4)).isTrue();\n    assertThat(row.isNullAt(5)).isTrue();\n    assertThat(row.isNullAt(6)).isTrue();\n    assertThat(row.isNullAt(7)).isTrue();\n    assertThat(row.isNullAt(8)).isTrue();\n    assertThat(row.isNullAt(9)).isTrue();\n    assertThat(row.isNullAt(10)).isTrue();\n    assertThat(row.isNullAt(11)).isTrue();\n    assertThat(row.isNullAt(12)).isTrue();\n    assertThat(row.isNullAt(13)).isTrue();\n    assertThat(row.isNullAt(14)).isTrue();\n    assertThat(row.isNullAt(15)).isTrue();\n    assertThat(row.isNullAt(16)).isTrue();\n    assertThat(row.isNullAt(17)).isTrue();\n    assertThat(row.isNullAt(18)).isTrue();\n    assertThat(row.isNullAt(19)).isTrue();\n    assertThat(row.isNullAt(20)).isTrue();\n    assertThat(row.isNullAt(21)).isTrue();\n    assertThat(row.isNullAt(22)).isTrue();\n    assertThat(row.isNullAt(23)).isTrue();\n    assertThat(row.isNullAt(24)).isTrue();\n    assertThat(row.isNullAt(25)).isTrue();\n    assertThat(row.isNullAt(26)).isTrue();\n    assertThat(row.isNullAt(27)).isTrue();\n    assertThat(row.isNullAt(28)).isTrue();\n    assertThat(row.isNullAt(29)).isTrue();\n    assertThat(row.isNullAt(30)).isTrue();\n    assertThat(row.isNullAt(31)).isTrue();\n    assertThat(row.isNullAt(32)).isTrue();\n  }\n else {\n    assertThat(row.getString(0).toString()).isEqualTo(\"\" + v);\n    assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n    assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n    assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n    assertThat(row.getInt(4)).isEqualTo(v.intValue());\n    assertThat(row.getLong(5)).isEqualTo(v.longValue());\n    assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n    assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n    assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n    if (DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null) {\n      assertThat(row.isNullAt(9)).isTrue();\n      assertThat(row.isNullAt(12)).isTrue();\n      assertThat(row.isNullAt(24)).isTrue();\n      assertThat(row.isNullAt(27)).isTrue();\n    }\n else {\n      assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n    }\n    assertThat(row.getDecimal(10,15,2)).isEqualTo(DecimalData.fromUnscaledLong(v.longValue(),15,2));\n    assertThat(row.getDecimal(11,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getDecimal(13,15,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getDecimal(14,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getArray(15).getString(0).toString()).isEqualTo(\"\" + v);\n    assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n    assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n    assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n    assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n    assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n    assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n    assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n    assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n    assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n    assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n    assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n    assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n    assertThat(row.getMap(30).valueArray().getString(0).toString()).isEqualTo(\"\" + v);\n    assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n    assertThat(row.getRow(32,2).getString(0).toString()).isEqualTo(\"\" + v);\n    assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n  }\n  cnt.incrementAndGet();\n}\n);\n",
            "startLine": 433,
            "endLine": 549,
            "startColumn": 9,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "forEachRemaining(reader,row -> {\n  if (previousRow.get() == null) {\n    previousRow.set(row);\n  }\n else {\n    assertThat(row).isSameAs(previousRow.get());\n  }\n  Integer v=expected.get(cnt.get());\n  if (v == null) {\n    assertThat(row.isNullAt(0)).isTrue();\n    assertThat(row.isNullAt(1)).isTrue();\n    assertThat(row.isNullAt(2)).isTrue();\n    assertThat(row.isNullAt(3)).isTrue();\n    assertThat(row.isNullAt(4)).isTrue();\n    assertThat(row.isNullAt(5)).isTrue();\n    assertThat(row.isNullAt(6)).isTrue();\n    assertThat(row.isNullAt(7)).isTrue();\n    assertThat(row.isNullAt(8)).isTrue();\n    assertThat(row.isNullAt(9)).isTrue();\n    assertThat(row.isNullAt(10)).isTrue();\n    assertThat(row.isNullAt(11)).isTrue();\n    assertThat(row.isNullAt(12)).isTrue();\n    assertThat(row.isNullAt(13)).isTrue();\n    assertThat(row.isNullAt(14)).isTrue();\n    assertThat(row.isNullAt(15)).isTrue();\n    assertThat(row.isNullAt(16)).isTrue();\n    assertThat(row.isNullAt(17)).isTrue();\n    assertThat(row.isNullAt(18)).isTrue();\n    assertThat(row.isNullAt(19)).isTrue();\n    assertThat(row.isNullAt(20)).isTrue();\n    assertThat(row.isNullAt(21)).isTrue();\n    assertThat(row.isNullAt(22)).isTrue();\n    assertThat(row.isNullAt(23)).isTrue();\n    assertThat(row.isNullAt(24)).isTrue();\n    assertThat(row.isNullAt(25)).isTrue();\n    assertThat(row.isNullAt(26)).isTrue();\n    assertThat(row.isNullAt(27)).isTrue();\n    assertThat(row.isNullAt(28)).isTrue();\n    assertThat(row.isNullAt(29)).isTrue();\n    assertThat(row.isNullAt(30)).isTrue();\n    assertThat(row.isNullAt(31)).isTrue();\n    assertThat(row.isNullAt(32)).isTrue();\n  }\n else {\n    assertThat(row.getString(0)).hasToString(\"\" + v);\n    assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n    assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n    assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n    assertThat(row.getInt(4)).isEqualTo(v.intValue());\n    assertThat(row.getLong(5)).isEqualTo(v.longValue());\n    assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n    assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n    assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n    if (DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null) {\n      assertThat(row.isNullAt(9)).isTrue();\n      assertThat(row.isNullAt(12)).isTrue();\n      assertThat(row.isNullAt(24)).isTrue();\n      assertThat(row.isNullAt(27)).isTrue();\n    }\n else {\n      assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n      assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n    }\n    assertThat(row.getDecimal(10,15,2)).isEqualTo(DecimalData.fromUnscaledLong(v.longValue(),15,2));\n    assertThat(row.getDecimal(11,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getDecimal(13,15,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getDecimal(14,20,0).toBigDecimal()).isEqualTo(BigDecimal.valueOf(v));\n    assertThat(row.getArray(15).getString(0)).hasToString(\"\" + v);\n    assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n    assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n    assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n    assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n    assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n    assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n    assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n    assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n    assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n    assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n    assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n    assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n    assertThat(row.getMap(30).valueArray().getString(0)).hasToString(\"\" + v);\n    assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n    assertThat(row.getRow(32,2).getString(0)).hasToString(\"\" + v);\n    assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n  }\n  cnt.incrementAndGet();\n}\n);\n",
            "startLine": 430,
            "endLine": 545,
            "startColumn": 9,
            "endColumn": 20
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(30).valueArray().getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 542,
            "endLine": 543,
            "startColumn": 25,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(30).valueArray().getString(0)).hasToString(\"\" + v);\n",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 25,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 545,
            "endLine": 545,
            "startColumn": 25,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getString(0)).hasToString(\"\" + v);\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 25,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(15).getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 519,
            "endLine": 519,
            "startColumn": 25,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(15).getString(0)).hasToString(\"\" + v);\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 25,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 478,
            "endLine": 478,
            "startColumn": 25,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(0)).hasToString(\"\" + v);\n",
            "startLine": 475,
            "endLine": 475,
            "startColumn": 25,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "url": "https://github.com/apache/flink/commit/db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "originalMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetColumnarRowInputFormatTest",
        "type": "Method",
        "name": "innerTestPartitionValues",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java",
        "startLine": 629,
        "endLine": 753,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetColumnarRowInputFormatTest",
        "type": "Method",
        "name": "innerTestPartitionValues",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java",
        "startLine": 625,
        "endLine": 749,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(nullPartValue)",
            "startLine": 727,
            "endLine": 750,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(nullPartValue)",
            "startLine": 723,
            "endLine": 746,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 727,
            "endLine": 731,
            "startColumn": 40,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 723,
            "endLine": 727,
            "startColumn": 40,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=3; j < 16; j++)",
            "startLine": 728,
            "endLine": 730,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=3; j < 16; j++)",
            "startLine": 724,
            "endLine": 726,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(j)).isTrue();\n",
            "startLine": 729,
            "endLine": 729,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(j)).isTrue();\n",
            "startLine": 725,
            "endLine": 725,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LogicalType[] fieldTypes=new LogicalType[]{new VarCharType(VarCharType.MAX_LENGTH),new BooleanType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DoubleType(),new TimestampType(9),new DecimalType(5,0),new DecimalType(15,2),new DecimalType(20,0),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new ArrayType(new VarCharType(VarCharType.MAX_LENGTH)),new ArrayType(new BooleanType()),new ArrayType(new TinyIntType()),new ArrayType(new SmallIntType()),new ArrayType(new IntType()),new ArrayType(new BigIntType()),new ArrayType(new FloatType()),new ArrayType(new DoubleType()),new ArrayType(new TimestampType(9)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new MapType(new VarCharType(VarCharType.MAX_LENGTH),new VarCharType(VarCharType.MAX_LENGTH)),new MapType(new IntType(),new BooleanType()),RowType.of(new VarCharType(VarCharType.MAX_LENGTH),new IntType()),new BooleanType(),new DateType(),new TimestampType(9),new DoubleType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new VarCharType(VarCharType.MAX_LENGTH)};\n",
            "startLine": 631,
            "endLine": 681,
            "startColumn": 9,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LogicalType[] fieldTypes=new LogicalType[]{new VarCharType(VarCharType.MAX_LENGTH),new BooleanType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DoubleType(),new TimestampType(9),new DecimalType(5,0),new DecimalType(15,2),new DecimalType(20,0),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new ArrayType(new VarCharType(VarCharType.MAX_LENGTH)),new ArrayType(new BooleanType()),new ArrayType(new TinyIntType()),new ArrayType(new SmallIntType()),new ArrayType(new IntType()),new ArrayType(new BigIntType()),new ArrayType(new FloatType()),new ArrayType(new DoubleType()),new ArrayType(new TimestampType(9)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new MapType(new VarCharType(VarCharType.MAX_LENGTH),new VarCharType(VarCharType.MAX_LENGTH)),new MapType(new IntType(),new BooleanType()),RowType.of(new VarCharType(VarCharType.MAX_LENGTH),new IntType()),new BooleanType(),new DateType(),new TimestampType(9),new DoubleType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new VarCharType(VarCharType.MAX_LENGTH)};\n",
            "startLine": 627,
            "endLine": 677,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RowType rowType=RowType.of(fieldTypes,IntStream.range(0,46).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n",
            "startLine": 683,
            "endLine": 686,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RowType rowType=RowType.of(fieldTypes,IntStream.range(0,46).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n",
            "startLine": 679,
            "endLine": 682,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int[] projected=new int[]{7,2,4,33,37,38,39,40,41,36,34,35,42,43,44,45};\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 9,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int[] projected=new int[]{7,2,4,33,37,38,39,40,41,36,34,35,42,43,44,45};\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 9,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RowType producedType=new RowType(Arrays.stream(projected).mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n",
            "startLine": 690,
            "endLine": 694,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RowType producedType=new RowType(Arrays.stream(projected).mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n",
            "startLine": 686,
            "endLine": 690,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowInputFormat<FileSourceSplit> format=ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),producedType,InternalTypeInfo.of(producedType),partitionKeys,PartitionFieldExtractor.forFileSystem(\"my_default_value\"),500,false,true);\n",
            "startLine": 696,
            "endLine": 705,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowInputFormat<FileSourceSplit> format=ParquetColumnarRowInputFormat.createPartitionedFormat(new Configuration(),producedType,InternalTypeInfo.of(producedType),partitionKeys,PartitionFieldExtractor.forFileSystem(\"my_default_value\"),500,false,true);\n",
            "startLine": 692,
            "endLine": 701,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileStatus fileStatus=testPath.getFileSystem().getFileStatus(testPath);\n",
            "startLine": 707,
            "endLine": 707,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileStatus fileStatus=testPath.getFileSystem().getFileStatus(testPath);\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger cnt=new AtomicInteger(0);\n",
            "startLine": 709,
            "endLine": 709,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AtomicInteger cnt=new AtomicInteger(0);\n",
            "startLine": 705,
            "endLine": 705,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=cnt.get();\n",
            "startLine": 721,
            "endLine": 721,
            "startColumn": 21,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=cnt.get();\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 21,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(0)).isEqualTo(i);\n",
            "startLine": 723,
            "endLine": 723,
            "startColumn": 21,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(0)).isEqualTo(i);\n",
            "startLine": 719,
            "endLine": 719,
            "startColumn": 21,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(1)).isEqualTo((byte)i);\n",
            "startLine": 724,
            "endLine": 724,
            "startColumn": 21,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(1)).isEqualTo((byte)i);\n",
            "startLine": 720,
            "endLine": 720,
            "startColumn": 21,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(2)).isEqualTo(i);\n",
            "startLine": 725,
            "endLine": 725,
            "startColumn": 21,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(2)).isEqualTo(i);\n",
            "startLine": 721,
            "endLine": 721,
            "startColumn": 21,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(3)).isTrue();\n",
            "startLine": 732,
            "endLine": 732,
            "startColumn": 25,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(3)).isTrue();\n",
            "startLine": 728,
            "endLine": 728,
            "startColumn": 25,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(4)).isEqualTo((byte)9);\n",
            "startLine": 733,
            "endLine": 733,
            "startColumn": 25,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(4)).isEqualTo((byte)9);\n",
            "startLine": 729,
            "endLine": 729,
            "startColumn": 25,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(5)).isEqualTo((short)10);\n",
            "startLine": 734,
            "endLine": 734,
            "startColumn": 25,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(5)).isEqualTo((short)10);\n",
            "startLine": 730,
            "endLine": 730,
            "startColumn": 25,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(6)).isEqualTo(11);\n",
            "startLine": 735,
            "endLine": 735,
            "startColumn": 25,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(6)).isEqualTo(11);\n",
            "startLine": 731,
            "endLine": 731,
            "startColumn": 25,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(7)).isEqualTo(12);\n",
            "startLine": 736,
            "endLine": 736,
            "startColumn": 25,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(7)).isEqualTo(12);\n",
            "startLine": 732,
            "endLine": 732,
            "startColumn": 25,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(8)).isEqualTo((float)13);\n",
            "startLine": 737,
            "endLine": 737,
            "startColumn": 25,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(8)).isEqualTo((float)13);\n",
            "startLine": 733,
            "endLine": 733,
            "startColumn": 25,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(9)).isEqualTo(6.6);\n",
            "startLine": 738,
            "endLine": 738,
            "startColumn": 25,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(9)).isEqualTo(6.6);\n",
            "startLine": 734,
            "endLine": 734,
            "startColumn": 25,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n",
            "startLine": 739,
            "endLine": 740,
            "startColumn": 25,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n",
            "startLine": 735,
            "endLine": 736,
            "startColumn": 25,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n",
            "startLine": 741,
            "endLine": 742,
            "startColumn": 25,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n",
            "startLine": 737,
            "endLine": 738,
            "startColumn": 25,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(24),5,0));\n",
            "startLine": 743,
            "endLine": 744,
            "startColumn": 25,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(24),5,0));\n",
            "startLine": 739,
            "endLine": 740,
            "startColumn": 25,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(25),15,0));\n",
            "startLine": 745,
            "endLine": 746,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(25),15,0));\n",
            "startLine": 741,
            "endLine": 742,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(26),20,0));\n",
            "startLine": 747,
            "endLine": 748,
            "startColumn": 25,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(26),20,0));\n",
            "startLine": 743,
            "endLine": 744,
            "startColumn": 25,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cnt.incrementAndGet();\n",
            "startLine": 751,
            "endLine": 751,
            "startColumn": 21,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cnt.incrementAndGet();\n",
            "startLine": 747,
            "endLine": 747,
            "startColumn": 21,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 731,
            "endLine": 750,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 727,
            "endLine": 746,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "forEachRemaining(format.createReader(EMPTY_CONF,new FileSourceSplit(\"id\",testPath,0,Long.MAX_VALUE,fileStatus.getModificationTime(),fileStatus.getLen())),row -> {\n  int i=cnt.get();\n  assertThat(row.getDouble(0)).isEqualTo(i);\n  assertThat(row.getByte(1)).isEqualTo((byte)i);\n  assertThat(row.getInt(2)).isEqualTo(i);\n  if (nullPartValue) {\n    for (int j=3; j < 16; j++) {\n      assertThat(row.isNullAt(j)).isTrue();\n    }\n  }\n else {\n    assertThat(row.getBoolean(3)).isTrue();\n    assertThat(row.getByte(4)).isEqualTo((byte)9);\n    assertThat(row.getShort(5)).isEqualTo((short)10);\n    assertThat(row.getInt(6)).isEqualTo(11);\n    assertThat(row.getLong(7)).isEqualTo(12);\n    assertThat(row.getFloat(8)).isEqualTo((float)13);\n    assertThat(row.getDouble(9)).isEqualTo(6.6);\n    assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n    assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n    assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(24),5,0));\n    assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(25),15,0));\n    assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(26),20,0));\n    assertThat(row.getString(15).toString()).isEqualTo(\"f45\");\n  }\n  cnt.incrementAndGet();\n}\n);\n",
            "startLine": 710,
            "endLine": 752,
            "startColumn": 9,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "forEachRemaining(format.createReader(EMPTY_CONF,new FileSourceSplit(\"id\",testPath,0,Long.MAX_VALUE,fileStatus.getModificationTime(),fileStatus.getLen())),row -> {\n  int i=cnt.get();\n  assertThat(row.getDouble(0)).isEqualTo(i);\n  assertThat(row.getByte(1)).isEqualTo((byte)i);\n  assertThat(row.getInt(2)).isEqualTo(i);\n  if (nullPartValue) {\n    for (int j=3; j < 16; j++) {\n      assertThat(row.isNullAt(j)).isTrue();\n    }\n  }\n else {\n    assertThat(row.getBoolean(3)).isTrue();\n    assertThat(row.getByte(4)).isEqualTo((byte)9);\n    assertThat(row.getShort(5)).isEqualTo((short)10);\n    assertThat(row.getInt(6)).isEqualTo(11);\n    assertThat(row.getLong(7)).isEqualTo(12);\n    assertThat(row.getFloat(8)).isEqualTo((float)13);\n    assertThat(row.getDouble(9)).isEqualTo(6.6);\n    assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n    assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n    assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(24),5,0));\n    assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(25),15,0));\n    assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(26),20,0));\n    assertThat(row.getString(15)).hasToString(\"f45\");\n  }\n  cnt.incrementAndGet();\n}\n);\n",
            "startLine": 706,
            "endLine": 748,
            "startColumn": 9,
            "endColumn": 20
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(15).toString()).isEqualTo(\"f45\");\n",
            "startLine": 749,
            "endLine": 749,
            "startColumn": 25,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(15)).hasToString(\"f45\");\n",
            "startLine": 745,
            "endLine": 745,
            "startColumn": 25,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "url": "https://github.com/apache/flink/commit/db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "originalMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetFileSystemITCase",
        "type": "Method",
        "name": "testNonPartition",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetFileSystemITCase.java",
        "startLine": 89,
        "endLine": 113,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.formats.parquet.ParquetFileSystemITCase",
        "type": "Method",
        "name": "testNonPartition",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetFileSystemITCase.java",
        "startLine": 89,
        "endLine": 113,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 100,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 100,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 110,
            "endLine": 112,
            "startColumn": 33,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 110,
            "endLine": 112,
            "startColumn": 33,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(e);\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 13,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(e);\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(configure)",
            "startLine": 103,
            "endLine": 109,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(configure)",
            "startLine": 103,
            "endLine": 109,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.testNonPartition();\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.testNonPartition();\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File directory=new File(URI.create(resultPath()).getPath());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File directory=new File(URI.create(resultPath()).getPath());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File[] files=directory.listFiles((dir,name) -> !name.startsWith(\".\") && !name.startsWith(\"_\"));\n",
            "startLine": 95,
            "endLine": 96,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File[] files=directory.listFiles((dir,name) -> !name.startsWith(\".\") && !name.startsWith(\"_\"));\n",
            "startLine": 95,
            "endLine": 96,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(files).isNotNull();\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(files).isNotNull();\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path path=new Path(URI.create(files[0].getAbsolutePath()));\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Path path=new Path(URI.create(files[0].getAbsolutePath()));\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetMetadata footer=readFooter(new Configuration(),path,range(0,Long.MAX_VALUE));\n",
            "startLine": 101,
            "endLine": 102,
            "startColumn": 13,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetMetadata footer=readFooter(new Configuration(),path,range(0,Long.MAX_VALUE));\n",
            "startLine": 101,
            "endLine": 102,
            "startColumn": 13,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 103,
            "endLine": 106,
            "startColumn": 28,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 103,
            "endLine": 106,
            "startColumn": 28,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(footer.getBlocks().get(0).getColumns().get(0).getCodec().toString()).isEqualTo(\"SNAPPY\");\n",
            "startLine": 107,
            "endLine": 108,
            "startColumn": 17,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(footer.getBlocks().get(0).getColumns().get(0).getCodec()).hasToString(\"SNAPPY\");\n",
            "startLine": 107,
            "endLine": 108,
            "startColumn": 17,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(footer.getBlocks().get(0).getColumns().get(0).getCodec().toString()).isEqualTo(\"GZIP\");\n",
            "startLine": 104,
            "endLine": 105,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(footer.getBlocks().get(0).getColumns().get(0).getCodec()).hasToString(\"GZIP\");\n",
            "startLine": 104,
            "endLine": 105,
            "startColumn": 17,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "url": "https://github.com/apache/flink/commit/db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "originalMethod": {
        "container": "org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReaderTest",
        "type": "Method",
        "name": "readSplitAndCheck",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java",
        "startLine": 238,
        "endLine": 348,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReaderTest",
        "type": "Method",
        "name": "readSplitAndCheck",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java",
        "startLine": 230,
        "endLine": 340,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(!reader.reachedEnd())",
            "startLine": 250,
            "endLine": 345,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(!reader.reachedEnd())",
            "startLine": 242,
            "endLine": 337,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(v == null)",
            "startLine": 253,
            "endLine": 343,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(v == null)",
            "startLine": 245,
            "endLine": 335,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 253,
            "endLine": 287,
            "startColumn": 28,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 245,
            "endLine": 279,
            "startColumn": 28,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(0)).isTrue();\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(0)).isTrue();\n",
            "startLine": 246,
            "endLine": 246,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(1)).isTrue();\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(1)).isTrue();\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(2)).isTrue();\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(2)).isTrue();\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(3)).isTrue();\n",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(3)).isTrue();\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(4)).isTrue();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(4)).isTrue();\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(5)).isTrue();\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(5)).isTrue();\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(6)).isTrue();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(6)).isTrue();\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(7)).isTrue();\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(7)).isTrue();\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(8)).isTrue();\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(8)).isTrue();\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(10)).isTrue();\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(10)).isTrue();\n",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(11)).isTrue();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(11)).isTrue();\n",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(13)).isTrue();\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(13)).isTrue();\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(14)).isTrue();\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(14)).isTrue();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(15)).isTrue();\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(15)).isTrue();\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(16)).isTrue();\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(16)).isTrue();\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(17)).isTrue();\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(17)).isTrue();\n",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(18)).isTrue();\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(18)).isTrue();\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(19)).isTrue();\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(19)).isTrue();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(20)).isTrue();\n",
            "startLine": 274,
            "endLine": 274,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(20)).isTrue();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(21)).isTrue();\n",
            "startLine": 275,
            "endLine": 275,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(21)).isTrue();\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(22)).isTrue();\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(22)).isTrue();\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(23)).isTrue();\n",
            "startLine": 277,
            "endLine": 277,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(23)).isTrue();\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 278,
            "endLine": 278,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(25)).isTrue();\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(25)).isTrue();\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(26)).isTrue();\n",
            "startLine": 280,
            "endLine": 280,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(26)).isTrue();\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(28)).isTrue();\n",
            "startLine": 282,
            "endLine": 282,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(28)).isTrue();\n",
            "startLine": 274,
            "endLine": 274,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(29)).isTrue();\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(29)).isTrue();\n",
            "startLine": 275,
            "endLine": 275,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(30)).isTrue();\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(30)).isTrue();\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(31)).isTrue();\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(31)).isTrue();\n",
            "startLine": 277,
            "endLine": 277,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(32)).isTrue();\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 17,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(32)).isTrue();\n",
            "startLine": 278,
            "endLine": 278,
            "startColumn": 17,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null)",
            "startLine": 297,
            "endLine": 311,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0) == null)",
            "startLine": 289,
            "endLine": 303,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 297,
            "endLine": 302,
            "startColumn": 86,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 289,
            "endLine": 294,
            "startColumn": 86,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 21,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(9)).isTrue();\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 21,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 21,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(12)).isTrue();\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 21,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 21,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(24)).isTrue();\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 21,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 21,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(27)).isTrue();\n",
            "startLine": 293,
            "endLine": 293,
            "startColumn": 21,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 302,
            "endLine": 311,
            "startColumn": 24,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 294,
            "endLine": 303,
            "startColumn": 24,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 303,
            "endLine": 304,
            "startColumn": 21,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(9,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 295,
            "endLine": 296,
            "startColumn": 21,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 305,
            "endLine": 306,
            "startColumn": 21,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 297,
            "endLine": 298,
            "startColumn": 21,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 307,
            "endLine": 308,
            "startColumn": 21,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(24).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 299,
            "endLine": 300,
            "startColumn": 21,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 309,
            "endLine": 310,
            "startColumn": 21,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(27).getDecimal(0,5,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),5,0));\n",
            "startLine": 301,
            "endLine": 302,
            "startColumn": 21,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowSplitReader reader=createReader(testPath,splitStart,splitLength);\n",
            "startLine": 246,
            "endLine": 246,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowSplitReader reader=createReader(testPath,splitStart,splitLength);\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.seekToRow(seekToRow);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.seekToRow(seekToRow);\n",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=start;\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=start;\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ColumnarRowData row=reader.nextRecord();\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ColumnarRowData row=reader.nextRecord();\n",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer v=values.get(i);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 13,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Integer v=values.get(i);\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 13,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 17,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(1)).isEqualTo(v % 2 == 0);\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 17,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 17,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(2)).isEqualTo(v.byteValue());\n",
            "startLine": 282,
            "endLine": 282,
            "startColumn": 17,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 17,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(3)).isEqualTo(v.shortValue());\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 17,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(4)).isEqualTo(v.intValue());\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 17,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(4)).isEqualTo(v.intValue());\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 17,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(5)).isEqualTo(v.longValue());\n",
            "startLine": 293,
            "endLine": 293,
            "startColumn": 17,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(5)).isEqualTo(v.longValue());\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 17,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 17,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(6)).isEqualTo(v.floatValue());\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 17,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n",
            "startLine": 295,
            "endLine": 295,
            "startColumn": 17,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(7)).isEqualTo(v.doubleValue());\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 17,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 296,
            "endLine": 296,
            "startColumn": 17,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(8,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 17,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(10,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 312,
            "endLine": 313,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(10,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 304,
            "endLine": 305,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(11,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 314,
            "endLine": 315,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(11,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 306,
            "endLine": 307,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 316,
            "endLine": 317,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 308,
            "endLine": 309,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 318,
            "endLine": 319,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 310,
            "endLine": 311,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 17,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(16).getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 17,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 17,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(17).getByte(0)).isEqualTo(v.byteValue());\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 17,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 17,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(18).getShort(0)).isEqualTo(v.shortValue());\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 17,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 17,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(19).getInt(0)).isEqualTo(v.intValue());\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 17,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 17,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(20).getLong(0)).isEqualTo(v.longValue());\n",
            "startLine": 317,
            "endLine": 317,
            "startColumn": 17,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 17,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(21).getFloat(0)).isEqualTo(v.floatValue());\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 17,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n",
            "startLine": 327,
            "endLine": 327,
            "startColumn": 17,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(22).getDouble(0)).isEqualTo(v.doubleValue());\n",
            "startLine": 319,
            "endLine": 319,
            "startColumn": 17,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 328,
            "endLine": 329,
            "startColumn": 17,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(23).getTimestamp(0,9).toLocalDateTime()).isEqualTo(toDateTime(v));\n",
            "startLine": 320,
            "endLine": 321,
            "startColumn": 17,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 331,
            "endLine": 332,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(25).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 323,
            "endLine": 324,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 333,
            "endLine": 334,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(26).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 325,
            "endLine": 326,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 335,
            "endLine": 336,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(28).getDecimal(0,15,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),15,0));\n",
            "startLine": 327,
            "endLine": 328,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 337,
            "endLine": 338,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(29).getDecimal(0,20,0)).isEqualTo(DecimalData.fromBigDecimal(BigDecimal.valueOf(v),20,0));\n",
            "startLine": 329,
            "endLine": 330,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 17,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(31).valueArray().getBoolean(0)).isEqualTo(v % 2 == 0);\n",
            "startLine": 332,
            "endLine": 332,
            "startColumn": 17,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n",
            "startLine": 342,
            "endLine": 342,
            "startColumn": 17,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getInt(1)).isEqualTo(v.intValue());\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 17,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 344,
            "endLine": 344,
            "startColumn": 13,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 13,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.close();\n",
            "startLine": 346,
            "endLine": 346,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.close();\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return i - start;\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return i - start;\n",
            "startLine": 339,
            "endLine": 339,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 287,
            "endLine": 343,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 279,
            "endLine": 335,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 341,
            "endLine": 341,
            "startColumn": 17,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getRow(32,2).getString(0)).hasToString(\"\" + v);\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 17,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 17,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(0)).hasToString(\"\" + v);\n",
            "startLine": 280,
            "endLine": 280,
            "startColumn": 17,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(30).valueArray().getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 339,
            "endLine": 339,
            "startColumn": 17,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getMap(30).valueArray().getString(0)).hasToString(\"\" + v);\n",
            "startLine": 331,
            "endLine": 331,
            "startColumn": 17,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(15).getString(0).toString()).isEqualTo(\"\" + v);\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 17,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getArray(15).getString(0)).hasToString(\"\" + v);\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 17,
            "endColumn": 79
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "url": "https://github.com/apache/flink/commit/db3244a6ac2b06cebae9be26d7bcac506cc69093",
      "originalMethod": {
        "container": "org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReaderTest",
        "type": "Method",
        "name": "innerTestPartitionValues",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java",
        "startLine": 588,
        "endLine": 694,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReaderTest",
        "type": "Method",
        "name": "innerTestPartitionValues",
        "filePath": "flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java",
        "startLine": 587,
        "endLine": 694,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "While Statement",
            "expression": "while(!reader.reachedEnd())",
            "startLine": 657,
            "endLine": 692,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "While Statement",
            "expression": "while(!reader.reachedEnd())",
            "startLine": 657,
            "endLine": 692,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(nullPartValue)",
            "startLine": 666,
            "endLine": 689,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(nullPartValue)",
            "startLine": 666,
            "endLine": 689,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 666,
            "endLine": 670,
            "startColumn": 32,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 666,
            "endLine": 670,
            "startColumn": 32,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=3; j < 16; j++)",
            "startLine": 667,
            "endLine": 669,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int j=3; j < 16; j++)",
            "startLine": 667,
            "endLine": 669,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(j)).isTrue();\n",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 21,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.isNullAt(j)).isTrue();\n",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 21,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LogicalType[] fieldTypes=new LogicalType[]{new VarCharType(VarCharType.MAX_LENGTH),new BooleanType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DoubleType(),new TimestampType(9),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new ArrayType(new VarCharType(VarCharType.MAX_LENGTH)),new ArrayType(new BooleanType()),new ArrayType(new TinyIntType()),new ArrayType(new SmallIntType()),new ArrayType(new IntType()),new ArrayType(new BigIntType()),new ArrayType(new FloatType()),new ArrayType(new DoubleType()),new ArrayType(new TimestampType(9)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new MapType(new VarCharType(VarCharType.MAX_LENGTH),new VarCharType(VarCharType.MAX_LENGTH)),new MapType(new IntType(),new BooleanType()),RowType.of(new VarCharType(VarCharType.MAX_LENGTH),new IntType()),new BooleanType(),new DateType(),new TimestampType(9),new DoubleType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new VarCharType(VarCharType.MAX_LENGTH)};\n",
            "startLine": 590,
            "endLine": 640,
            "startColumn": 9,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "LogicalType[] fieldTypes=new LogicalType[]{new VarCharType(VarCharType.MAX_LENGTH),new BooleanType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DoubleType(),new TimestampType(9),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new ArrayType(new VarCharType(VarCharType.MAX_LENGTH)),new ArrayType(new BooleanType()),new ArrayType(new TinyIntType()),new ArrayType(new SmallIntType()),new ArrayType(new IntType()),new ArrayType(new BigIntType()),new ArrayType(new FloatType()),new ArrayType(new DoubleType()),new ArrayType(new TimestampType(9)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new ArrayType(new DecimalType(5,0)),new ArrayType(new DecimalType(15,0)),new ArrayType(new DecimalType(20,0)),new MapType(new VarCharType(VarCharType.MAX_LENGTH),new VarCharType(VarCharType.MAX_LENGTH)),new MapType(new IntType(),new BooleanType()),RowType.of(new VarCharType(VarCharType.MAX_LENGTH),new IntType()),new BooleanType(),new DateType(),new TimestampType(9),new DoubleType(),new TinyIntType(),new SmallIntType(),new IntType(),new BigIntType(),new FloatType(),new DecimalType(5,0),new DecimalType(15,0),new DecimalType(20,0),new VarCharType(VarCharType.MAX_LENGTH)};\n",
            "startLine": 590,
            "endLine": 640,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowSplitReader reader=ParquetSplitReaderUtil.genPartColumnarRowReader(false,true,new Configuration(),IntStream.range(0,46).mapToObj(i -> \"f\" + i).toArray(String[]::new),Arrays.stream(fieldTypes).map(TypeConversions::fromLogicalToDataType).toArray(DataType[]::new),partSpec,new int[]{7,2,4,33,37,38,39,40,41,36,34,35,42,43,44,45},rowGroupSize,new Path(testPath.getPath()),0,Long.MAX_VALUE);\n",
            "startLine": 641,
            "endLine": 655,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ParquetColumnarRowSplitReader reader=ParquetSplitReaderUtil.genPartColumnarRowReader(false,true,new Configuration(),IntStream.range(0,46).mapToObj(i -> \"f\" + i).toArray(String[]::new),Arrays.stream(fieldTypes).map(TypeConversions::fromLogicalToDataType).toArray(DataType[]::new),partSpec,new int[]{7,2,4,33,37,38,39,40,41,36,34,35,42,43,44,45},rowGroupSize,new Path(testPath.getPath()),0,Long.MAX_VALUE);\n",
            "startLine": 641,
            "endLine": 655,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 9,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 9,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ColumnarRowData row=reader.nextRecord();\n",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ColumnarRowData row=reader.nextRecord();\n",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(0)).isEqualTo(i);\n",
            "startLine": 661,
            "endLine": 661,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(0)).isEqualTo(i);\n",
            "startLine": 661,
            "endLine": 661,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(1)).isEqualTo((byte)i);\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(1)).isEqualTo((byte)i);\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(2)).isEqualTo(i);\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 13,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(2)).isEqualTo(i);\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(3)).isTrue();\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 17,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getBoolean(3)).isTrue();\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 17,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(4)).isEqualTo((byte)9);\n",
            "startLine": 672,
            "endLine": 672,
            "startColumn": 17,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getByte(4)).isEqualTo((byte)9);\n",
            "startLine": 672,
            "endLine": 672,
            "startColumn": 17,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(5)).isEqualTo((short)10);\n",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 17,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getShort(5)).isEqualTo((short)10);\n",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 17,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(6)).isEqualTo(11);\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 17,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(6)).isEqualTo(11);\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 17,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(7)).isEqualTo(12);\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 17,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getLong(7)).isEqualTo(12);\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 17,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(8)).isEqualTo(13);\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 17,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getFloat(8)).isEqualTo(13);\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 17,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(9)).isEqualTo(6.6);\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 17,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDouble(9)).isEqualTo(6.6);\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 17,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n",
            "startLine": 678,
            "endLine": 679,
            "startColumn": 17,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getInt(10)).isEqualTo(DateTimeUtils.toInternal(Date.valueOf(\"2020-11-23\")));\n",
            "startLine": 678,
            "endLine": 679,
            "startColumn": 17,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n",
            "startLine": 680,
            "endLine": 681,
            "startColumn": 17,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getTimestamp(11,9).toLocalDateTime()).isEqualTo(LocalDateTime.of(1999,1,1,1,1));\n",
            "startLine": 680,
            "endLine": 681,
            "startColumn": 17,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(42),5,0));\n",
            "startLine": 682,
            "endLine": 683,
            "startColumn": 17,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(12,5,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(42),5,0));\n",
            "startLine": 682,
            "endLine": 683,
            "startColumn": 17,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(43),15,0));\n",
            "startLine": 684,
            "endLine": 685,
            "startColumn": 17,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(13,15,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(43),15,0));\n",
            "startLine": 684,
            "endLine": 685,
            "startColumn": 17,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(44),20,0));\n",
            "startLine": 686,
            "endLine": 687,
            "startColumn": 17,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getDecimal(14,20,0)).isEqualTo(DecimalData.fromBigDecimal(new BigDecimal(44),20,0));\n",
            "startLine": 686,
            "endLine": 687,
            "startColumn": 17,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 13,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 13,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.close();\n",
            "startLine": 693,
            "endLine": 693,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "reader.close();\n",
            "startLine": 693,
            "endLine": 693,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 670,
            "endLine": 689,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 670,
            "endLine": 689,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(15).toString()).isEqualTo(\"f45\");\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 17,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(row.getString(15)).hasToString(\"f45\");\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 17,
            "endColumn": 66
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "14392cf4ff291d1dbe316f4687e79760591127f3",
      "url": "https://github.com/apache/flink/commit/14392cf4ff291d1dbe316f4687e79760591127f3",
      "originalMethod": {
        "container": "org.apache.flink.runtime.io.network.partition.hybrid.HsSubpartitionMemoryDataManagerTest",
        "type": "Method",
        "name": "testGetBuffersSatisfyStatus",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/hybrid/HsSubpartitionMemoryDataManagerTest.java",
        "startLine": 269,
        "endLine": 328,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.runtime.io.network.partition.hybrid.HsSubpartitionMemoryDataManagerTest",
        "type": "Method",
        "name": "testGetBuffersSatisfyStatus",
        "filePath": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/hybrid/HsSubpartitionMemoryDataManagerTest.java",
        "startLine": 271,
        "endLine": 334,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < numBuffers; i++)",
            "startLine": 278,
            "endLine": 280,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < numBuffers; i++)",
            "startLine": 280,
            "endLine": 282,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.append(createRecord(i),DataType.DATA_BUFFER);\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 13,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.append(createRecord(i),DataType.DATA_BUFFER);\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 13,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TestingMemoryDataManagerOperation memoryDataManagerOperation=TestingMemoryDataManagerOperation.builder().setRequestBufferFromPoolSupplier(() -> createBufferBuilder(RECORD_SIZE)).build();\n",
            "startLine": 271,
            "endLine": 274,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TestingMemoryDataManagerOperation memoryDataManagerOperation=TestingMemoryDataManagerOperation.builder().setRequestBufferFromPoolSupplier(() -> createBufferBuilder(RECORD_SIZE)).build();\n",
            "startLine": 273,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HsSubpartitionMemoryDataManager subpartitionMemoryDataManager=createSubpartitionMemoryDataManager(memoryDataManagerOperation);\n",
            "startLine": 275,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HsSubpartitionMemoryDataManager subpartitionMemoryDataManager=createSubpartitionMemoryDataManager(memoryDataManagerOperation);\n",
            "startLine": 277,
            "endLine": 278,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int numBuffers=4;\n",
            "startLine": 277,
            "endLine": 277,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int numBuffers=4;\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<BufferIndexAndChannel> toStartSpilling=HybridShuffleTestUtils.createBufferIndexAndChannelsList(0,1,2);\n",
            "startLine": 283,
            "endLine": 284,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<BufferIndexAndChannel> toStartSpilling=HybridShuffleTestUtils.createBufferIndexAndChannelsList(0,1,2);\n",
            "startLine": 285,
            "endLine": 286,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompletableFuture<Void> spilledDoneFuture=new CompletableFuture<>();\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CompletableFuture<Void> spilledDoneFuture=new CompletableFuture<>();\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.spillSubpartitionBuffers(toStartSpilling,spilledDoneFuture);\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.spillSubpartitionBuffers(toStartSpilling,spilledDoneFuture);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.consumeBuffer(0);\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.consumeBuffer(0);\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.consumeBuffer(1);\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "subpartitionMemoryDataManager.consumeBuffer(1);\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,ConsumeStatus.CONSUMED),Collections.singletonList(1));\n",
            "startLine": 316,
            "endLine": 319,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,fromStatusAndConsumerId(ConsumeStatus.CONSUMED,HsConsumerId.DEFAULT)),Collections.singletonList(1));\n",
            "startLine": 319,
            "endLine": 323,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ConsumeStatus.CONSUMED),Collections.singletonList(0));\n",
            "startLine": 320,
            "endLine": 323,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,fromStatusAndConsumerId(ConsumeStatus.CONSUMED,HsConsumerId.DEFAULT)),Collections.singletonList(0));\n",
            "startLine": 324,
            "endLine": 328,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ConsumeStatus.NOT_CONSUMED),Collections.singletonList(3));\n",
            "startLine": 324,
            "endLine": 327,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,fromStatusAndConsumerId(ConsumeStatus.NOT_CONSUMED,HsConsumerId.DEFAULT)),Collections.singletonList(3));\n",
            "startLine": 329,
            "endLine": 333,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ConsumeStatus.ALL),Arrays.asList(0,1,2,3));\n",
            "startLine": 292,
            "endLine": 295,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ALL_ANY),Arrays.asList(0,1,2,3));\n",
            "startLine": 294,
            "endLine": 296,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,ConsumeStatus.NOT_CONSUMED),Collections.singletonList(2));\n",
            "startLine": 312,
            "endLine": 315,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,fromStatusAndConsumerId(ConsumeStatus.NOT_CONSUMED,HsConsumerId.DEFAULT)),Collections.singletonList(2));\n",
            "startLine": 314,
            "endLine": 318,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ConsumeStatus.ALL),Arrays.asList(0,3));\n",
            "startLine": 308,
            "endLine": 311,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ALL_ANY),Arrays.asList(0,3));\n",
            "startLine": 310,
            "endLine": 313,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ConsumeStatus.NOT_CONSUMED),Arrays.asList(2,3));\n",
            "startLine": 300,
            "endLine": 303,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,fromStatusAndConsumerId(ConsumeStatus.NOT_CONSUMED,HsConsumerId.DEFAULT)),Arrays.asList(2,3));\n",
            "startLine": 302,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,ConsumeStatus.ALL),Arrays.asList(1,2));\n",
            "startLine": 304,
            "endLine": 307,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,ALL_ANY),Arrays.asList(1,2));\n",
            "startLine": 307,
            "endLine": 309,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ConsumeStatus.CONSUMED),Arrays.asList(0,1));\n",
            "startLine": 296,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,fromStatusAndConsumerId(ConsumeStatus.CONSUMED,HsConsumerId.DEFAULT)),Arrays.asList(0,1));\n",
            "startLine": 297,
            "endLine": 301,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ConsumeStatus.CONSUMED),Arrays.asList(0,1));\n",
            "startLine": 296,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ALL_ANY),Arrays.asList(0,3));\n",
            "startLine": 310,
            "endLine": 313,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,ConsumeStatus.NOT_CONSUMED),Arrays.asList(2,3));\n",
            "startLine": 300,
            "endLine": 303,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.SPILL,ALL_ANY),Arrays.asList(1,2));\n",
            "startLine": 307,
            "endLine": 309,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.NOT_SPILL,ConsumeStatus.ALL),Arrays.asList(0,3));\n",
            "startLine": 308,
            "endLine": 311,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkBufferIndex(subpartitionMemoryDataManager.getBuffersSatisfyStatus(SpillStatus.ALL,fromStatusAndConsumerId(ConsumeStatus.CONSUMED,HsConsumerId.DEFAULT)),Arrays.asList(0,1));\n",
            "startLine": 297,
            "endLine": 301,
            "startColumn": 9,
            "endColumn": 38
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testFileExists",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 104,
        "endLine": 108,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testFileExists",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 107,
        "endLine": 111,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(basePath);\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(basePath);\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.exists(filePath));\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(filePath)).isTrue();\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testSuccessfulDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 151,
        "endLine": 154,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testSuccessfulDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 154,
        "endLine": 157,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fs.delete(path,recursionEnabled);\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fs.delete(path,recursionEnabled);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(path));\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(path)).isFalse();\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 156,
        "endLine": 164,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 159,
        "endLine": 167,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directoryPath=new Path(basePath,randomName());\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directoryPath=new Path(basePath,randomName());\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(directoryPath);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(directoryPath);\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(IOException.class,() -> fs.delete(directoryPath,false));\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThatThrownBy(() -> fs.delete(directoryPath,false)).isInstanceOf(IOException.class);\n",
            "startLine": 164,
            "endLine": 164,
            "startColumn": 9,
            "endColumn": 99
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.exists(directoryPath));\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(directoryPath)).isTrue();\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.exists(filePath));\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(filePath)).isTrue();\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryRecursiveDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 166,
        "endLine": 174,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryRecursiveDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 169,
        "endLine": 177,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directoryPath=new Path(basePath,randomName());\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directoryPath=new Path(basePath,randomName());\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(directoryPath);\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path filePath=createRandomFileInDirectory(directoryPath);\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fs.delete(directoryPath,true);\n",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fs.delete(directoryPath,true);\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(filePath));\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(filePath)).isFalse();\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(directoryPath));\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(directoryPath)).isFalse();\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryWithSubDirRecursiveDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 176,
        "endLine": 187,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testExistingNonEmptyDirectoryWithSubDirRecursiveDeletion",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 179,
        "endLine": 190,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path level1SubDirWithFile=new Path(basePath,randomName());\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path level1SubDirWithFile=new Path(basePath,randomName());\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path fileInLevel1Subdir=createRandomFileInDirectory(level1SubDirWithFile);\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 9,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path fileInLevel1Subdir=createRandomFileInDirectory(level1SubDirWithFile);\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 9,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path level2SubDirWithFile=new Path(level1SubDirWithFile,randomName());\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path level2SubDirWithFile=new Path(level1SubDirWithFile,randomName());\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path fileInLevel2Subdir=createRandomFileInDirectory(level2SubDirWithFile);\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 9,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path fileInLevel2Subdir=createRandomFileInDirectory(level2SubDirWithFile);\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 9,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testSuccessfulDeletion(level1SubDirWithFile,true);\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testSuccessfulDeletion(level1SubDirWithFile,true);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(level2SubDirWithFile));\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(level2SubDirWithFile)).isFalse();\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(fileInLevel1Subdir));\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(fileInLevel1Subdir)).isFalse();\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(fs.exists(fileInLevel2Subdir));\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(fileInLevel2Subdir)).isFalse();\n",
            "startLine": 189,
            "endLine": 189,
            "startColumn": 9,
            "endColumn": 61
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsReturnsTrueWhenCreatingDirectory",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 191,
        "endLine": 202,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsReturnsTrueWhenCreatingDirectory",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 194,
        "endLine": 205,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(getFileSystemKind() != FileSystemKind.OBJECT_STORE)",
            "startLine": 199,
            "endLine": 201,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(getFileSystemKind() != FileSystemKind.OBJECT_STORE)",
            "startLine": 202,
            "endLine": 204,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(basePath,randomName());\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(basePath,randomName());\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.mkdirs(directory));\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.mkdirs(directory)).isTrue();\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.exists(directory));\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(directory)).isTrue();\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsCreatesParentDirectories",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 204,
        "endLine": 216,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsCreatesParentDirectories",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 207,
        "endLine": 219,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(getFileSystemKind() != FileSystemKind.OBJECT_STORE)",
            "startLine": 213,
            "endLine": 215,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(getFileSystemKind() != FileSystemKind.OBJECT_STORE)",
            "startLine": 216,
            "endLine": 218,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(new Path(new Path(basePath,randomName()),randomName()),randomName());\n",
            "startLine": 209,
            "endLine": 210,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(new Path(new Path(basePath,randomName()),randomName()),randomName());\n",
            "startLine": 212,
            "endLine": 213,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.exists(directory));\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.exists(directory)).isTrue();\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.mkdirs(directory));\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.mkdirs(directory)).isTrue();\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsReturnsTrueForExistingDirectory",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 218,
        "endLine": 229,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.core.fs.FileSystemBehaviorTestSuite",
        "type": "Method",
        "name": "testMkdirsReturnsTrueForExistingDirectory",
        "filePath": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemBehaviorTestSuite.java",
        "startLine": 221,
        "endLine": 232,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(basePath,randomName());\n",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Path directory=new Path(basePath,randomName());\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "createRandomFileInDirectory(directory);\n",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "createRandomFileInDirectory(directory);\n",
            "startLine": 229,
            "endLine": 229,
            "startColumn": 9,
            "endColumn": 48
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(fs.mkdirs(directory));\n",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fs.mkdirs(directory)).isTrue();\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 9,
            "endColumn": 51
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/flink.git",
      "sha1": "1008114b7959a09e73b5b793ffb770e1537414e9",
      "url": "https://github.com/apache/flink/commit/1008114b7959a09e73b5b793ffb770e1537414e9",
      "originalMethod": {
        "container": "org.apache.flink.fs.azurefs.AzureFileSystemBehaviorITCase",
        "type": "Method",
        "name": "checkCredentialsAndSetup",
        "filePath": "flink-filesystems/flink-azure-fs-hadoop/src/test/java/org/apache/flink/fs/azurefs/AzureFileSystemBehaviorITCase.java",
        "startLine": 105,
        "endLine": 120,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.flink.fs.azurefs.AzureFileSystemBehaviorITCase",
        "type": "Method",
        "name": "checkCredentialsAndSetup",
        "filePath": "flink-filesystems/flink-azure-fs-hadoop/src/test/java/org/apache/flink/fs/azurefs/AzureFileSystemBehaviorITCase.java",
        "startLine": 113,
        "endLine": 128,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Configuration conf=new Configuration();\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Configuration conf=new Configuration();\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setString(\"fs.azure.account.key.\" + ACCOUNT + \".blob.core.windows.net\",ACCESS_KEY);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setString(\"fs.azure.account.key.\" + ACCOUNT + \".blob.core.windows.net\",ACCESS_KEY);\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "FileSystem.initialize(conf);\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "FileSystem.initialize(conf,null);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assume.assumeTrue(\"Azure container not configured, skipping test...\",!StringUtils.isNullOrWhitespaceOnly(CONTAINER));\n",
            "startLine": 108,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeThat(CONTAINER).describedAs(\"Azure container not configured, skipping test...\").isNotBlank();\n",
            "startLine": 116,
            "endLine": 118,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assume.assumeTrue(\"Azure access key not configured, skipping test...\",!StringUtils.isNullOrWhitespaceOnly(ACCESS_KEY));\n",
            "startLine": 111,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeThat(ACCESS_KEY).describedAs(\"Azure access key not configured, skipping test...\").isNotBlank();\n",
            "startLine": 119,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}