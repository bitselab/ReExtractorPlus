{
  "results": [
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "url": "https://github.com/apache/commons-io/commit/17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "originalMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testAcceptIOBiConsumerOfTUTU",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 49,
        "endLine": 61,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testAcceptIOBiConsumerOfTUTU",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 50,
        "endLine": 62,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept((t,u) -> {\n  throw new IOException();\n}\n,null,null));\n",
            "startLine": 51,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept((t,u) -> {\n  throw new IOException();\n}\n,null,null));\n",
            "startLine": 52,
            "endLine": 54,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept(TestConstants.THROWING_IO_BI_CONSUMER,null,null));\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 9,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept(TestConstants.THROWING_IO_BI_CONSUMER,null,null));\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref2,u);\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref2,u);\n",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref1,t);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref1,t);\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Uncheck.accept((t,u) -> {\n  compareAndSet(ref1,t);\n  compareAndSet(ref2,u);\n}\n,\"new1\",\"new2\");\n",
            "startLine": 55,
            "endLine": 58,
            "startColumn": 9,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Uncheck.accept((t,u) -> {\n  TestUtils.compareAndSetThrows(ref1,t);\n  TestUtils.compareAndSetThrows(ref2,u);\n}\n,\"new1\",\"new2\");\n",
            "startLine": 56,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 28
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "url": "https://github.com/apache/commons-io/commit/17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "originalMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testAcceptIOTriConsumerOfTUVTUV",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 81,
        "endLine": 95,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testAcceptIOTriConsumerOfTUVTUV",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 74,
        "endLine": 88,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept((t,u,v) -> {\n  throw new IOException();\n}\n,null,null,null));\n",
            "startLine": 83,
            "endLine": 85,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept((t,u,v) -> {\n  throw new IOException();\n}\n,null,null,null));\n",
            "startLine": 76,
            "endLine": 78,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept(TestConstants.THROWING_IO_TRI_CONSUMER,null,null,null));\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 9,
            "endColumn": 130
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.accept(TestConstants.THROWING_IO_TRI_CONSUMER,null,null,null));\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 9,
            "endColumn": 130
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref1,t);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref1,t);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Uncheck.accept((t,u,v) -> {\n  compareAndSet(ref1,t);\n  compareAndSet(ref2,u);\n  compareAndSet(ref3,v);\n}\n,\"new1\",\"new2\",\"new3\");\n",
            "startLine": 87,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Uncheck.accept((t,u,v) -> {\n  TestUtils.compareAndSetThrows(ref1,t);\n  TestUtils.compareAndSetThrows(ref2,u);\n  TestUtils.compareAndSetThrows(ref3,v);\n}\n,\"new1\",\"new2\",\"new3\");\n",
            "startLine": 80,
            "endLine": 84,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref3,v);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref3,v);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref2,u);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref2,u);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "url": "https://github.com/apache/commons-io/commit/17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "originalMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOBiFunctionOfTURTU",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 97,
        "endLine": 110,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOBiFunctionOfTURTU",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 90,
        "endLine": 103,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u) -> {\n  throw new IOException();\n}\n,null,null));\n",
            "startLine": 99,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u) -> {\n  throw new IOException();\n}\n,null,null));\n",
            "startLine": 92,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_BI_FUNCTION,null,null));\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 9,
            "endColumn": 122
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_BI_FUNCTION,null,null));\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 9,
            "endColumn": 122
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u) -> {\n  compareAndSet(ref1,t);\n  compareAndSet(ref2,u);\n  return \"new0\";\n}\n,\"new1\",\"new2\"));\n",
            "startLine": 103,
            "endLine": 107,
            "startColumn": 9,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u) -> {\n  TestUtils.compareAndSetThrows(ref1,t);\n  TestUtils.compareAndSetThrows(ref2,u);\n  return \"new0\";\n}\n,\"new1\",\"new2\"));\n",
            "startLine": 96,
            "endLine": 100,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref1,t);\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref1,t);\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref2,u);\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref2,u);\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "url": "https://github.com/apache/commons-io/commit/17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "originalMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOQuadFunctionOfTUVWRTUVW",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 122,
        "endLine": 139,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOQuadFunctionOfTUVWRTUVW",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 115,
        "endLine": 132,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u,v,w) -> {\n  throw new IOException();\n}\n,null,null,null,null));\n",
            "startLine": 124,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u,v,w) -> {\n  throw new IOException();\n}\n,null,null,null,null));\n",
            "startLine": 117,
            "endLine": 119,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_QUAD_FUNCTION,null,null,null,null));\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 9,
            "endColumn": 136
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_QUAD_FUNCTION,null,null,null,null));\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 136
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new4\",ref4.get());\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new4\",ref4.get());\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u,v,w) -> {\n  compareAndSet(ref1,t);\n  compareAndSet(ref2,u);\n  compareAndSet(ref3,v);\n  compareAndSet(ref4,w);\n  return \"new0\";\n}\n,\"new1\",\"new2\",\"new3\",\"new4\"));\n",
            "startLine": 128,
            "endLine": 134,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u,v,w) -> {\n  TestUtils.compareAndSetThrows(ref1,t);\n  TestUtils.compareAndSetThrows(ref2,u);\n  TestUtils.compareAndSetThrows(ref3,v);\n  TestUtils.compareAndSetThrows(ref4,w);\n  return \"new0\";\n}\n,\"new1\",\"new2\",\"new3\",\"new4\"));\n",
            "startLine": 121,
            "endLine": 127,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref4,w);\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref4,w);\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref3,v);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref3,v);\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref2,u);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref2,u);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref1,t);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref1,t);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "url": "https://github.com/apache/commons-io/commit/17b7581a70036bb955f98f8eb06c48ec20fba6d6",
      "originalMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOTriFunctionOfTUVRTUV",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 141,
        "endLine": 156,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.function.UncheckTest",
        "type": "Method",
        "name": "testApplyIOTriFunctionOfTUVRTUV",
        "filePath": "src/test/java/org/apache/commons/io/function/UncheckTest.java",
        "startLine": 134,
        "endLine": 149,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IOException();\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u,v) -> {\n  throw new IOException();\n}\n,null,null,null));\n",
            "startLine": 143,
            "endLine": 145,
            "startColumn": 9,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply((t,u,v) -> {\n  throw new IOException();\n}\n,null,null,null));\n",
            "startLine": 136,
            "endLine": 138,
            "startColumn": 9,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_TRI_FUNCTION,null,null,null));\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 9,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThrows(UncheckedIOException.class,() -> Uncheck.apply(TestConstants.THROWING_IO_TRI_FUNCTION,null,null,null));\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 9,
            "endColumn": 129
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new1\",ref1.get());\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new2\",ref2.get());\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new3\",ref3.get());\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u,v) -> {\n  compareAndSet(ref1,t);\n  compareAndSet(ref2,u);\n  compareAndSet(ref3,v);\n  return \"new0\";\n}\n,\"new1\",\"new2\",\"new3\"));\n",
            "startLine": 147,
            "endLine": 152,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"new0\",Uncheck.apply((t,u,v) -> {\n  TestUtils.compareAndSetThrows(ref1,t);\n  TestUtils.compareAndSetThrows(ref2,u);\n  TestUtils.compareAndSetThrows(ref3,v);\n  return \"new0\";\n}\n,\"new1\",\"new2\",\"new3\"));\n",
            "startLine": 140,
            "endLine": 145,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return \"new0\";\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref1,t);\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref1,t);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref3,v);\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref3,v);\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "compareAndSet(ref2,u);\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 13,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "TestUtils.compareAndSetThrows(ref2,u);\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "2ce0a112df85f88e2891384076ef74ae1021b506",
      "url": "https://github.com/apache/commons-io/commit/2ce0a112df85f88e2891384076ef74ae1021b506",
      "originalMethod": {
        "container": "org.apache.commons.io.CopyUtilsTest",
        "type": "Method",
        "name": "copy_inputStreamToWriterWithEncoding",
        "filePath": "src/test/java/org/apache/commons/io/CopyUtilsTest.java",
        "startLine": 99,
        "endLine": 106,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.CopyUtilsTest",
        "type": "Method",
        "name": "copy_inputStreamToWriterWithEncoding",
        "filePath": "src/test/java/org/apache/commons/io/CopyUtilsTest.java",
        "startLine": 99,
        "endLine": 106,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String inDataStr=\"data\";\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String inDataStr=\"data\";\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final StringWriter writer=new StringWriter();\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final StringWriter writer=new StringWriter();\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CopyUtils.copy(new StringInputStream(inDataStr,charsetName),writer,charsetName);\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CopyUtils.copy(new StringInputStream(inDataStr,charsetName),writer,charsetName);\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(inDataStr,writer.toString());\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(inDataStr,writer.toString());\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charsetName=\"UTF-8\";\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charsetName=StandardCharsets.UTF_8.name();\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "2ce0a112df85f88e2891384076ef74ae1021b506",
      "url": "https://github.com/apache/commons-io/commit/2ce0a112df85f88e2891384076ef74ae1021b506",
      "originalMethod": {
        "container": "org.apache.commons.io.CopyUtilsTest",
        "type": "Method",
        "name": "testCopy_byteArrayToWriterWithEncoding",
        "filePath": "src/test/java/org/apache/commons/io/CopyUtilsTest.java",
        "startLine": 160,
        "endLine": 167,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.CopyUtilsTest",
        "type": "Method",
        "name": "testCopy_byteArrayToWriterWithEncoding",
        "filePath": "src/test/java/org/apache/commons/io/CopyUtilsTest.java",
        "startLine": 160,
        "endLine": 167,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String inDataStr=\"data\";\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String inDataStr=\"data\";\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final StringWriter writer=new StringWriter();\n",
            "startLine": 164,
            "endLine": 164,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final StringWriter writer=new StringWriter();\n",
            "startLine": 164,
            "endLine": 164,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CopyUtils.copy(inDataStr.getBytes(charsetName),writer,charsetName);\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CopyUtils.copy(inDataStr.getBytes(charsetName),writer,charsetName);\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(inDataStr,writer.toString());\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(inDataStr,writer.toString());\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charsetName=\"UTF-8\";\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String charsetName=StandardCharsets.UTF_8.name();\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "2ce0a112df85f88e2891384076ef74ae1021b506",
      "url": "https://github.com/apache/commons-io/commit/2ce0a112df85f88e2891384076ef74ae1021b506",
      "originalMethod": {
        "container": "org.apache.commons.io.output.XmlStreamWriterTest",
        "type": "Method",
        "name": "testDefaultEncoding",
        "filePath": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
        "startLine": 88,
        "endLine": 95,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.output.XmlStreamWriterTest",
        "type": "Method",
        "name": "testDefaultEncoding",
        "filePath": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
        "startLine": 88,
        "endLine": 95,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,null);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,null);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,\"UTF-8\");\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,StandardCharsets.UTF_8.name());\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,\"UTF-16\");\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,StandardCharsets.UTF_16.name());\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,\"UTF-16BE\");\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,StandardCharsets.UTF_16BE.name());\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,\"ISO-8859-1\");\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkXmlWriter(TEXT_UNICODE,null,StandardCharsets.ISO_8859_1.name());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1623,
        "endLine": 1641,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1623,
        "endLine": 1638,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(chronoZonedDateTime,\"chronoZonedDateTime\");\n",
            "startLine": 1635,
            "endLine": 1635,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(chronoZonedDateTime,\"chronoZonedDateTime\");\n",
            "startLine": 1636,
            "endLine": 1636,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1636,
            "endLine": 1640,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1638,
            "endLine": 1640,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1639,
            "endLine": 1639,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1657,
        "endLine": 1674,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1654,
        "endLine": 1667,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(reference,\"reference\");\n",
            "startLine": 1668,
            "endLine": 1668,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(reference,\"reference\");\n",
            "startLine": 1665,
            "endLine": 1665,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1669,
            "endLine": 1673,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1672,
            "endLine": 1672,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1671,
            "endLine": 1673,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1691,
        "endLine": 1707,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1684,
        "endLine": 1696,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(instant,\"instant\");\n",
            "startLine": 1701,
            "endLine": 1701,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(instant,\"instant\");\n",
            "startLine": 1694,
            "endLine": 1694,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1702,
            "endLine": 1706,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1704,
            "endLine": 1706,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1705,
            "endLine": 1705,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1709,
        "endLine": 1725,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileNewer",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1698,
        "endLine": 1710,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(file,\"file\");\n",
            "startLine": 1719,
            "endLine": 1719,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(file,\"file\");\n",
            "startLine": 1708,
            "endLine": 1708,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1720,
            "endLine": 1724,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1723,
            "endLine": 1723,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1722,
            "endLine": 1724,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1846,
        "endLine": 1862,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1831,
        "endLine": 1843,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(reference,\"reference\");\n",
            "startLine": 1856,
            "endLine": 1856,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(reference,\"reference\");\n",
            "startLine": 1841,
            "endLine": 1841,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1857,
            "endLine": 1861,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1860,
            "endLine": 1860,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1859,
            "endLine": 1861,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1879,
        "endLine": 1895,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1860,
        "endLine": 1872,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(instant,\"instant\");\n",
            "startLine": 1889,
            "endLine": 1889,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(instant,\"instant\");\n",
            "startLine": 1870,
            "endLine": 1870,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1890,
            "endLine": 1894,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1892,
            "endLine": 1894,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1893,
            "endLine": 1893,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1897,
        "endLine": 1913,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "isFileOlder",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 1874,
        "endLine": 1886,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(file,\"file\");\n",
            "startLine": 1907,
            "endLine": 1907,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(file,\"file\");\n",
            "startLine": 1884,
            "endLine": 1884,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1908,
            "endLine": 1912,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 1910,
            "endLine": 1912,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 1911,
            "endLine": 1911,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "listFiles",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2190,
        "endLine": 2226,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "listFiles",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2155,
        "endLine": 2188,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return visitor.getFileList().stream().map(Path::toFile).collect(Collectors.toList());\n",
            "startLine": 2222,
            "endLine": 2222,
            "startColumn": 13,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return visitor.getFileList().stream().map(Path::toFile).collect(Collectors.toList());\n",
            "startLine": 2187,
            "endLine": 2187,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AccumulatorPathVisitor visitor=listAccumulate(directory,FileFileFilter.INSTANCE.and(fileFilter),dirFilter,FileVisitOption.FOLLOW_LINKS);\n",
            "startLine": 2221,
            "endLine": 2221,
            "startColumn": 13,
            "endColumn": 160
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AccumulatorPathVisitor visitor=UncheckedIO.apply(d -> listAccumulate(d,FileFileFilter.INSTANCE.and(fileFilter),dirFilter,FileVisitOption.FOLLOW_LINKS),directory);\n",
            "startLine": 2185,
            "endLine": 2186,
            "startColumn": 9,
            "endColumn": 137
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 2220,
            "endLine": 2225,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 86,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw UncheckedIOExceptions.create(directory,e);\n",
            "startLine": 2224,
            "endLine": 2224,
            "startColumn": 13,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 2223,
            "endLine": 2225,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 88,
            "endLine": 90,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "listFilesAndDirs",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2246,
        "endLine": 2274,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "listFilesAndDirs",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2204,
        "endLine": 2229,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Path> list=visitor.getFileList();\n",
            "startLine": 2268,
            "endLine": 2268,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Path> list=visitor.getFileList();\n",
            "startLine": 2226,
            "endLine": 2226,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "list.addAll(visitor.getDirList());\n",
            "startLine": 2269,
            "endLine": 2269,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "list.addAll(visitor.getDirList());\n",
            "startLine": 2227,
            "endLine": 2227,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return list.stream().map(Path::toFile).collect(Collectors.toList());\n",
            "startLine": 2270,
            "endLine": 2270,
            "startColumn": 13,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return list.stream().map(Path::toFile).collect(Collectors.toList());\n",
            "startLine": 2228,
            "endLine": 2228,
            "startColumn": 9,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AccumulatorPathVisitor visitor=listAccumulate(directory,fileFilter,dirFilter,FileVisitOption.FOLLOW_LINKS);\n",
            "startLine": 2267,
            "endLine": 2267,
            "startColumn": 13,
            "endColumn": 131
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AccumulatorPathVisitor visitor=UncheckedIO.apply(d -> listAccumulate(d,fileFilter,dirFilter,FileVisitOption.FOLLOW_LINKS),directory);\n",
            "startLine": 2224,
            "endLine": 2225,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 2266,
            "endLine": 2273,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 86,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw UncheckedIOExceptions.create(directory,e);\n",
            "startLine": 2272,
            "endLine": 2272,
            "startColumn": 13,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 2271,
            "endLine": 2273,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 88,
            "endLine": 90,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOf",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2898,
        "endLine": 2929,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOf",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2853,
        "endLine": 2880,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(file,\"file\");\n",
            "startLine": 2923,
            "endLine": 2923,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(file,\"file\");\n",
            "startLine": 2878,
            "endLine": 2878,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 2924,
            "endLine": 2928,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 2927,
            "endLine": 2927,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 2926,
            "endLine": 2928,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOfAsBigInteger",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2931,
        "endLine": 2957,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOfAsBigInteger",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2882,
        "endLine": 2904,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(file,\"file\");\n",
            "startLine": 2951,
            "endLine": 2951,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requireExists(file,\"file\");\n",
            "startLine": 2902,
            "endLine": 2902,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 2952,
            "endLine": 2956,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 2954,
            "endLine": 2956,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 2955,
            "endLine": 2955,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-io.git",
      "sha1": "4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "url": "https://github.com/apache/commons-io/commit/4aab769c3279ea63b7bcdaa163c50761bc540f8c",
      "originalMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOfDirectory",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2959,
        "endLine": 2980,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.io.FileUtils",
        "type": "Method",
        "name": "sizeOfDirectory",
        "filePath": "src/main/java/org/apache/commons/io/FileUtils.java",
        "startLine": 2906,
        "endLine": 2923,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "requireDirectoryExists(directory,\"directory\");\n",
            "startLine": 2974,
            "endLine": 2974,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "requireDirectoryExists(directory,\"directory\");\n",
            "startLine": 2921,
            "endLine": 2921,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 2975,
            "endLine": 2979,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 138,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 2977,
            "endLine": 2979,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedIOException(e);\n",
            "startLine": 2978,
            "endLine": 2978,
            "startColumn": 13,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw wrap(e);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}