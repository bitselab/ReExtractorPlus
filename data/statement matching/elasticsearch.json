{
  "results": [
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "c8953310cddf6b5a9be33b1a5273a5f6202268fb",
      "url": "https://github.com/elastic/elasticsearch/commit/c8953310cddf6b5a9be33b1a5273a5f6202268fb",
      "originalMethod": {
        "container": "org.elasticsearch.cluster.routing.RoutingNode",
        "type": "Method",
        "name": "shardsWithState",
        "filePath": "server/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java",
        "startLine": 275,
        "endLine": 323,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.cluster.routing.RoutingNode",
        "type": "Method",
        "name": "shardsWithState",
        "filePath": "server/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java",
        "startLine": 247,
        "endLine": 255,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 317,
            "endLine": 319,
            "startColumn": 50,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 260,
            "endLine": 262,
            "startColumn": 58,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.add(shardEntry);\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 21,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.add(shardEntry);\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 17,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ShardRouting> shards=new ArrayList<>();\n",
            "startLine": 282,
            "endLine": 282,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "var shards=new ArrayList<ShardRouting>();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(shardEntry: this)",
            "startLine": 312,
            "endLine": 321,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(shardEntry: internalGetShardsWithState(state))",
            "startLine": 259,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(shardEntry.getIndexName().equals(index) == false)",
            "startLine": 313,
            "endLine": 315,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(shardEntry.getIndexName().equals(index))",
            "startLine": 260,
            "endLine": 262,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 17,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 17,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 17,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(state: states)",
            "startLine": 316,
            "endLine": 320,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(shardEntry: internalGetShardsWithState(state))",
            "startLine": 259,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "c8953310cddf6b5a9be33b1a5273a5f6202268fb",
      "url": "https://github.com/elastic/elasticsearch/commit/c8953310cddf6b5a9be33b1a5273a5f6202268fb",
      "originalMethod": {
        "container": "org.elasticsearch.cluster.routing.RoutingNodesHelper",
        "type": "Method",
        "name": "shardsWithState",
        "filePath": "test/framework/src/main/java/org/elasticsearch/cluster/routing/RoutingNodesHelper.java",
        "startLine": 33,
        "endLine": 49,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.cluster.routing.RoutingNodesHelper",
        "type": "Method",
        "name": "shardsWithState",
        "filePath": "test/framework/src/main/java/org/elasticsearch/cluster/routing/RoutingNodesHelper.java",
        "startLine": 34,
        "endLine": 50,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(unassignedShard: routingNodes.unassigned())",
            "startLine": 40,
            "endLine": 44,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(unassignedShard: routingNodes.unassigned())",
            "startLine": 38,
            "endLine": 42,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(unassignedShard.index().getName().equals(index))",
            "startLine": 41,
            "endLine": 43,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(unassignedShard.index().getName().equals(index))",
            "startLine": 39,
            "endLine": 41,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.add(unassignedShard);\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 25,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.add(unassignedShard);\n",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 25,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(routingNode: routingNodes)",
            "startLine": 35,
            "endLine": 37,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(routingNode: routingNodes)",
            "startLine": 44,
            "endLine": 46,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.addAll(routingNode.shardsWithState(index,state));\n",
            "startLine": 36,
            "endLine": 36,
            "startColumn": 13,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shards.addAll(routingNode.shardsWithState(index,state));\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 21,
            "endColumn": 78
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 48,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ShardRouting> shards=new ArrayList<>();\n",
            "startLine": 34,
            "endLine": 34,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "var shards=new ArrayList<ShardRouting>();\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ShardRouting> shards=new ArrayList<>();\n",
            "startLine": 34,
            "endLine": 34,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ShardRouting> shards=new ArrayList<>();\n",
            "startLine": 35,
            "endLine": 35,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 48,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return shards;\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(s == ShardRoutingState.UNASSIGNED)",
            "startLine": 39,
            "endLine": 46,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(state == ShardRoutingState.UNASSIGNED)",
            "startLine": 37,
            "endLine": 47,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(s: state)",
            "startLine": 38,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(state: states)",
            "startLine": 36,
            "endLine": 48,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 39,
            "endLine": 46,
            "startColumn": 52,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 37,
            "endLine": 43,
            "startColumn": 56,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "4095d658e53bd414ceff4a2d85b9b6d08133d040",
      "url": "https://github.com/elastic/elasticsearch/commit/4095d658e53bd414ceff4a2d85b9b6d08133d040",
      "originalMethod": {
        "container": "org.elasticsearch.action.admin.cluster.node.tasks.TransportTasksActionTests",
        "type": "Method",
        "name": "serialize",
        "filePath": "server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java",
        "startLine": 890,
        "endLine": 903,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.action.admin.cluster.node.tasks.TransportTasksActionTests",
        "type": "Method",
        "name": "serialize",
        "filePath": "server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java",
        "startLine": 891,
        "endLine": 902,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(byParents)",
            "startLine": 893,
            "endLine": 898,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(byParents)",
            "startLine": 893,
            "endLine": 898,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);\n",
            "startLine": 891,
            "endLine": 891,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);\n",
            "startLine": 892,
            "endLine": 892,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DiscoveryNodes nodes=testNodes[0].clusterService.state().nodes();\n",
            "startLine": 894,
            "endLine": 894,
            "startColumn": 13,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DiscoveryNodes nodes=testNodes[0].clusterService.state().nodes();\n",
            "startLine": 894,
            "endLine": 894,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.flush();\n",
            "startLine": 900,
            "endLine": 900,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.flush();\n",
            "startLine": 899,
            "endLine": 899,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.info(Strings.toString(builder));\n",
            "startLine": 901,
            "endLine": 901,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.info(Strings.toString(builder));\n",
            "startLine": 900,
            "endLine": 900,
            "startColumn": 9,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return XContentHelper.convertToMap(BytesReference.bytes(builder),false,builder.contentType()).v2();\n",
            "startLine": 902,
            "endLine": 902,
            "startColumn": 9,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return XContentHelper.convertToMap(BytesReference.bytes(builder),false,builder.contentType()).v2();\n",
            "startLine": 901,
            "endLine": 901,
            "startColumn": 9,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 896,
            "endLine": 898,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 896,
            "endLine": 898,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 893,
            "endLine": 896,
            "startColumn": 24,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 893,
            "endLine": 896,
            "startColumn": 24,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.toXContentGroupedByParents(builder,ToXContent.EMPTY_PARAMS);\n",
            "startLine": 897,
            "endLine": 897,
            "startColumn": 13,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ChunkedToXContent.wrapAsXContentObject(response.groupedByParent()).toXContent(builder,ToXContent.EMPTY_PARAMS);\n",
            "startLine": 897,
            "endLine": 897,
            "startColumn": 13,
            "endColumn": 125
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.toXContentGroupedByNode(builder,ToXContent.EMPTY_PARAMS,nodes);\n",
            "startLine": 895,
            "endLine": 895,
            "startColumn": 13,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ChunkedToXContent.wrapAsXContentObject(response.groupedByNode(() -> nodes)).toXContent(builder,ToXContent.EMPTY_PARAMS);\n",
            "startLine": 895,
            "endLine": 895,
            "startColumn": 13,
            "endColumn": 134
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "26d9bdd280d5eb1783251854a1e49d97cd05db70",
      "url": "https://github.com/elastic/elasticsearch/commit/26d9bdd280d5eb1783251854a1e49d97cd05db70",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.core.ssl.RestrictedTrustManager",
        "type": "Method",
        "name": "verifyTrust",
        "filePath": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/RestrictedTrustManager.java",
        "startLine": 94,
        "endLine": 125,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.core.ssl.RestrictedTrustManager",
        "type": "Method",
        "name": "verifyTrust",
        "filePath": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/RestrictedTrustManager.java",
        "startLine": 109,
        "endLine": 144,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(chain.length == 0)",
            "startLine": 95,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(chain.length == 0)",
            "startLine": 110,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CertificateException(\"No certificate presented\");\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CertificateException(\"No certificate presented\");\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final X509Certificate certificate=chain[0];\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final X509Certificate certificate=chain[0];\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 109,
            "endLine": 124,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 125,
            "endLine": 143,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CertificateException(\"Certificate for \" + certificate.getSubjectX500Principal() + \" with common-names \"+ names+ \" does not match the trusted names \"+ trustRestrictions.getTrustedNames());\n",
            "startLine": 116,
            "endLine": 123,
            "startColumn": 13,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CertificateException(\"Certificate for \" + certificate.getSubjectX500Principal() + \" with fields \"+ x509Fields+ \" with values \"+ values+ \" does not match the trusted names \"+ trustRestrictions.getTrustedNames());\n",
            "startLine": 133,
            "endLine": 142,
            "startColumn": 13,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 100,
            "endLine": 109,
            "startColumn": 44,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 115,
            "endLine": 125,
            "startColumn": 45,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(verifyCertificateNames(names))",
            "startLine": 100,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(verifyCertificateNames(values))",
            "startLine": 115,
            "endLine": 143,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(() -> format(\"Trusting certificate [%s] [%s] with common-names [%s]\",certificate.getSubjectX500Principal(),certificate.getSerialNumber().toString(16),names));\n",
            "startLine": 101,
            "endLine": 108,
            "startColumn": 13,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(() -> format(\"Trusting certificate [%s] [%s] with fields [%s] with values [%s]\",certificate.getSubjectX500Principal(),certificate.getSerialNumber().toString(16),x509Fields,values));\n",
            "startLine": 116,
            "endLine": 124,
            "startColumn": 13,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.info(\"Rejecting certificate [{}] [{}] with common-names [{}]\",certificate.getSubjectX500Principal(),certificate.getSerialNumber().toString(16),names);\n",
            "startLine": 110,
            "endLine": 115,
            "startColumn": 13,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.info(\"Rejecting certificate [{}] [{}] for fields [{}] with values [{}]\",certificate.getSubjectX500Principal(),certificate.getSerialNumber().toString(16),x509Fields,values);\n",
            "startLine": 126,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 15
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> names=readCommonNames(certificate);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> values=readX509Certificate(certificate);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "7dbc1ea36e258ed718db3adc94c2b8a77aa9d78f",
      "url": "https://github.com/elastic/elasticsearch/commit/7dbc1ea36e258ed718db3adc94c2b8a77aa9d78f",
      "originalMethod": {
        "container": "org.elasticsearch.action.admin.indices.segments.IndicesSegmentResponse",
        "type": "Method",
        "name": "toXContentChunked",
        "filePath": "server/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java",
        "startLine": 81,
        "endLine": 148,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.action.admin.indices.segments.IndicesSegmentResponse",
        "type": "Method",
        "name": "customXContentChunks",
        "filePath": "server/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java",
        "startLine": 79,
        "endLine": 146,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(indexSegment: indexSegments)",
            "startLine": 91,
            "endLine": 142,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(indexSegment: indexSegments)",
            "startLine": 87,
            "endLine": 138,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startArray(Integer.toString(indexSegment.shardId().id()));\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 17,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startArray(Integer.toString(indexSegment.shardId().id()));\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 21,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(shardSegments: indexSegment)",
            "startLine": 93,
            "endLine": 140,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(shardSegments: indexSegment)",
            "startLine": 89,
            "endLine": 136,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject();\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 21,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject();\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 25,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.ROUTING);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 21,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.ROUTING);\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 25,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.STATE,shardSegments.getShardRouting().state());\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 21,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.STATE,shardSegments.getShardRouting().state());\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 25,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.PRIMARY,shardSegments.getShardRouting().primary());\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 21,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.PRIMARY,shardSegments.getShardRouting().primary());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 25,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NODE,shardSegments.getShardRouting().currentNodeId());\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 21,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NODE,shardSegments.getShardRouting().currentNodeId());\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 25,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(shardSegments.getShardRouting().relocatingNodeId() != null)",
            "startLine": 100,
            "endLine": 102,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(shardSegments.getShardRouting().relocatingNodeId() != null)",
            "startLine": 96,
            "endLine": 98,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.RELOCATING_NODE,shardSegments.getShardRouting().relocatingNodeId());\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 25,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.RELOCATING_NODE,shardSegments.getShardRouting().relocatingNodeId());\n",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 29,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 21,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 25,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_COMMITTED_SEGMENTS,shardSegments.getNumberOfCommitted());\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 21,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_COMMITTED_SEGMENTS,shardSegments.getNumberOfCommitted());\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 25,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_SEARCH_SEGMENTS,shardSegments.getNumberOfSearch());\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 21,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_SEARCH_SEGMENTS,shardSegments.getNumberOfSearch());\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 25,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.SEGMENTS);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 21,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.SEGMENTS);\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(segment: shardSegments)",
            "startLine": 109,
            "endLine": 136,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(segment: shardSegments)",
            "startLine": 105,
            "endLine": 132,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(segment.getName());\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 25,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(segment.getName());\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 29,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.GENERATION,segment.getGeneration());\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 25,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.GENERATION,segment.getGeneration());\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 29,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_DOCS,segment.getNumDocs());\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 25,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.NUM_DOCS,segment.getNumDocs());\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 29,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.DELETED_DOCS,segment.getDeletedDocs());\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 25,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.DELETED_DOCS,segment.getDeletedDocs());\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 29,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.humanReadableField(Fields.SIZE_IN_BYTES,Fields.SIZE,segment.getSize());\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 25,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.humanReadableField(Fields.SIZE_IN_BYTES,Fields.SIZE,segment.getSize());\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 29,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(builder.getRestApiVersion() == RestApiVersion.V_7)",
            "startLine": 115,
            "endLine": 117,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(builder.getRestApiVersion() == RestApiVersion.V_7)",
            "startLine": 111,
            "endLine": 113,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.humanReadableField(Fields.MEMORY_IN_BYTES,Fields.MEMORY,ByteSizeValue.ZERO);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 29,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.humanReadableField(Fields.MEMORY_IN_BYTES,Fields.MEMORY,ByteSizeValue.ZERO);\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 33,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.COMMITTED,segment.isCommitted());\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 25,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.COMMITTED,segment.isCommitted());\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 29,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.SEARCH,segment.isSearch());\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 25,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.SEARCH,segment.isSearch());\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 29,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getVersion() != null)",
            "startLine": 120,
            "endLine": 122,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getVersion() != null)",
            "startLine": 116,
            "endLine": 118,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.VERSION,segment.getVersion());\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 29,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.VERSION,segment.getVersion());\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 33,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.isCompound() != null)",
            "startLine": 123,
            "endLine": 125,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.isCompound() != null)",
            "startLine": 119,
            "endLine": 121,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.COMPOUND,segment.isCompound());\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 29,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.COMPOUND,segment.isCompound());\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 33,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getMergeId() != null)",
            "startLine": 126,
            "endLine": 128,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getMergeId() != null)",
            "startLine": 122,
            "endLine": 124,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.MERGE_ID,segment.getMergeId());\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 29,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(Fields.MERGE_ID,segment.getMergeId());\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 33,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getSegmentSort() != null)",
            "startLine": 129,
            "endLine": 131,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.getSegmentSort() != null)",
            "startLine": 125,
            "endLine": 127,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "toXContent(builder,segment.getSegmentSort());\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 29,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "toXContent(builder,segment.getSegmentSort());\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 33,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.attributes != null && segment.attributes.isEmpty() == false)",
            "startLine": 132,
            "endLine": 134,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(segment.attributes != null && segment.attributes.isEmpty() == false)",
            "startLine": 128,
            "endLine": 130,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(\"attributes\",segment.attributes);\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 29,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.field(\"attributes\",segment.attributes);\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 33,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 25,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 29,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endArray();\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 17,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endArray();\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 21,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(indexSegments.getIndex());\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(indexSegments.getIndex());\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 17,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.SHARDS);\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 13,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.startObject(Fields.SHARDS);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 17,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 17,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 17,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return builder;\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 13,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return builder;\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 17,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Iterators.concat(Iterators.single(((builder,params) -> {\n  builder.startObject();\n  RestActions.buildBroadcastShardsHeader(builder,params,this);\n  return builder.startObject(Fields.INDICES);\n}\n)),getIndices().values().stream().map(indexSegments -> (ToXContent)(builder,params) -> {\n  builder.startObject(indexSegments.getIndex());\n  builder.startObject(Fields.SHARDS);\n  for (  IndexShardSegments indexSegment : indexSegments) {\n    builder.startArray(Integer.toString(indexSegment.shardId().id()));\n    for (    ShardSegments shardSegments : indexSegment) {\n      builder.startObject();\n      builder.startObject(Fields.ROUTING);\n      builder.field(Fields.STATE,shardSegments.getShardRouting().state());\n      builder.field(Fields.PRIMARY,shardSegments.getShardRouting().primary());\n      builder.field(Fields.NODE,shardSegments.getShardRouting().currentNodeId());\n      if (shardSegments.getShardRouting().relocatingNodeId() != null) {\n        builder.field(Fields.RELOCATING_NODE,shardSegments.getShardRouting().relocatingNodeId());\n      }\n      builder.endObject();\n      builder.field(Fields.NUM_COMMITTED_SEGMENTS,shardSegments.getNumberOfCommitted());\n      builder.field(Fields.NUM_SEARCH_SEGMENTS,shardSegments.getNumberOfSearch());\n      builder.startObject(Fields.SEGMENTS);\n      for (      Segment segment : shardSegments) {\n        builder.startObject(segment.getName());\n        builder.field(Fields.GENERATION,segment.getGeneration());\n        builder.field(Fields.NUM_DOCS,segment.getNumDocs());\n        builder.field(Fields.DELETED_DOCS,segment.getDeletedDocs());\n        builder.humanReadableField(Fields.SIZE_IN_BYTES,Fields.SIZE,segment.getSize());\n        if (builder.getRestApiVersion() == RestApiVersion.V_7) {\n          builder.humanReadableField(Fields.MEMORY_IN_BYTES,Fields.MEMORY,ByteSizeValue.ZERO);\n        }\n        builder.field(Fields.COMMITTED,segment.isCommitted());\n        builder.field(Fields.SEARCH,segment.isSearch());\n        if (segment.getVersion() != null) {\n          builder.field(Fields.VERSION,segment.getVersion());\n        }\n        if (segment.isCompound() != null) {\n          builder.field(Fields.COMPOUND,segment.isCompound());\n        }\n        if (segment.getMergeId() != null) {\n          builder.field(Fields.MERGE_ID,segment.getMergeId());\n        }\n        if (segment.getSegmentSort() != null) {\n          toXContent(builder,segment.getSegmentSort());\n        }\n        if (segment.attributes != null && segment.attributes.isEmpty() == false) {\n          builder.field(\"attributes\",segment.attributes);\n        }\n        builder.endObject();\n      }\n      builder.endObject();\n      builder.endObject();\n    }\n    builder.endArray();\n  }\n  builder.endObject();\n  builder.endObject();\n  return builder;\n}\n).iterator(),Iterators.single((builder,params) -> builder.endObject().endObject()));\n",
            "startLine": 83,
            "endLine": 147,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Iterators.concat(Iterators.single((builder,p) -> builder.startObject(Fields.INDICES)),getIndices().values().stream().map(indexSegments -> (ToXContent)(builder,p) -> {\n  builder.startObject(indexSegments.getIndex());\n  builder.startObject(Fields.SHARDS);\n  for (  IndexShardSegments indexSegment : indexSegments) {\n    builder.startArray(Integer.toString(indexSegment.shardId().id()));\n    for (    ShardSegments shardSegments : indexSegment) {\n      builder.startObject();\n      builder.startObject(Fields.ROUTING);\n      builder.field(Fields.STATE,shardSegments.getShardRouting().state());\n      builder.field(Fields.PRIMARY,shardSegments.getShardRouting().primary());\n      builder.field(Fields.NODE,shardSegments.getShardRouting().currentNodeId());\n      if (shardSegments.getShardRouting().relocatingNodeId() != null) {\n        builder.field(Fields.RELOCATING_NODE,shardSegments.getShardRouting().relocatingNodeId());\n      }\n      builder.endObject();\n      builder.field(Fields.NUM_COMMITTED_SEGMENTS,shardSegments.getNumberOfCommitted());\n      builder.field(Fields.NUM_SEARCH_SEGMENTS,shardSegments.getNumberOfSearch());\n      builder.startObject(Fields.SEGMENTS);\n      for (      Segment segment : shardSegments) {\n        builder.startObject(segment.getName());\n        builder.field(Fields.GENERATION,segment.getGeneration());\n        builder.field(Fields.NUM_DOCS,segment.getNumDocs());\n        builder.field(Fields.DELETED_DOCS,segment.getDeletedDocs());\n        builder.humanReadableField(Fields.SIZE_IN_BYTES,Fields.SIZE,segment.getSize());\n        if (builder.getRestApiVersion() == RestApiVersion.V_7) {\n          builder.humanReadableField(Fields.MEMORY_IN_BYTES,Fields.MEMORY,ByteSizeValue.ZERO);\n        }\n        builder.field(Fields.COMMITTED,segment.isCommitted());\n        builder.field(Fields.SEARCH,segment.isSearch());\n        if (segment.getVersion() != null) {\n          builder.field(Fields.VERSION,segment.getVersion());\n        }\n        if (segment.isCompound() != null) {\n          builder.field(Fields.COMPOUND,segment.isCompound());\n        }\n        if (segment.getMergeId() != null) {\n          builder.field(Fields.MERGE_ID,segment.getMergeId());\n        }\n        if (segment.getSegmentSort() != null) {\n          toXContent(builder,segment.getSegmentSort());\n        }\n        if (segment.attributes != null && segment.attributes.isEmpty() == false) {\n          builder.field(\"attributes\",segment.attributes);\n        }\n        builder.endObject();\n      }\n      builder.endObject();\n      builder.endObject();\n    }\n    builder.endArray();\n  }\n  builder.endObject();\n  builder.endObject();\n  return builder;\n}\n).iterator(),Iterators.single((builder,p) -> builder.endObject()));\n",
            "startLine": 81,
            "endLine": 145,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 21,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 25,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 21,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 25,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 21,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 25,
            "endColumn": 45
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 21,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "builder.endObject();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 25,
            "endColumn": 45
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "88e44a9cd32399110431e46ea97929520f0d53d7",
      "url": "https://github.com/elastic/elasticsearch/commit/88e44a9cd32399110431e46ea97929520f0d53d7",
      "originalMethod": {
        "container": "org.elasticsearch.repositories.blobstore.BlobStoreRepository",
        "type": "Method",
        "name": "BlobStoreRepository",
        "filePath": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java",
        "startLine": 388,
        "endLine": 423,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.repositories.blobstore.BlobStoreRepository",
        "type": "Method",
        "name": "BlobStoreRepository",
        "filePath": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java",
        "startLine": 388,
        "endLine": 427,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.metadata=metadata;\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.metadata=metadata;\n",
            "startLine": 401,
            "endLine": 401,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.threadPool=clusterService.getClusterApplierService().threadPool();\n",
            "startLine": 402,
            "endLine": 402,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.threadPool=clusterService.getClusterApplierService().threadPool();\n",
            "startLine": 402,
            "endLine": 402,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.clusterService=clusterService;\n",
            "startLine": 403,
            "endLine": 403,
            "startColumn": 9,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.clusterService=clusterService;\n",
            "startLine": 403,
            "endLine": 403,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.bigArrays=bigArrays;\n",
            "startLine": 404,
            "endLine": 404,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.bigArrays=bigArrays;\n",
            "startLine": 404,
            "endLine": 404,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.recoverySettings=recoverySettings;\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.recoverySettings=recoverySettings;\n",
            "startLine": 405,
            "endLine": 405,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.compress=COMPRESS_SETTING.get(metadata.settings());\n",
            "startLine": 406,
            "endLine": 406,
            "startColumn": 9,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.compress=COMPRESS_SETTING.get(metadata.settings());\n",
            "startLine": 406,
            "endLine": 406,
            "startColumn": 9,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.supportURLRepo=SUPPORT_URL_REPO.get(metadata.settings());\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.supportURLRepo=SUPPORT_URL_REPO.get(metadata.settings());\n",
            "startLine": 407,
            "endLine": 407,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "snapshotRateLimiter=getSnapshotRateLimiter();\n",
            "startLine": 408,
            "endLine": 408,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "snapshotRateLimiter=getSnapshotRateLimiter();\n",
            "startLine": 408,
            "endLine": 408,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "restoreRateLimiter=getRestoreRateLimiter();\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "restoreRateLimiter=getRestoreRateLimiter();\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 9,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "readOnly=metadata.settings().getAsBoolean(READONLY_SETTING_KEY,false);\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "readOnly=metadata.settings().getAsBoolean(READONLY_SETTING_KEY,false);\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cacheRepositoryData=CACHE_REPOSITORY_DATA.get(metadata.settings());\n",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cacheRepositoryData=CACHE_REPOSITORY_DATA.get(metadata.settings());\n",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bufferSize=Math.toIntExact(BUFFER_SIZE_SETTING.get(metadata.settings()).getBytes());\n",
            "startLine": 412,
            "endLine": 412,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bufferSize=Math.toIntExact(BUFFER_SIZE_SETTING.get(metadata.settings()).getBytes());\n",
            "startLine": 412,
            "endLine": 412,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.namedXContentRegistry=namedXContentRegistry;\n",
            "startLine": 413,
            "endLine": 413,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.namedXContentRegistry=namedXContentRegistry;\n",
            "startLine": 413,
            "endLine": 413,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.basePath=basePath;\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.basePath=basePath;\n",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.maxSnapshotCount=MAX_SNAPSHOTS_SETTING.get(metadata.settings());\n",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.maxSnapshotCount=MAX_SNAPSHOTS_SETTING.get(metadata.settings());\n",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shardSnapshotTaskRunner=new ShardSnapshotTaskRunner(threadPool.info(ThreadPool.Names.SNAPSHOT).getMax(),threadPool.executor(ThreadPool.Names.SNAPSHOT),this::doSnapshotShard,this::snapshotFile);\n",
            "startLine": 417,
            "endLine": 422,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shardSnapshotTaskRunner=new ShardSnapshotTaskRunner(threadPool.info(ThreadPool.Names.SNAPSHOT).getMax(),threadPool.executor(ThreadPool.Names.SNAPSHOT),this::doSnapshotShard,this::snapshotFile);\n",
            "startLine": 421,
            "endLine": 426,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.repoDataDeduplicator=new ResultDeduplicator<>(threadPool.getThreadContext());\n",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.repoDataLoadDeduplicator=new SingleResultDeduplicator<>(threadPool.getThreadContext(),listener -> threadPool.executor(ThreadPool.Names.SNAPSHOT_META).execute(ActionRunnable.wrap(listener,this::doGetRepositoryData)));\n",
            "startLine": 416,
            "endLine": 420,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "88e44a9cd32399110431e46ea97929520f0d53d7",
      "url": "https://github.com/elastic/elasticsearch/commit/88e44a9cd32399110431e46ea97929520f0d53d7",
      "originalMethod": {
        "container": "org.elasticsearch.repositories.blobstore.BlobStoreRepository",
        "type": "Method",
        "name": "getRepositoryData",
        "filePath": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java",
        "startLine": 1753,
        "endLine": 1804,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.repositories.blobstore.BlobStoreRepository",
        "type": "Method",
        "name": "getRepositoryData",
        "filePath": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java",
        "startLine": 1757,
        "endLine": 1796,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lifecycle.started() == false)",
            "startLine": 1761,
            "endLine": 1764,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lifecycle.started() == false)",
            "startLine": 1765,
            "endLine": 1768,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onFailure(notStartedException());\n",
            "startLine": 1762,
            "endLine": 1762,
            "startColumn": 13,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onFailure(notStartedException());\n",
            "startLine": 1766,
            "endLine": 1766,
            "startColumn": 13,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1763,
            "endLine": 1763,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1767,
            "endLine": 1767,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(latestKnownRepoGen.get() == RepositoryData.CORRUPTED_REPO_GEN)",
            "startLine": 1766,
            "endLine": 1769,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(latestKnownRepoGen.get() == RepositoryData.CORRUPTED_REPO_GEN)",
            "startLine": 1770,
            "endLine": 1773,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onFailure(corruptedStateException(null,null));\n",
            "startLine": 1767,
            "endLine": 1767,
            "startColumn": 13,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onFailure(corruptedStateException(null,null));\n",
            "startLine": 1771,
            "endLine": 1771,
            "startColumn": 13,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1768,
            "endLine": 1768,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1772,
            "endLine": 1772,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(bestEffortConsistency == false && cached.getGenId() == latestKnownRepoGen.get())",
            "startLine": 1773,
            "endLine": 1776,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(bestEffortConsistency == false && cached.getGenId() == latestKnownRepoGen.get())",
            "startLine": 1777,
            "endLine": 1780,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(cached);\n",
            "startLine": 1774,
            "endLine": 1774,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(cached);\n",
            "startLine": 1778,
            "endLine": 1778,
            "startColumn": 13,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1775,
            "endLine": 1775,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 1779,
            "endLine": 1779,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(metadata.generation() == RepositoryData.UNKNOWN_REPO_GEN && isReadOnly() == false)",
            "startLine": 1777,
            "endLine": 1803,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(metadata.generation() == RepositoryData.UNKNOWN_REPO_GEN && isReadOnly() == false)",
            "startLine": 1781,
            "endLine": 1795,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1777,
            "endLine": 1784,
            "startColumn": 96,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1781,
            "endLine": 1788,
            "startColumn": 96,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(\"[{}] loading repository metadata for the first time, trying to determine correct generation and to store \" + \"it in the cluster state\",metadata.name());\n",
            "startLine": 1778,
            "endLine": 1782,
            "startColumn": 13,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(\"[{}] loading repository metadata for the first time, trying to determine correct generation and to store \" + \"it in the cluster state\",metadata.name());\n",
            "startLine": 1782,
            "endLine": 1786,
            "startColumn": 13,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "initializeRepoGenerationTracking(listener);\n",
            "startLine": 1783,
            "endLine": 1783,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "initializeRepoGenerationTracking(listener);\n",
            "startLine": 1787,
            "endLine": 1787,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Assert Statement",
            "expression": "assert clusterService.localNode().isMasterNode() : \"should only load repository data on master nodes\";\n",
            "startLine": 1759,
            "endLine": 1759,
            "startColumn": 9,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Assert Statement",
            "expression": "assert clusterService.localNode().isMasterNode() : \"should only load repository data on master nodes\";\n",
            "startLine": 1763,
            "endLine": 1763,
            "startColumn": 9,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final RepositoryData cached=latestKnownRepositoryData.get();\n",
            "startLine": 1770,
            "endLine": 1770,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final RepositoryData cached=latestKnownRepositoryData.get();\n",
            "startLine": 1774,
            "endLine": 1774,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.trace(\"[{}] loading un-cached repository data with best known repository generation [{}]\",metadata.name(),latestKnownRepoGen);\n",
            "startLine": 1785,
            "endLine": 1789,
            "startColumn": 13,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.trace(\"[{}] loading un-cached repository data with best known repository generation [{}]\",metadata.name(),latestKnownRepoGen);\n",
            "startLine": 1789,
            "endLine": 1793,
            "startColumn": 13,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1784,
            "endLine": 1803,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1788,
            "endLine": 1795,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "executor.execute(ActionRunnable.wrap(listener,this::doGetRepositoryData));\n",
            "startLine": 1795,
            "endLine": 1795,
            "startColumn": 17,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "repoDataLoadDeduplicator.execute(listener);\n",
            "startLine": 1794,
            "endLine": 1794,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "url": "https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testAuthorizedIndicesUserWithSomeRoles",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 57,
        "endLine": 118,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testAuthorizedIndicesUserWithSomeRoles",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 60,
        "endLine": 126,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 58,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 61,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 64,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 67,
            "endLine": 72,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 9,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 71,
            "endLine": 74,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 74,
            "endLine": 77,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).build();\n",
            "startLine": 75,
            "endLine": 97,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).build();\n",
            "startLine": 78,
            "endLine": 100,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 100,
            "endLine": 106,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 103,
            "endLine": 109,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(internalSecurityIndex)));\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(internalSecurityIndex)));\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\"));\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\"));\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> list=RBACEngine.resolveAuthorizedIndicesFromRole(roles,getRequestInfo(SearchAction.NAME),metadata.getIndicesLookup());\n",
            "startLine": 108,
            "endLine": 112,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizedIndices authorizedIndices=RBACEngine.resolveAuthorizedIndicesFromRole(roles,getRequestInfo(SearchAction.NAME),metadata.getIndicesLookup(),() -> ignore -> {\n}\n);\n",
            "startLine": 111,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(list.contains(\"ba\"));\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(\"ba\")));\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "url": "https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testDataStreamsAreNotIncludedInAuthorizedIndices",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 217,
        "endLine": 287,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testDataStreamsAreNotIncludedInAuthorizedIndices",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 234,
        "endLine": 310,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 218,
            "endLine": 223,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 235,
            "endLine": 240,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 224,
            "endLine": 229,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 241,
            "endLine": 246,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 9,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 9,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 231,
            "endLine": 234,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 248,
            "endLine": 251,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String backingIndex=DataStream.getDefaultBackingIndexName(\"adatastream1\",1);\n",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String backingIndex=DataStream.getDefaultBackingIndexName(\"adatastream1\",1);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).put(new IndexMetadata.Builder(backingIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(DataStreamTestHelper.newInstance(\"adatastream1\",List.of(new Index(DataStream.getDefaultBackingIndexName(\"adatastream1\",1),\"_na_\")))).build();\n",
            "startLine": 236,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).put(new IndexMetadata.Builder(backingIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(DataStreamTestHelper.newInstance(\"adatastream1\",List.of(new Index(DataStream.getDefaultBackingIndexName(\"adatastream1\",1),\"_na_\")))).build();\n",
            "startLine": 253,
            "endLine": 282,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 268,
            "endLine": 274,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 285,
            "endLine": 291,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 275,
            "endLine": 275,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\"));\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\"));\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(internalSecurityIndex)));\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(internalSecurityIndex)));\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> list=RBACEngine.resolveAuthorizedIndicesFromRole(roles,getRequestInfo(SearchAction.NAME),metadata.getIndicesLookup());\n",
            "startLine": 276,
            "endLine": 280,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizedIndices authorizedIndices=RBACEngine.resolveAuthorizedIndicesFromRole(roles,getRequestInfo(SearchAction.NAME),metadata.getIndicesLookup(),() -> ignore -> {\n}\n);\n",
            "startLine": 293,
            "endLine": 298,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(list.contains(\"adatastream1\"));\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(\"adatastream1\")));\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(list.contains(\"ba\"));\n",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(\"ba\")));\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "url": "https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testDataStreamsAreIncludedInAuthorizedIndices",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 289,
        "endLine": 356,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authz.AuthorizedIndicesTests",
        "type": "Method",
        "name": "testDataStreamsAreIncludedInAuthorizedIndices",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizedIndicesTests.java",
        "startLine": 312,
        "endLine": 388,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 290,
            "endLine": 295,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor aStarRole=new RoleDescriptor(\"a_star\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"a*\").privileges(\"all\").build()},null);\n",
            "startLine": 313,
            "endLine": 318,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 296,
            "endLine": 301,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RoleDescriptor bRole=new RoleDescriptor(\"b\",null,new IndicesPrivileges[]{IndicesPrivileges.builder().indices(\"b\").privileges(\"READ\").build()},null);\n",
            "startLine": 319,
            "endLine": 324,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 9,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Settings indexSettings=Settings.builder().put(\"index.version.created\",Version.CURRENT).build();\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 9,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 303,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String internalSecurityIndex=randomFrom(TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_6,TestRestrictedIndices.INTERNAL_SECURITY_MAIN_INDEX_7);\n",
            "startLine": 326,
            "endLine": 329,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String backingIndex=DataStream.getDefaultBackingIndexName(\"adatastream1\",1);\n",
            "startLine": 307,
            "endLine": 307,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String backingIndex=DataStream.getDefaultBackingIndexName(\"adatastream1\",1);\n",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).put(new IndexMetadata.Builder(backingIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(DataStreamTestHelper.newInstance(\"adatastream1\",List.of(new Index(DataStream.getDefaultBackingIndexName(\"adatastream1\",1),\"_na_\")))).build();\n",
            "startLine": 308,
            "endLine": 337,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Metadata metadata=Metadata.builder().put(new IndexMetadata.Builder(\"a1\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"a2\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"aaaaaa\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"bbbbb\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(new IndexMetadata.Builder(\"b\").settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(\"ab\").build()).putAlias(new AliasMetadata.Builder(\"ba\").build()).build(),true).put(new IndexMetadata.Builder(internalSecurityIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).putAlias(new AliasMetadata.Builder(SecuritySystemIndices.SECURITY_MAIN_ALIAS).build()).build(),true).put(new IndexMetadata.Builder(backingIndex).settings(indexSettings).numberOfShards(1).numberOfReplicas(0).build(),true).put(DataStreamTestHelper.newInstance(\"adatastream1\",List.of(new Index(DataStream.getDefaultBackingIndexName(\"adatastream1\",1),\"_na_\")))).build();\n",
            "startLine": 331,
            "endLine": 360,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Role> future=new PlainActionFuture<>();\n",
            "startLine": 361,
            "endLine": 361,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 339,
            "endLine": 339,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<RoleDescriptor> descriptors=Sets.newHashSet(aStarRole,bRole);\n",
            "startLine": 362,
            "endLine": 362,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 340,
            "endLine": 346,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "CompositeRolesStore.buildRoleFromDescriptors(descriptors,new FieldPermissionsCache(Settings.EMPTY),null,RESTRICTED_INDICES,future);\n",
            "startLine": 363,
            "endLine": 369,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role roles=future.actionGet();\n",
            "startLine": 370,
            "endLine": 370,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TransportRequest request=new ResolveIndexAction.Request(new String[]{\"a*\"});\n",
            "startLine": 348,
            "endLine": 348,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TransportRequest request=new ResolveIndexAction.Request(new String[]{\"a*\"});\n",
            "startLine": 371,
            "endLine": 371,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizationEngine.RequestInfo requestInfo=getRequestInfo(request,SearchAction.NAME);\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizationEngine.RequestInfo requestInfo=getRequestInfo(request,SearchAction.NAME);\n",
            "startLine": 372,
            "endLine": 372,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\",\"adatastream1\",backingIndex));\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 9,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),containsInAnyOrder(\"a1\",\"a2\",\"aaaaaa\",\"b\",\"ab\",\"adatastream1\",backingIndex));\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 9,
            "endColumn": 134
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> list=RBACEngine.resolveAuthorizedIndicesFromRole(roles,requestInfo,metadata.getIndicesLookup());\n",
            "startLine": 350,
            "endLine": 350,
            "startColumn": 9,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizedIndices authorizedIndices=RBACEngine.resolveAuthorizedIndicesFromRole(roles,requestInfo,metadata.getIndicesLookup(),() -> ignore -> {\n}\n);\n",
            "startLine": 373,
            "endLine": 378,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(internalSecurityIndex)));\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(internalSecurityIndex)));\n",
            "startLine": 384,
            "endLine": 384,
            "startColumn": 9,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(list,not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(SecuritySystemIndices.SECURITY_MAIN_ALIAS)));\n",
            "startLine": 386,
            "endLine": 386,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertFalse(list.contains(\"ba\"));\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),not(contains(\"ba\")));\n",
            "startLine": 382,
            "endLine": 382,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "url": "https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authz.IndicesAndAliasesResolverTests",
        "type": "Method",
        "name": "testDataStreamsAreNotVisibleWhenNotIncludedByRequestWithWildcard",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolverTests.java",
        "startLine": 1950,
        "endLine": 1985,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authz.IndicesAndAliasesResolverTests",
        "type": "Method",
        "name": "testDataStreamsAreNotVisibleWhenNotIncludedByRequestWithWildcard",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolverTests.java",
        "startLine": 1947,
        "endLine": 1985,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dsName: dataStreams)",
            "startLine": 1977,
            "endLine": 1984,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dsName: dataStreams)",
            "startLine": 1977,
            "endLine": 1984,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(dsName));\n",
            "startLine": 1978,
            "endLine": 1978,
            "startColumn": 13,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(dsName));\n",
            "startLine": 1978,
            "endLine": 1978,
            "startColumn": 13,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(dsName));\n",
            "startLine": 1980,
            "endLine": 1980,
            "startColumn": 13,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(dsName));\n",
            "startLine": 1980,
            "endLine": 1980,
            "startColumn": 13,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(i: dataStream.getIndices())",
            "startLine": 1981,
            "endLine": 1983,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(i: dataStream.getIndices())",
            "startLine": 1981,
            "endLine": 1983,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(i.getName()));\n",
            "startLine": 1982,
            "endLine": 1982,
            "startColumn": 17,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(resolvedIndices.getLocal(),hasItem(i.getName()));\n",
            "startLine": 1982,
            "endLine": 1982,
            "startColumn": 17,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dsName: dataStreams)",
            "startLine": 1960,
            "endLine": 1967,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(dsName: dataStreams)",
            "startLine": 1957,
            "endLine": 1967,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(i: dataStream.getIndices())",
            "startLine": 1964,
            "endLine": 1966,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(i: dataStream.getIndices())",
            "startLine": 1963,
            "endLine": 1966,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=new User(\"data-stream-tester2\",\"data_stream_test2\");\n",
            "startLine": 1951,
            "endLine": 1951,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=new User(\"data-stream-tester2\",\"data_stream_test2\");\n",
            "startLine": 1948,
            "endLine": 1948,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "GetAliasesRequest request=new GetAliasesRequest(\"*\");\n",
            "startLine": 1952,
            "endLine": 1952,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "GetAliasesRequest request=new GetAliasesRequest(\"*\");\n",
            "startLine": 1949,
            "endLine": 1949,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(request,instanceOf(IndicesRequest.Replaceable.class));\n",
            "startLine": 1953,
            "endLine": 1953,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(request,instanceOf(IndicesRequest.Replaceable.class));\n",
            "startLine": 1950,
            "endLine": 1950,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(request.includeDataStreams(),is(true));\n",
            "startLine": 1954,
            "endLine": 1954,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(request.includeDataStreams(),is(true));\n",
            "startLine": 1951,
            "endLine": 1951,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> dataStreams=List.of(\"logs-foo\",\"logs-foobar\");\n",
            "startLine": 1958,
            "endLine": 1958,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<String> dataStreams=List.of(\"logs-foo\",\"logs-foobar\");\n",
            "startLine": 1955,
            "endLine": 1955,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedIndices resolvedIndices=defaultIndicesResolver.resolveIndicesAndAliases(GetAliasesAction.NAME,request,metadata,authorizedIndices);\n",
            "startLine": 1971,
            "endLine": 1976,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedIndices resolvedIndices=defaultIndicesResolver.resolveIndicesAndAliases(GetAliasesAction.NAME,request,metadata,authorizedIndices);\n",
            "startLine": 1971,
            "endLine": 1976,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItem(dsName));\n",
            "startLine": 1963,
            "endLine": 1963,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItem(dsName));\n",
            "startLine": 1961,
            "endLine": 1961,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Set<String> authorizedIndices=buildAuthorizedIndices(user,GetAliasesAction.NAME,request);\n",
            "startLine": 1959,
            "endLine": 1959,
            "startColumn": 9,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AuthorizedIndices authorizedIndices=buildAuthorizedIndices(user,GetAliasesAction.NAME,request);\n",
            "startLine": 1956,
            "endLine": 1956,
            "startColumn": 9,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItem(dsName));\n",
            "startLine": 1961,
            "endLine": 1961,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItem(dsName));\n",
            "startLine": 1958,
            "endLine": 1958,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItem(i.getName()));\n",
            "startLine": 1965,
            "endLine": 1965,
            "startColumn": 17,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItem(i.getName()));\n",
            "startLine": 1964,
            "endLine": 1964,
            "startColumn": 17,
            "endColumn": 81
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1979,
            "endLine": 1979,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1979,
            "endLine": 1979,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1962,
            "endLine": 1962,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1960,
            "endLine": 1960,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1962,
            "endLine": 1962,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1979,
            "endLine": 1979,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1979,
            "endLine": 1979,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream dataStream=metadata.dataStreams().get(dsName);\n",
            "startLine": 1960,
            "endLine": 1960,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "url": "https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authz.RBACEngineTests",
        "type": "Method",
        "name": "testBackingIndicesAreIncludedForAuthorizedDataStreams",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/RBACEngineTests.java",
        "startLine": 1462,
        "endLine": 1500,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authz.RBACEngineTests",
        "type": "Method",
        "name": "testBackingIndicesAreIncludedForAuthorizedDataStreams",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/RBACEngineTests.java",
        "startLine": 1459,
        "endLine": 1499,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int k=0; k < numBackingIndices; k++)",
            "startLine": 1474,
            "endLine": 1476,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int k=0; k < numBackingIndices; k++)",
            "startLine": 1470,
            "endLine": 1472,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "backingIndices.add(DataStreamTestHelper.createBackingIndex(dataStreamName,k + 1).build());\n",
            "startLine": 1475,
            "endLine": 1475,
            "startColumn": 13,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "backingIndices.add(DataStreamTestHelper.createBackingIndex(dataStreamName,k + 1).build());\n",
            "startLine": 1471,
            "endLine": 1471,
            "startColumn": 13,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(im: backingIndices)",
            "startLine": 1483,
            "endLine": 1485,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(im: backingIndices)",
            "startLine": 1479,
            "endLine": 1481,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lookup.put(im.getIndex().getName(),new IndexAbstraction.ConcreteIndex(im,iads));\n",
            "startLine": 1484,
            "endLine": 1484,
            "startColumn": 13,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lookup.put(im.getIndex().getName(),new IndexAbstraction.ConcreteIndex(im,iads));\n",
            "startLine": 1480,
            "endLine": 1480,
            "startColumn": 13,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String dataStreamName=\"my_data_stream\";\n",
            "startLine": 1463,
            "endLine": 1463,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String dataStreamName=\"my_data_stream\";\n",
            "startLine": 1460,
            "endLine": 1460,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "User user=new User(randomAlphaOfLengthBetween(4,12));\n",
            "startLine": 1464,
            "endLine": 1464,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "User user=new User(randomAlphaOfLengthBetween(4,12));\n",
            "startLine": 1461,
            "endLine": 1461,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role role=Role.builder(RESTRICTED_INDICES,\"test1\").cluster(Collections.singleton(\"all\"),Collections.emptyList()).add(IndexPrivilege.READ,dataStreamName).build();\n",
            "startLine": 1466,
            "endLine": 1469,
            "startColumn": 9,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Role role=Role.builder(RESTRICTED_INDICES,\"test1\").cluster(Collections.singleton(\"all\"),Collections.emptyList()).add(IndexPrivilege.READ,dataStreamName).build();\n",
            "startLine": 1462,
            "endLine": 1465,
            "startColumn": 9,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TreeMap<String,IndexAbstraction> lookup=new TreeMap<>();\n",
            "startLine": 1471,
            "endLine": 1471,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TreeMap<String,IndexAbstraction> lookup=new TreeMap<>();\n",
            "startLine": 1467,
            "endLine": 1467,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<IndexMetadata> backingIndices=new ArrayList<>();\n",
            "startLine": 1472,
            "endLine": 1472,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<IndexMetadata> backingIndices=new ArrayList<>();\n",
            "startLine": 1468,
            "endLine": 1468,
            "startColumn": 9,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int numBackingIndices=randomIntBetween(1,3);\n",
            "startLine": 1473,
            "endLine": 1473,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int numBackingIndices=randomIntBetween(1,3);\n",
            "startLine": 1469,
            "endLine": 1469,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream ds=DataStreamTestHelper.newInstance(dataStreamName,backingIndices.stream().map(IndexMetadata::getIndex).collect(Collectors.toList()));\n",
            "startLine": 1477,
            "endLine": 1480,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataStream ds=DataStreamTestHelper.newInstance(dataStreamName,backingIndices.stream().map(IndexMetadata::getIndex).collect(Collectors.toList()));\n",
            "startLine": 1473,
            "endLine": 1476,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexAbstraction.DataStream iads=new IndexAbstraction.DataStream(ds);\n",
            "startLine": 1481,
            "endLine": 1481,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "IndexAbstraction.DataStream iads=new IndexAbstraction.DataStream(ds);\n",
            "startLine": 1477,
            "endLine": 1477,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lookup.put(ds.getName(),iads);\n",
            "startLine": 1482,
            "endLine": 1482,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lookup.put(ds.getName(),iads);\n",
            "startLine": 1478,
            "endLine": 1478,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SearchRequest request=new SearchRequest(\"*\");\n",
            "startLine": 1487,
            "endLine": 1487,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SearchRequest request=new SearchRequest(\"*\");\n",
            "startLine": 1483,
            "endLine": 1483,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Set<String> authorizedIndices=RBACEngine.resolveAuthorizedIndicesFromRole(role,getRequestInfo(request,SearchAction.NAME),lookup);\n",
            "startLine": 1488,
            "endLine": 1492,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuthorizedIndices authorizedIndices=RBACEngine.resolveAuthorizedIndicesFromRole(role,getRequestInfo(request,SearchAction.NAME),lookup,() -> ignore -> {\n}\n);\n",
            "startLine": 1484,
            "endLine": 1489,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItems(backingIndices.stream().map(im -> im.getIndex().getName()).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY)));\n",
            "startLine": 1496,
            "endLine": 1499,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItems(backingIndices.stream().map(im -> im.getIndex().getName()).collect(Collectors.toList()).toArray(Strings.EMPTY_ARRAY)));\n",
            "startLine": 1492,
            "endLine": 1495,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,instanceOf(RBACEngine.AuthorizedIndicesSet.class));\n",
            "startLine": 1494,
            "endLine": 1494,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.check(dataStreamName),is(true));\n",
            "startLine": 1491,
            "endLine": 1491,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItem(dataStreamName));\n",
            "startLine": 1495,
            "endLine": 1495,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItem(dataStreamName));\n",
            "startLine": 1490,
            "endLine": 1490,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,instanceOf(RBACEngine.AuthorizedIndicesSet.class));\n",
            "startLine": 1494,
            "endLine": 1494,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.all().get(),hasItem(dataStreamName));\n",
            "startLine": 1490,
            "endLine": 1490,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices,hasItem(dataStreamName));\n",
            "startLine": 1495,
            "endLine": 1495,
            "startColumn": 9,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authorizedIndices.check(index),is(true));\n",
            "startLine": 1497,
            "endLine": 1497,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "8e9a403c654649b9f6cf8094874fad80d7cd30d2",
      "url": "https://github.com/elastic/elasticsearch/commit/8e9a403c654649b9f6cf8094874fad80d7cd30d2",
      "originalMethod": {
        "container": "org.elasticsearch.action.ActionModule",
        "type": "Method",
        "name": "setupActions",
        "filePath": "server/src/main/java/org/elasticsearch/action/ActionModule.java",
        "startLine": 538,
        "endLine": 717,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.action.ActionModule",
        "type": "Method",
        "name": "setupActions",
        "filePath": "server/src/main/java/org/elasticsearch/action/ActionModule.java",
        "startLine": 540,
        "endLine": 720,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ActionRegistry actions=new ActionRegistry();\n",
            "startLine": 556,
            "endLine": 556,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ActionRegistry actions=new ActionRegistry();\n",
            "startLine": 558,
            "endLine": 558,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MainAction.INSTANCE,TransportMainAction.class);\n",
            "startLine": 558,
            "endLine": 558,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MainAction.INSTANCE,TransportMainAction.class);\n",
            "startLine": 560,
            "endLine": 560,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesInfoAction.INSTANCE,TransportNodesInfoAction.class);\n",
            "startLine": 559,
            "endLine": 559,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesInfoAction.INSTANCE,TransportNodesInfoAction.class);\n",
            "startLine": 561,
            "endLine": 561,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RemoteInfoAction.INSTANCE,TransportRemoteInfoAction.class);\n",
            "startLine": 560,
            "endLine": 560,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RemoteInfoAction.INSTANCE,TransportRemoteInfoAction.class);\n",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesStatsAction.INSTANCE,TransportNodesStatsAction.class);\n",
            "startLine": 561,
            "endLine": 561,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesStatsAction.INSTANCE,TransportNodesStatsAction.class);\n",
            "startLine": 563,
            "endLine": 563,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesUsageAction.INSTANCE,TransportNodesUsageAction.class);\n",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesUsageAction.INSTANCE,TransportNodesUsageAction.class);\n",
            "startLine": 564,
            "endLine": 564,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesHotThreadsAction.INSTANCE,TransportNodesHotThreadsAction.class);\n",
            "startLine": 563,
            "endLine": 563,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesHotThreadsAction.INSTANCE,TransportNodesHotThreadsAction.class);\n",
            "startLine": 565,
            "endLine": 565,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ListTasksAction.INSTANCE,TransportListTasksAction.class);\n",
            "startLine": 564,
            "endLine": 564,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ListTasksAction.INSTANCE,TransportListTasksAction.class);\n",
            "startLine": 566,
            "endLine": 566,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetTaskAction.INSTANCE,TransportGetTaskAction.class);\n",
            "startLine": 565,
            "endLine": 565,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetTaskAction.INSTANCE,TransportGetTaskAction.class);\n",
            "startLine": 567,
            "endLine": 567,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CancelTasksAction.INSTANCE,TransportCancelTasksAction.class);\n",
            "startLine": 566,
            "endLine": 566,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CancelTasksAction.INSTANCE,TransportCancelTasksAction.class);\n",
            "startLine": 568,
            "endLine": 568,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetHealthAction.INSTANCE,GetHealthAction.TransportAction.class);\n",
            "startLine": 567,
            "endLine": 567,
            "startColumn": 9,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetHealthAction.INSTANCE,GetHealthAction.TransportAction.class);\n",
            "startLine": 569,
            "endLine": 569,
            "startColumn": 9,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PrevalidateNodeRemovalAction.INSTANCE,TransportPrevalidateNodeRemovalAction.class);\n",
            "startLine": 568,
            "endLine": 568,
            "startColumn": 9,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PrevalidateNodeRemovalAction.INSTANCE,TransportPrevalidateNodeRemovalAction.class);\n",
            "startLine": 570,
            "endLine": 570,
            "startColumn": 9,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AddVotingConfigExclusionsAction.INSTANCE,TransportAddVotingConfigExclusionsAction.class);\n",
            "startLine": 570,
            "endLine": 570,
            "startColumn": 9,
            "endColumn": 116
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AddVotingConfigExclusionsAction.INSTANCE,TransportAddVotingConfigExclusionsAction.class);\n",
            "startLine": 573,
            "endLine": 573,
            "startColumn": 9,
            "endColumn": 116
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearVotingConfigExclusionsAction.INSTANCE,TransportClearVotingConfigExclusionsAction.class);\n",
            "startLine": 571,
            "endLine": 571,
            "startColumn": 9,
            "endColumn": 120
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearVotingConfigExclusionsAction.INSTANCE,TransportClearVotingConfigExclusionsAction.class);\n",
            "startLine": 574,
            "endLine": 574,
            "startColumn": 9,
            "endColumn": 120
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterAllocationExplainAction.INSTANCE,TransportClusterAllocationExplainAction.class);\n",
            "startLine": 572,
            "endLine": 572,
            "startColumn": 9,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterAllocationExplainAction.INSTANCE,TransportClusterAllocationExplainAction.class);\n",
            "startLine": 575,
            "endLine": 575,
            "startColumn": 9,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetDesiredBalanceAction.INSTANCE,TransportGetDesiredBalanceAction.class);\n",
            "startLine": 573,
            "endLine": 573,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetDesiredBalanceAction.INSTANCE,TransportGetDesiredBalanceAction.class);\n",
            "startLine": 576,
            "endLine": 576,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterStatsAction.INSTANCE,TransportClusterStatsAction.class);\n",
            "startLine": 574,
            "endLine": 574,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterStatsAction.INSTANCE,TransportClusterStatsAction.class);\n",
            "startLine": 577,
            "endLine": 577,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterStateAction.INSTANCE,TransportClusterStateAction.class);\n",
            "startLine": 575,
            "endLine": 575,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterStateAction.INSTANCE,TransportClusterStateAction.class);\n",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterHealthAction.INSTANCE,TransportClusterHealthAction.class);\n",
            "startLine": 576,
            "endLine": 576,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterHealthAction.INSTANCE,TransportClusterHealthAction.class);\n",
            "startLine": 579,
            "endLine": 579,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterUpdateSettingsAction.INSTANCE,TransportClusterUpdateSettingsAction.class);\n",
            "startLine": 577,
            "endLine": 577,
            "startColumn": 9,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterUpdateSettingsAction.INSTANCE,TransportClusterUpdateSettingsAction.class);\n",
            "startLine": 580,
            "endLine": 580,
            "startColumn": 9,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterGetSettingsAction.INSTANCE,TransportClusterGetSettingsAction.class);\n",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterGetSettingsAction.INSTANCE,TransportClusterGetSettingsAction.class);\n",
            "startLine": 581,
            "endLine": 581,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterRerouteAction.INSTANCE,TransportClusterRerouteAction.class);\n",
            "startLine": 579,
            "endLine": 579,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterRerouteAction.INSTANCE,TransportClusterRerouteAction.class);\n",
            "startLine": 582,
            "endLine": 582,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterSearchShardsAction.INSTANCE,TransportClusterSearchShardsAction.class);\n",
            "startLine": 580,
            "endLine": 580,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterSearchShardsAction.INSTANCE,TransportClusterSearchShardsAction.class);\n",
            "startLine": 583,
            "endLine": 583,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterFormationInfoAction.INSTANCE,ClusterFormationInfoAction.TransportAction.class);\n",
            "startLine": 581,
            "endLine": 581,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClusterFormationInfoAction.INSTANCE,ClusterFormationInfoAction.TransportAction.class);\n",
            "startLine": 584,
            "endLine": 584,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PendingClusterTasksAction.INSTANCE,TransportPendingClusterTasksAction.class);\n",
            "startLine": 582,
            "endLine": 582,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PendingClusterTasksAction.INSTANCE,TransportPendingClusterTasksAction.class);\n",
            "startLine": 585,
            "endLine": 585,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutRepositoryAction.INSTANCE,TransportPutRepositoryAction.class);\n",
            "startLine": 583,
            "endLine": 583,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutRepositoryAction.INSTANCE,TransportPutRepositoryAction.class);\n",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetRepositoriesAction.INSTANCE,TransportGetRepositoriesAction.class);\n",
            "startLine": 584,
            "endLine": 584,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetRepositoriesAction.INSTANCE,TransportGetRepositoriesAction.class);\n",
            "startLine": 587,
            "endLine": 587,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteRepositoryAction.INSTANCE,TransportDeleteRepositoryAction.class);\n",
            "startLine": 585,
            "endLine": 585,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteRepositoryAction.INSTANCE,TransportDeleteRepositoryAction.class);\n",
            "startLine": 588,
            "endLine": 588,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(VerifyRepositoryAction.INSTANCE,TransportVerifyRepositoryAction.class);\n",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(VerifyRepositoryAction.INSTANCE,TransportVerifyRepositoryAction.class);\n",
            "startLine": 589,
            "endLine": 589,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CleanupRepositoryAction.INSTANCE,TransportCleanupRepositoryAction.class);\n",
            "startLine": 587,
            "endLine": 587,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CleanupRepositoryAction.INSTANCE,TransportCleanupRepositoryAction.class);\n",
            "startLine": 590,
            "endLine": 590,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetSnapshotsAction.INSTANCE,TransportGetSnapshotsAction.class);\n",
            "startLine": 588,
            "endLine": 588,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetSnapshotsAction.INSTANCE,TransportGetSnapshotsAction.class);\n",
            "startLine": 591,
            "endLine": 591,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteSnapshotAction.INSTANCE,TransportDeleteSnapshotAction.class);\n",
            "startLine": 589,
            "endLine": 589,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteSnapshotAction.INSTANCE,TransportDeleteSnapshotAction.class);\n",
            "startLine": 592,
            "endLine": 592,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CreateSnapshotAction.INSTANCE,TransportCreateSnapshotAction.class);\n",
            "startLine": 590,
            "endLine": 590,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CreateSnapshotAction.INSTANCE,TransportCreateSnapshotAction.class);\n",
            "startLine": 593,
            "endLine": 593,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CloneSnapshotAction.INSTANCE,TransportCloneSnapshotAction.class);\n",
            "startLine": 591,
            "endLine": 591,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CloneSnapshotAction.INSTANCE,TransportCloneSnapshotAction.class);\n",
            "startLine": 594,
            "endLine": 594,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RestoreSnapshotAction.INSTANCE,TransportRestoreSnapshotAction.class);\n",
            "startLine": 592,
            "endLine": 592,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RestoreSnapshotAction.INSTANCE,TransportRestoreSnapshotAction.class);\n",
            "startLine": 595,
            "endLine": 595,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SnapshotsStatusAction.INSTANCE,TransportSnapshotsStatusAction.class);\n",
            "startLine": 593,
            "endLine": 593,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SnapshotsStatusAction.INSTANCE,TransportSnapshotsStatusAction.class);\n",
            "startLine": 596,
            "endLine": 596,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SnapshottableFeaturesAction.INSTANCE,TransportSnapshottableFeaturesAction.class);\n",
            "startLine": 594,
            "endLine": 594,
            "startColumn": 9,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SnapshottableFeaturesAction.INSTANCE,TransportSnapshottableFeaturesAction.class);\n",
            "startLine": 597,
            "endLine": 597,
            "startColumn": 9,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResetFeatureStateAction.INSTANCE,TransportResetFeatureStateAction.class);\n",
            "startLine": 595,
            "endLine": 595,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResetFeatureStateAction.INSTANCE,TransportResetFeatureStateAction.class);\n",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetFeatureUpgradeStatusAction.INSTANCE,TransportGetFeatureUpgradeStatusAction.class);\n",
            "startLine": 596,
            "endLine": 596,
            "startColumn": 9,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetFeatureUpgradeStatusAction.INSTANCE,TransportGetFeatureUpgradeStatusAction.class);\n",
            "startLine": 599,
            "endLine": 599,
            "startColumn": 9,
            "endColumn": 112
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PostFeatureUpgradeAction.INSTANCE,TransportPostFeatureUpgradeAction.class);\n",
            "startLine": 597,
            "endLine": 597,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PostFeatureUpgradeAction.INSTANCE,TransportPostFeatureUpgradeAction.class);\n",
            "startLine": 600,
            "endLine": 600,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetShardSnapshotAction.INSTANCE,TransportGetShardSnapshotAction.class);\n",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetShardSnapshotAction.INSTANCE,TransportGetShardSnapshotAction.class);\n",
            "startLine": 601,
            "endLine": 601,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesStatsAction.INSTANCE,TransportIndicesStatsAction.class);\n",
            "startLine": 600,
            "endLine": 600,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesStatsAction.INSTANCE,TransportIndicesStatsAction.class);\n",
            "startLine": 603,
            "endLine": 603,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesSegmentsAction.INSTANCE,TransportIndicesSegmentsAction.class);\n",
            "startLine": 601,
            "endLine": 601,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesSegmentsAction.INSTANCE,TransportIndicesSegmentsAction.class);\n",
            "startLine": 604,
            "endLine": 604,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesShardStoresAction.INSTANCE,TransportIndicesShardStoresAction.class);\n",
            "startLine": 602,
            "endLine": 602,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesShardStoresAction.INSTANCE,TransportIndicesShardStoresAction.class);\n",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CreateIndexAction.INSTANCE,TransportCreateIndexAction.class);\n",
            "startLine": 603,
            "endLine": 603,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CreateIndexAction.INSTANCE,TransportCreateIndexAction.class);\n",
            "startLine": 606,
            "endLine": 606,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResizeAction.INSTANCE,TransportResizeAction.class);\n",
            "startLine": 604,
            "endLine": 604,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResizeAction.INSTANCE,TransportResizeAction.class);\n",
            "startLine": 607,
            "endLine": 607,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RolloverAction.INSTANCE,TransportRolloverAction.class);\n",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RolloverAction.INSTANCE,TransportRolloverAction.class);\n",
            "startLine": 608,
            "endLine": 608,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteIndexAction.INSTANCE,TransportDeleteIndexAction.class);\n",
            "startLine": 606,
            "endLine": 606,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteIndexAction.INSTANCE,TransportDeleteIndexAction.class);\n",
            "startLine": 609,
            "endLine": 609,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetIndexAction.INSTANCE,TransportGetIndexAction.class);\n",
            "startLine": 607,
            "endLine": 607,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetIndexAction.INSTANCE,TransportGetIndexAction.class);\n",
            "startLine": 610,
            "endLine": 610,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(OpenIndexAction.INSTANCE,TransportOpenIndexAction.class);\n",
            "startLine": 608,
            "endLine": 608,
            "startColumn": 9,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(OpenIndexAction.INSTANCE,TransportOpenIndexAction.class);\n",
            "startLine": 611,
            "endLine": 611,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CloseIndexAction.INSTANCE,TransportCloseIndexAction.class);\n",
            "startLine": 609,
            "endLine": 609,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CloseIndexAction.INSTANCE,TransportCloseIndexAction.class);\n",
            "startLine": 612,
            "endLine": 612,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AddIndexBlockAction.INSTANCE,TransportAddIndexBlockAction.class);\n",
            "startLine": 610,
            "endLine": 610,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AddIndexBlockAction.INSTANCE,TransportAddIndexBlockAction.class);\n",
            "startLine": 613,
            "endLine": 613,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetMappingsAction.INSTANCE,TransportGetMappingsAction.class);\n",
            "startLine": 611,
            "endLine": 611,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetMappingsAction.INSTANCE,TransportGetMappingsAction.class);\n",
            "startLine": 614,
            "endLine": 614,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetFieldMappingsAction.INSTANCE,TransportGetFieldMappingsAction.class);\n",
            "startLine": 612,
            "endLine": 612,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetFieldMappingsAction.INSTANCE,TransportGetFieldMappingsAction.class);\n",
            "startLine": 615,
            "endLine": 615,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportGetFieldMappingsIndexAction.TYPE,TransportGetFieldMappingsIndexAction.class);\n",
            "startLine": 613,
            "endLine": 613,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportGetFieldMappingsIndexAction.TYPE,TransportGetFieldMappingsIndexAction.class);\n",
            "startLine": 616,
            "endLine": 616,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutMappingAction.INSTANCE,TransportPutMappingAction.class);\n",
            "startLine": 614,
            "endLine": 614,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutMappingAction.INSTANCE,TransportPutMappingAction.class);\n",
            "startLine": 617,
            "endLine": 617,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AutoPutMappingAction.INSTANCE,TransportAutoPutMappingAction.class);\n",
            "startLine": 615,
            "endLine": 615,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AutoPutMappingAction.INSTANCE,TransportAutoPutMappingAction.class);\n",
            "startLine": 618,
            "endLine": 618,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesAliasesAction.INSTANCE,TransportIndicesAliasesAction.class);\n",
            "startLine": 616,
            "endLine": 616,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndicesAliasesAction.INSTANCE,TransportIndicesAliasesAction.class);\n",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateSettingsAction.INSTANCE,TransportUpdateSettingsAction.class);\n",
            "startLine": 617,
            "endLine": 617,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateSettingsAction.INSTANCE,TransportUpdateSettingsAction.class);\n",
            "startLine": 620,
            "endLine": 620,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AnalyzeAction.INSTANCE,TransportAnalyzeAction.class);\n",
            "startLine": 618,
            "endLine": 618,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AnalyzeAction.INSTANCE,TransportAnalyzeAction.class);\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutIndexTemplateAction.INSTANCE,TransportPutIndexTemplateAction.class);\n",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutIndexTemplateAction.INSTANCE,TransportPutIndexTemplateAction.class);\n",
            "startLine": 622,
            "endLine": 622,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetIndexTemplatesAction.INSTANCE,TransportGetIndexTemplatesAction.class);\n",
            "startLine": 620,
            "endLine": 620,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetIndexTemplatesAction.INSTANCE,TransportGetIndexTemplatesAction.class);\n",
            "startLine": 623,
            "endLine": 623,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteIndexTemplateAction.INSTANCE,TransportDeleteIndexTemplateAction.class);\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteIndexTemplateAction.INSTANCE,TransportDeleteIndexTemplateAction.class);\n",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutComponentTemplateAction.INSTANCE,TransportPutComponentTemplateAction.class);\n",
            "startLine": 622,
            "endLine": 622,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutComponentTemplateAction.INSTANCE,TransportPutComponentTemplateAction.class);\n",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 9,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetComponentTemplateAction.INSTANCE,TransportGetComponentTemplateAction.class);\n",
            "startLine": 623,
            "endLine": 623,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetComponentTemplateAction.INSTANCE,TransportGetComponentTemplateAction.class);\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 9,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteComponentTemplateAction.INSTANCE,TransportDeleteComponentTemplateAction.class);\n",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 9,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteComponentTemplateAction.INSTANCE,TransportDeleteComponentTemplateAction.class);\n",
            "startLine": 627,
            "endLine": 627,
            "startColumn": 9,
            "endColumn": 112
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutComposableIndexTemplateAction.INSTANCE,TransportPutComposableIndexTemplateAction.class);\n",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 9,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutComposableIndexTemplateAction.INSTANCE,TransportPutComposableIndexTemplateAction.class);\n",
            "startLine": 628,
            "endLine": 628,
            "startColumn": 9,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetComposableIndexTemplateAction.INSTANCE,TransportGetComposableIndexTemplateAction.class);\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 9,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetComposableIndexTemplateAction.INSTANCE,TransportGetComposableIndexTemplateAction.class);\n",
            "startLine": 629,
            "endLine": 629,
            "startColumn": 9,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteComposableIndexTemplateAction.INSTANCE,TransportDeleteComposableIndexTemplateAction.class);\n",
            "startLine": 627,
            "endLine": 627,
            "startColumn": 9,
            "endColumn": 124
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteComposableIndexTemplateAction.INSTANCE,TransportDeleteComposableIndexTemplateAction.class);\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 9,
            "endColumn": 124
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulateIndexTemplateAction.INSTANCE,TransportSimulateIndexTemplateAction.class);\n",
            "startLine": 628,
            "endLine": 628,
            "startColumn": 9,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulateIndexTemplateAction.INSTANCE,TransportSimulateIndexTemplateAction.class);\n",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 9,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulateTemplateAction.INSTANCE,TransportSimulateTemplateAction.class);\n",
            "startLine": 629,
            "endLine": 629,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulateTemplateAction.INSTANCE,TransportSimulateTemplateAction.class);\n",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ValidateQueryAction.INSTANCE,TransportValidateQueryAction.class);\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 9,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ValidateQueryAction.INSTANCE,TransportValidateQueryAction.class);\n",
            "startLine": 633,
            "endLine": 633,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RefreshAction.INSTANCE,TransportRefreshAction.class);\n",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RefreshAction.INSTANCE,TransportRefreshAction.class);\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FlushAction.INSTANCE,TransportFlushAction.class);\n",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FlushAction.INSTANCE,TransportFlushAction.class);\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ForceMergeAction.INSTANCE,TransportForceMergeAction.class);\n",
            "startLine": 633,
            "endLine": 633,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ForceMergeAction.INSTANCE,TransportForceMergeAction.class);\n",
            "startLine": 636,
            "endLine": 636,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearIndicesCacheAction.INSTANCE,TransportClearIndicesCacheAction.class);\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearIndicesCacheAction.INSTANCE,TransportClearIndicesCacheAction.class);\n",
            "startLine": 637,
            "endLine": 637,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetAliasesAction.INSTANCE,TransportGetAliasesAction.class);\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetAliasesAction.INSTANCE,TransportGetAliasesAction.class);\n",
            "startLine": 638,
            "endLine": 638,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetSettingsAction.INSTANCE,TransportGetSettingsAction.class);\n",
            "startLine": 636,
            "endLine": 636,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetSettingsAction.INSTANCE,TransportGetSettingsAction.class);\n",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndexAction.INSTANCE,TransportIndexAction.class);\n",
            "startLine": 638,
            "endLine": 638,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(IndexAction.INSTANCE,TransportIndexAction.class);\n",
            "startLine": 641,
            "endLine": 641,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetAction.INSTANCE,TransportGetAction.class);\n",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 9,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetAction.INSTANCE,TransportGetAction.class);\n",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TermVectorsAction.INSTANCE,TransportTermVectorsAction.class);\n",
            "startLine": 640,
            "endLine": 640,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TermVectorsAction.INSTANCE,TransportTermVectorsAction.class);\n",
            "startLine": 643,
            "endLine": 643,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiTermVectorsAction.INSTANCE,TransportMultiTermVectorsAction.class);\n",
            "startLine": 641,
            "endLine": 641,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiTermVectorsAction.INSTANCE,TransportMultiTermVectorsAction.class);\n",
            "startLine": 644,
            "endLine": 644,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardMultiTermsVectorAction.TYPE,TransportShardMultiTermsVectorAction.class);\n",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardMultiTermsVectorAction.TYPE,TransportShardMultiTermsVectorAction.class);\n",
            "startLine": 645,
            "endLine": 645,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteAction.INSTANCE,TransportDeleteAction.class);\n",
            "startLine": 643,
            "endLine": 643,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteAction.INSTANCE,TransportDeleteAction.class);\n",
            "startLine": 646,
            "endLine": 646,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateAction.INSTANCE,TransportUpdateAction.class);\n",
            "startLine": 644,
            "endLine": 644,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateAction.INSTANCE,TransportUpdateAction.class);\n",
            "startLine": 647,
            "endLine": 647,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiGetAction.INSTANCE,TransportMultiGetAction.class);\n",
            "startLine": 645,
            "endLine": 645,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiGetAction.INSTANCE,TransportMultiGetAction.class);\n",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardMultiGetAction.TYPE,TransportShardMultiGetAction.class);\n",
            "startLine": 646,
            "endLine": 646,
            "startColumn": 9,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardMultiGetAction.TYPE,TransportShardMultiGetAction.class);\n",
            "startLine": 649,
            "endLine": 649,
            "startColumn": 9,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(BulkAction.INSTANCE,TransportBulkAction.class);\n",
            "startLine": 647,
            "endLine": 647,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(BulkAction.INSTANCE,TransportBulkAction.class);\n",
            "startLine": 650,
            "endLine": 650,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardBulkAction.TYPE,TransportShardBulkAction.class);\n",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 9,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardBulkAction.TYPE,TransportShardBulkAction.class);\n",
            "startLine": 651,
            "endLine": 651,
            "startColumn": 9,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SearchAction.INSTANCE,TransportSearchAction.class);\n",
            "startLine": 649,
            "endLine": 649,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SearchAction.INSTANCE,TransportSearchAction.class);\n",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SearchScrollAction.INSTANCE,TransportSearchScrollAction.class);\n",
            "startLine": 650,
            "endLine": 650,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SearchScrollAction.INSTANCE,TransportSearchScrollAction.class);\n",
            "startLine": 653,
            "endLine": 653,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(OpenPointInTimeAction.INSTANCE,TransportOpenPointInTimeAction.class);\n",
            "startLine": 651,
            "endLine": 651,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(OpenPointInTimeAction.INSTANCE,TransportOpenPointInTimeAction.class);\n",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClosePointInTimeAction.INSTANCE,TransportClosePointInTimeAction.class);\n",
            "startLine": 652,
            "endLine": 652,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClosePointInTimeAction.INSTANCE,TransportClosePointInTimeAction.class);\n",
            "startLine": 655,
            "endLine": 655,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiSearchAction.INSTANCE,TransportMultiSearchAction.class);\n",
            "startLine": 653,
            "endLine": 653,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MultiSearchAction.INSTANCE,TransportMultiSearchAction.class);\n",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ExplainAction.INSTANCE,TransportExplainAction.class);\n",
            "startLine": 654,
            "endLine": 654,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ExplainAction.INSTANCE,TransportExplainAction.class);\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearScrollAction.INSTANCE,TransportClearScrollAction.class);\n",
            "startLine": 655,
            "endLine": 655,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ClearScrollAction.INSTANCE,TransportClearScrollAction.class);\n",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RecoveryAction.INSTANCE,TransportRecoveryAction.class);\n",
            "startLine": 656,
            "endLine": 656,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RecoveryAction.INSTANCE,TransportRecoveryAction.class);\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesReloadSecureSettingsAction.INSTANCE,TransportNodesReloadSecureSettingsAction.class);\n",
            "startLine": 657,
            "endLine": 657,
            "startColumn": 9,
            "endColumn": 116
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(NodesReloadSecureSettingsAction.INSTANCE,TransportNodesReloadSecureSettingsAction.class);\n",
            "startLine": 660,
            "endLine": 660,
            "startColumn": 9,
            "endColumn": 116
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AutoCreateAction.INSTANCE,AutoCreateAction.TransportAction.class);\n",
            "startLine": 658,
            "endLine": 658,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AutoCreateAction.INSTANCE,AutoCreateAction.TransportAction.class);\n",
            "startLine": 661,
            "endLine": 661,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResolveIndexAction.INSTANCE,ResolveIndexAction.TransportAction.class);\n",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 9,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ResolveIndexAction.INSTANCE,ResolveIndexAction.TransportAction.class);\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 9,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AnalyzeIndexDiskUsageAction.INSTANCE,TransportAnalyzeIndexDiskUsageAction.class);\n",
            "startLine": 660,
            "endLine": 660,
            "startColumn": 9,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(AnalyzeIndexDiskUsageAction.INSTANCE,TransportAnalyzeIndexDiskUsageAction.class);\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 9,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FieldUsageStatsAction.INSTANCE,TransportFieldUsageAction.class);\n",
            "startLine": 661,
            "endLine": 661,
            "startColumn": 9,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FieldUsageStatsAction.INSTANCE,TransportFieldUsageAction.class);\n",
            "startLine": 664,
            "endLine": 664,
            "startColumn": 9,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MasterHistoryAction.INSTANCE,MasterHistoryAction.TransportAction.class);\n",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 9,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(MasterHistoryAction.INSTANCE,MasterHistoryAction.TransportAction.class);\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 9,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CoordinationDiagnosticsAction.INSTANCE,CoordinationDiagnosticsAction.TransportAction.class);\n",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 9,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CoordinationDiagnosticsAction.INSTANCE,CoordinationDiagnosticsAction.TransportAction.class);\n",
            "startLine": 666,
            "endLine": 666,
            "startColumn": 9,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutStoredScriptAction.INSTANCE,TransportPutStoredScriptAction.class);\n",
            "startLine": 666,
            "endLine": 666,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutStoredScriptAction.INSTANCE,TransportPutStoredScriptAction.class);\n",
            "startLine": 669,
            "endLine": 669,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetStoredScriptAction.INSTANCE,TransportGetStoredScriptAction.class);\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetStoredScriptAction.INSTANCE,TransportGetStoredScriptAction.class);\n",
            "startLine": 670,
            "endLine": 670,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteStoredScriptAction.INSTANCE,TransportDeleteStoredScriptAction.class);\n",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteStoredScriptAction.INSTANCE,TransportDeleteStoredScriptAction.class);\n",
            "startLine": 671,
            "endLine": 671,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetScriptContextAction.INSTANCE,TransportGetScriptContextAction.class);\n",
            "startLine": 669,
            "endLine": 669,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetScriptContextAction.INSTANCE,TransportGetScriptContextAction.class);\n",
            "startLine": 672,
            "endLine": 672,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetScriptLanguageAction.INSTANCE,TransportGetScriptLanguageAction.class);\n",
            "startLine": 670,
            "endLine": 670,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetScriptLanguageAction.INSTANCE,TransportGetScriptLanguageAction.class);\n",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FieldCapabilitiesAction.INSTANCE,TransportFieldCapabilitiesAction.class);\n",
            "startLine": 672,
            "endLine": 672,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FieldCapabilitiesAction.INSTANCE,TransportFieldCapabilitiesAction.class);\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutPipelineAction.INSTANCE,PutPipelineTransportAction.class);\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(PutPipelineAction.INSTANCE,PutPipelineTransportAction.class);\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetPipelineAction.INSTANCE,GetPipelineTransportAction.class);\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetPipelineAction.INSTANCE,GetPipelineTransportAction.class);\n",
            "startLine": 678,
            "endLine": 678,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeletePipelineAction.INSTANCE,DeletePipelineTransportAction.class);\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeletePipelineAction.INSTANCE,DeletePipelineTransportAction.class);\n",
            "startLine": 679,
            "endLine": 679,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulatePipelineAction.INSTANCE,SimulatePipelineTransportAction.class);\n",
            "startLine": 677,
            "endLine": 677,
            "startColumn": 9,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(SimulatePipelineAction.INSTANCE,SimulatePipelineTransportAction.class);\n",
            "startLine": 680,
            "endLine": 680,
            "startColumn": 9,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actionPlugins.stream().flatMap(p -> p.getActions().stream()).forEach(actions::register);\n",
            "startLine": 679,
            "endLine": 679,
            "startColumn": 9,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actionPlugins.stream().flatMap(p -> p.getActions().stream()).forEach(actions::register);\n",
            "startLine": 682,
            "endLine": 682,
            "startColumn": 9,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(StartPersistentTaskAction.INSTANCE,StartPersistentTaskAction.TransportAction.class);\n",
            "startLine": 682,
            "endLine": 682,
            "startColumn": 9,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(StartPersistentTaskAction.INSTANCE,StartPersistentTaskAction.TransportAction.class);\n",
            "startLine": 685,
            "endLine": 685,
            "startColumn": 9,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdatePersistentTaskStatusAction.INSTANCE,UpdatePersistentTaskStatusAction.TransportAction.class);\n",
            "startLine": 683,
            "endLine": 683,
            "startColumn": 9,
            "endColumn": 125
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdatePersistentTaskStatusAction.INSTANCE,UpdatePersistentTaskStatusAction.TransportAction.class);\n",
            "startLine": 686,
            "endLine": 686,
            "startColumn": 9,
            "endColumn": 125
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CompletionPersistentTaskAction.INSTANCE,CompletionPersistentTaskAction.TransportAction.class);\n",
            "startLine": 684,
            "endLine": 684,
            "startColumn": 9,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(CompletionPersistentTaskAction.INSTANCE,CompletionPersistentTaskAction.TransportAction.class);\n",
            "startLine": 687,
            "endLine": 687,
            "startColumn": 9,
            "endColumn": 121
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RemovePersistentTaskAction.INSTANCE,RemovePersistentTaskAction.TransportAction.class);\n",
            "startLine": 685,
            "endLine": 685,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RemovePersistentTaskAction.INSTANCE,RemovePersistentTaskAction.TransportAction.class);\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Add.INSTANCE,RetentionLeaseActions.Add.TransportAction.class);\n",
            "startLine": 688,
            "endLine": 688,
            "startColumn": 9,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Add.INSTANCE,RetentionLeaseActions.Add.TransportAction.class);\n",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 9,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Renew.INSTANCE,RetentionLeaseActions.Renew.TransportAction.class);\n",
            "startLine": 689,
            "endLine": 689,
            "startColumn": 9,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Renew.INSTANCE,RetentionLeaseActions.Renew.TransportAction.class);\n",
            "startLine": 692,
            "endLine": 692,
            "startColumn": 9,
            "endColumn": 115
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Remove.INSTANCE,RetentionLeaseActions.Remove.TransportAction.class);\n",
            "startLine": 690,
            "endLine": 690,
            "startColumn": 9,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(RetentionLeaseActions.Remove.INSTANCE,RetentionLeaseActions.Remove.TransportAction.class);\n",
            "startLine": 693,
            "endLine": 693,
            "startColumn": 9,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ListDanglingIndicesAction.INSTANCE,TransportListDanglingIndicesAction.class);\n",
            "startLine": 693,
            "endLine": 693,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ListDanglingIndicesAction.INSTANCE,TransportListDanglingIndicesAction.class);\n",
            "startLine": 696,
            "endLine": 696,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ImportDanglingIndexAction.INSTANCE,TransportImportDanglingIndexAction.class);\n",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(ImportDanglingIndexAction.INSTANCE,TransportImportDanglingIndexAction.class);\n",
            "startLine": 697,
            "endLine": 697,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteDanglingIndexAction.INSTANCE,TransportDeleteDanglingIndexAction.class);\n",
            "startLine": 695,
            "endLine": 695,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteDanglingIndexAction.INSTANCE,TransportDeleteDanglingIndexAction.class);\n",
            "startLine": 698,
            "endLine": 698,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FindDanglingIndexAction.INSTANCE,TransportFindDanglingIndexAction.class);\n",
            "startLine": 696,
            "endLine": 696,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FindDanglingIndexAction.INSTANCE,TransportFindDanglingIndexAction.class);\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 9,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GlobalCheckpointSyncAction.TYPE,GlobalCheckpointSyncAction.class);\n",
            "startLine": 699,
            "endLine": 699,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GlobalCheckpointSyncAction.TYPE,GlobalCheckpointSyncAction.class);\n",
            "startLine": 702,
            "endLine": 702,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesSnapshotsStatus.TYPE,TransportNodesSnapshotsStatus.class);\n",
            "startLine": 700,
            "endLine": 700,
            "startColumn": 9,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesSnapshotsStatus.TYPE,TransportNodesSnapshotsStatus.class);\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 9,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportVerifyShardBeforeCloseAction.TYPE,TransportVerifyShardBeforeCloseAction.class);\n",
            "startLine": 701,
            "endLine": 701,
            "startColumn": 9,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportVerifyShardBeforeCloseAction.TYPE,TransportVerifyShardBeforeCloseAction.class);\n",
            "startLine": 704,
            "endLine": 704,
            "startColumn": 9,
            "endColumn": 115
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportVerifyShardIndexBlockAction.TYPE,TransportVerifyShardIndexBlockAction.class);\n",
            "startLine": 702,
            "endLine": 702,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportVerifyShardIndexBlockAction.TYPE,TransportVerifyShardIndexBlockAction.class);\n",
            "startLine": 705,
            "endLine": 705,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesListGatewayStartedShards.TYPE,TransportNodesListGatewayStartedShards.class);\n",
            "startLine": 703,
            "endLine": 703,
            "startColumn": 9,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesListGatewayStartedShards.TYPE,TransportNodesListGatewayStartedShards.class);\n",
            "startLine": 706,
            "endLine": 706,
            "startColumn": 9,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesListShardStoreMetadata.TYPE,TransportNodesListShardStoreMetadata.class);\n",
            "startLine": 704,
            "endLine": 704,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportNodesListShardStoreMetadata.TYPE,TransportNodesListShardStoreMetadata.class);\n",
            "startLine": 707,
            "endLine": 707,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardFlushAction.TYPE,TransportShardFlushAction.class);\n",
            "startLine": 705,
            "endLine": 705,
            "startColumn": 9,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardFlushAction.TYPE,TransportShardFlushAction.class);\n",
            "startLine": 708,
            "endLine": 708,
            "startColumn": 9,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardRefreshAction.TYPE,TransportShardRefreshAction.class);\n",
            "startLine": 706,
            "endLine": 706,
            "startColumn": 9,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(TransportShardRefreshAction.TYPE,TransportShardRefreshAction.class);\n",
            "startLine": 709,
            "endLine": 709,
            "startColumn": 9,
            "endColumn": 95
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetDesiredNodesAction.INSTANCE,TransportGetDesiredNodesAction.class);\n",
            "startLine": 709,
            "endLine": 709,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(GetDesiredNodesAction.INSTANCE,TransportGetDesiredNodesAction.class);\n",
            "startLine": 712,
            "endLine": 712,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateDesiredNodesAction.INSTANCE,TransportUpdateDesiredNodesAction.class);\n",
            "startLine": 710,
            "endLine": 710,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateDesiredNodesAction.INSTANCE,TransportUpdateDesiredNodesAction.class);\n",
            "startLine": 713,
            "endLine": 713,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteDesiredNodesAction.INSTANCE,TransportDeleteDesiredNodesAction.class);\n",
            "startLine": 711,
            "endLine": 711,
            "startColumn": 9,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(DeleteDesiredNodesAction.INSTANCE,TransportDeleteDesiredNodesAction.class);\n",
            "startLine": 714,
            "endLine": 714,
            "startColumn": 9,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateHealthInfoCacheAction.INSTANCE,UpdateHealthInfoCacheAction.TransportAction.class);\n",
            "startLine": 713,
            "endLine": 713,
            "startColumn": 9,
            "endColumn": 115
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(UpdateHealthInfoCacheAction.INSTANCE,UpdateHealthInfoCacheAction.TransportAction.class);\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 9,
            "endColumn": 115
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FetchHealthInfoCacheAction.INSTANCE,FetchHealthInfoCacheAction.TransportAction.class);\n",
            "startLine": 714,
            "endLine": 714,
            "startColumn": 9,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actions.register(FetchHealthInfoCacheAction.INSTANCE,FetchHealthInfoCacheAction.TransportAction.class);\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 9,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return unmodifiableMap(actions.getRegistry());\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 9,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return unmodifiableMap(actions.getRegistry());\n",
            "startLine": 719,
            "endLine": 719,
            "startColumn": 9,
            "endColumn": 55
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Type Declaration Statement",
            "expression": "class ActionRegistry extends NamedRegistry<ActionHandler<?,?>> {\n  ActionRegistry(){\n    super(\"action\");\n  }\n  public void register(  ActionHandler<?,?> handler){\n    register(handler.getAction().name(),handler);\n  }\n  public <Request extends ActionRequest,Response extends ActionResponse>void register(  ActionType<Response> action,  Class<? extends TransportAction<Request,Response>> transportAction){\n    register(new ActionHandler<>(action,transportAction));\n  }\n}\n",
            "startLine": 540,
            "endLine": 555,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Type Declaration Statement",
            "expression": "class ActionRegistry extends NamedRegistry<ActionHandler<?,?>> {\n  ActionRegistry(){\n    super(\"action\");\n  }\n  public void register(  ActionHandler<?,?> handler){\n    register(handler.getAction().name(),handler);\n  }\n  public <Request extends ActionRequest,Response extends ActionResponse>void register(  ActionType<Response> action,  Class<? extends TransportAction<Request,Response>> transportAction){\n    register(new ActionHandler<>(action,transportAction));\n  }\n}\n",
            "startLine": 542,
            "endLine": 557,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "url": "https://github.com/elastic/elasticsearch/commit/7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtAuthenticator",
        "type": "Method",
        "name": "JwtAuthenticator",
        "filePath": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtAuthenticator.java",
        "startLine": 40,
        "endLine": 60,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtAuthenticator",
        "type": "Method",
        "name": "JwtAuthenticator",
        "filePath": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtAuthenticator.java",
        "startLine": 41,
        "endLine": 54,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.realmConfig=realmConfig;\n",
            "startLine": 45,
            "endLine": 45,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.realmConfig=realmConfig;\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TimeValue allowedClockSkew=realmConfig.getSetting(JwtRealmSettings.ALLOWED_CLOCK_SKEW);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 9,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TimeValue allowedClockSkew=realmConfig.getSetting(JwtRealmSettings.ALLOWED_CLOCK_SKEW);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 9,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Clock clock=Clock.systemUTC();\n",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Clock clock=Clock.systemUTC();\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtSignatureValidator=new JwtSignatureValidator.DelegatingJwtSignatureValidator(realmConfig,sslService,reloadNotifier);\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 137
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtSignatureValidator=new JwtSignatureValidator.DelegatingJwtSignatureValidator(realmConfig,sslService,reloadNotifier);\n",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 9,
            "endColumn": 137
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtFieldValidators=List.of(JwtTypeValidator.INSTANCE,new JwtStringClaimValidator(\"iss\",List.of(realmConfig.getSetting(JwtRealmSettings.ALLOWED_ISSUER)),true),new JwtStringClaimValidator(\"aud\",realmConfig.getSetting(JwtRealmSettings.ALLOWED_AUDIENCES),false),new JwtAlgorithmValidator(realmConfig.getSetting(JwtRealmSettings.ALLOWED_SIGNATURE_ALGORITHMS)),new JwtDateClaimValidator(clock,\"iat\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,false),new JwtDateClaimValidator(clock,\"exp\",allowedClockSkew,JwtDateClaimValidator.Relationship.AFTER_NOW,false),new JwtDateClaimValidator(clock,\"nbf\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true),new JwtDateClaimValidator(clock,\"auth_time\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true));\n",
            "startLine": 48,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return List.of(JwtTypeValidator.INSTANCE,new JwtStringClaimValidator(\"iss\",List.of(realmConfig.getSetting(JwtRealmSettings.ALLOWED_ISSUER)),true),new JwtStringClaimValidator(\"aud\",realmConfig.getSetting(JwtRealmSettings.ALLOWED_AUDIENCES),false),new JwtAlgorithmValidator(realmConfig.getSetting(JwtRealmSettings.ALLOWED_SIGNATURE_ALGORITHMS)),new JwtDateClaimValidator(clock,\"iat\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,false),new JwtDateClaimValidator(clock,\"exp\",allowedClockSkew,JwtDateClaimValidator.Relationship.AFTER_NOW,false),new JwtDateClaimValidator(clock,\"nbf\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true),new JwtDateClaimValidator(clock,\"auth_time\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true));\n",
            "startLine": 125,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtFieldValidators=List.of(JwtTypeValidator.INSTANCE,new JwtStringClaimValidator(\"iss\",List.of(realmConfig.getSetting(JwtRealmSettings.ALLOWED_ISSUER)),true),new JwtStringClaimValidator(\"aud\",realmConfig.getSetting(JwtRealmSettings.ALLOWED_AUDIENCES),false),new JwtAlgorithmValidator(realmConfig.getSetting(JwtRealmSettings.ALLOWED_SIGNATURE_ALGORITHMS)),new JwtDateClaimValidator(clock,\"iat\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,false),new JwtDateClaimValidator(clock,\"exp\",allowedClockSkew,JwtDateClaimValidator.Relationship.AFTER_NOW,false),new JwtDateClaimValidator(clock,\"nbf\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true),new JwtDateClaimValidator(clock,\"auth_time\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true));\n",
            "startLine": 48,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtFieldValidators=configureFieldValidatorsForAccessToken(realmConfig);\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 13,
            "endColumn": 91
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtFieldValidators=List.of(JwtTypeValidator.INSTANCE,new JwtStringClaimValidator(\"iss\",List.of(realmConfig.getSetting(JwtRealmSettings.ALLOWED_ISSUER)),true),new JwtStringClaimValidator(\"aud\",realmConfig.getSetting(JwtRealmSettings.ALLOWED_AUDIENCES),false),new JwtAlgorithmValidator(realmConfig.getSetting(JwtRealmSettings.ALLOWED_SIGNATURE_ALGORITHMS)),new JwtDateClaimValidator(clock,\"iat\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,false),new JwtDateClaimValidator(clock,\"exp\",allowedClockSkew,JwtDateClaimValidator.Relationship.AFTER_NOW,false),new JwtDateClaimValidator(clock,\"nbf\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true),new JwtDateClaimValidator(clock,\"auth_time\",allowedClockSkew,JwtDateClaimValidator.Relationship.BEFORE_NOW,true));\n",
            "startLine": 48,
            "endLine": 57,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.jwtFieldValidators=configureFieldValidatorsForIdToken(realmConfig);\n",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 13,
            "endColumn": 87
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "url": "https://github.com/elastic/elasticsearch/commit/7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtRealm",
        "type": "Method",
        "name": "processValidatedJwt",
        "filePath": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtRealm.java",
        "startLine": 293,
        "endLine": 358,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtRealm",
        "type": "Method",
        "name": "processValidatedJwt",
        "filePath": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtRealm.java",
        "startLine": 295,
        "endLine": 352,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(Strings.hasText(principal) == false)",
            "startLine": 301,
            "endLine": 314,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(Strings.hasText(principal) == false)",
            "startLine": 303,
            "endLine": 316,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String msg=\"Realm [\" + name() + \"] no principal for token=[\"+ tokenPrincipal+ \"] parser=[\"+ claimParserPrincipal+ \"] claims=[\"+ claimsSet+ \"].\";\n",
            "startLine": 302,
            "endLine": 310,
            "startColumn": 13,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String msg=\"Realm [\" + name() + \"] no principal for token=[\"+ tokenPrincipal+ \"] parser=[\"+ claimParserPrincipal+ \"] claims=[\"+ claimsSet+ \"].\";\n",
            "startLine": 304,
            "endLine": 312,
            "startColumn": 13,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(msg);\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 13,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(msg);\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 13,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(AuthenticationResult.unsuccessful(msg,null));\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(AuthenticationResult.unsuccessful(msg,null));\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 13,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(result.isAuthenticated())",
            "startLine": 318,
            "endLine": 327,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(result.isAuthenticated())",
            "startLine": 320,
            "endLine": 329,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=result.getValue();\n",
            "startLine": 319,
            "endLine": 319,
            "startColumn": 17,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=result.getValue();\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 17,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(() -> format(\"Realm [%s] roles [%s] for principal=[%s].\",name(),join(\",\",user.roles()),principal));\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 17,
            "endColumn": 133
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logger.debug(() -> format(\"Realm [%s] roles [%s] for principal=[%s].\",name(),join(\",\",user.roles()),principal));\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 17,
            "endColumn": 133
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isCacheEnabled())",
            "startLine": 321,
            "endLine": 326,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isCacheEnabled())",
            "startLine": 323,
            "endLine": 328,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(ReleasableLock ignored=jwtCacheHelper.acquireUpdateLock())",
            "startLine": 322,
            "endLine": 325,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(ReleasableLock ignored=jwtCacheHelper.acquireUpdateLock())",
            "startLine": 324,
            "endLine": 327,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long expWallClockMillis=claimsSet.getExpirationTime().getTime() + allowedClockSkew.getMillis();\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 25,
            "endColumn": 128
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long expWallClockMillis=claimsSet.getExpirationTime().getTime() + allowedClockSkew.getMillis();\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 25,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jwtCache.put(jwtCacheKey,new ExpiringUser(result.getValue(),new Date(expWallClockMillis)));\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 25,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jwtCache.put(jwtCacheKey,new ExpiringUser(result.getValue(),new Date(expWallClockMillis)));\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 25,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(delegatedAuthorizationSupport.hasDelegation())",
            "startLine": 332,
            "endLine": 335,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(delegatedAuthorizationSupport.hasDelegation())",
            "startLine": 334,
            "endLine": 337,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "delegatedAuthorizationSupport.resolve(principal,logAndCacheListener);\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 13,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "delegatedAuthorizationSupport.resolve(principal,logAndCacheListener);\n",
            "startLine": 335,
            "endLine": 335,
            "startColumn": 13,
            "endColumn": 83
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 13,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 336,
            "endLine": 336,
            "startColumn": 13,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(result);\n",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "listener.onResponse(result);\n",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 13,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=new User(principal,rolesSet.toArray(Strings.EMPTY_ARRAY),name,mail,userData.getMetadata(),true);\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 13,
            "endColumn": 132
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final User user=new User(principal,rolesSet.toArray(Strings.EMPTY_ARRAY),name,mail,userData.getMetadata(),true);\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 13,
            "endColumn": 132
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "logAndCacheListener.onResponse(AuthenticationResult.success(user));\n",
            "startLine": 356,
            "endLine": 356,
            "startColumn": 13,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "logAndCacheListener.onResponse(AuthenticationResult.success(user));\n",
            "startLine": 350,
            "endLine": 350,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String principal=claimParserPrincipal.getClaimValue(claimsSet);\n",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 9,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String principal=claimParserPrincipal.getClaimValue(claimsSet);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 9,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ActionListener<AuthenticationResult<User>> logAndCacheListener=ActionListener.wrap(result -> {\n  if (result.isAuthenticated()) {\n    final User user=result.getValue();\n    logger.debug(() -> format(\"Realm [%s] roles [%s] for principal=[%s].\",name(),join(\",\",user.roles()),principal));\n    if (isCacheEnabled()) {\n      try (ReleasableLock ignored=jwtCacheHelper.acquireUpdateLock()){\n        final long expWallClockMillis=claimsSet.getExpirationTime().getTime() + allowedClockSkew.getMillis();\n        jwtCache.put(jwtCacheKey,new ExpiringUser(result.getValue(),new Date(expWallClockMillis)));\n      }\n     }\n  }\n  listener.onResponse(result);\n}\n,listener::onFailure);\n",
            "startLine": 317,
            "endLine": 329,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ActionListener<AuthenticationResult<User>> logAndCacheListener=ActionListener.wrap(result -> {\n  if (result.isAuthenticated()) {\n    final User user=result.getValue();\n    logger.debug(() -> format(\"Realm [%s] roles [%s] for principal=[%s].\",name(),join(\",\",user.roles()),principal));\n    if (isCacheEnabled()) {\n      try (ReleasableLock ignored=jwtCacheHelper.acquireUpdateLock()){\n        final long expWallClockMillis=claimsSet.getExpirationTime().getTime() + allowedClockSkew.getMillis();\n        jwtCache.put(jwtCacheKey,new ExpiringUser(result.getValue(),new Date(expWallClockMillis)));\n      }\n     }\n  }\n  listener.onResponse(result);\n}\n,listener::onFailure);\n",
            "startLine": 319,
            "endLine": 331,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> groups=claimParserGroups.getClaimValues(claimsSet);\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> groups=claimParserGroups.getClaimValues(claimsSet);\n",
            "startLine": 343,
            "endLine": 343,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String dn=claimParserDn.getClaimValue(claimsSet);\n",
            "startLine": 350,
            "endLine": 350,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String dn=claimParserDn.getClaimValue(claimsSet);\n",
            "startLine": 344,
            "endLine": 344,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String mail=claimParserMail.getClaimValue(claimsSet);\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 9,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String mail=claimParserMail.getClaimValue(claimsSet);\n",
            "startLine": 345,
            "endLine": 345,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=claimParserName.getClaimValue(claimsSet);\n",
            "startLine": 352,
            "endLine": 352,
            "startColumn": 9,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=claimParserName.getClaimValue(claimsSet);\n",
            "startLine": 346,
            "endLine": 346,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final UserRoleMapper.UserData userData=new UserRoleMapper.UserData(principal,dn,groups,userMetadata,config);\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 9,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final UserRoleMapper.UserData userData=new UserRoleMapper.UserData(principal,dn,groups,userMetadata,config);\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 9,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "userRoleMapper.resolveRoles(userData,ActionListener.wrap(rolesSet -> {\n  final User user=new User(principal,rolesSet.toArray(Strings.EMPTY_ARRAY),name,mail,userData.getMetadata(),true);\n  logAndCacheListener.onResponse(AuthenticationResult.success(user));\n}\n,logAndCacheListener::onFailure));\n",
            "startLine": 354,
            "endLine": 357,
            "startColumn": 9,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "userRoleMapper.resolveRoles(userData,ActionListener.wrap(rolesSet -> {\n  final User user=new User(principal,rolesSet.toArray(Strings.EMPTY_ARRAY),name,mail,userData.getMetadata(),true);\n  logAndCacheListener.onResponse(AuthenticationResult.success(user));\n}\n,logAndCacheListener::onFailure));\n",
            "startLine": 348,
            "endLine": 351,
            "startColumn": 9,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Object> userMetadata;\n",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 9,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Object> userMetadata=buildUserMetadata(claimsSet);\n",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/elastic/elasticsearch.git",
      "sha1": "7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "url": "https://github.com/elastic/elasticsearch/commit/7c7c2679edc2e10cd157b3917ceb8de53e981e86",
      "originalMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtRealmTestCase",
        "type": "Method",
        "name": "doMultipleAuthcAuthzAndVerifySuccess",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/jwt/JwtRealmTestCase.java",
        "startLine": 439,
        "endLine": 587,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.elasticsearch.xpack.security.authc.jwt.JwtRealmTestCase",
        "type": "Method",
        "name": "doMultipleAuthcAuthzAndVerifySuccess",
        "filePath": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/jwt/JwtRealmTestCase.java",
        "startLine": 442,
        "endLine": 591,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int authcRun=1; authcRun <= jwtAuthcRepeats; authcRun++)",
            "startLine": 453,
            "endLine": 585,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int authcRun=1; authcRun <= jwtAuthcRepeats; authcRun++)",
            "startLine": 456,
            "endLine": 589,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final candidateJwtRealm: jwtRealmsList)",
            "startLine": 460,
            "endLine": 467,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final candidateJwtRealm: jwtRealmsList)",
            "startLine": 463,
            "endLine": 470,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AuthenticationToken authenticationToken=candidateJwtRealm.token(requestThreadContext);\n",
            "startLine": 461,
            "endLine": 461,
            "startColumn": 17,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AuthenticationToken authenticationToken=candidateJwtRealm.token(requestThreadContext);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 17,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(authenticationToken != null)",
            "startLine": 462,
            "endLine": 466,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(authenticationToken != null)",
            "startLine": 465,
            "endLine": 469,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticationToken,isA(JwtAuthenticationToken.class));\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 21,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticationToken,isA(JwtAuthenticationToken.class));\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 21,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jwtAuthenticationToken=(JwtAuthenticationToken)authenticationToken;\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 21,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jwtAuthenticationToken=(JwtAuthenticationToken)authenticationToken;\n",
            "startLine": 467,
            "endLine": 467,
            "startColumn": 21,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 21,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 21,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenJwt.equals(jwt) == false)",
            "startLine": 473,
            "endLine": 475,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenJwt.equals(jwt) == false)",
            "startLine": 476,
            "endLine": 478,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenJwt,is(equalTo(jwt)));\n",
            "startLine": 474,
            "endLine": 474,
            "startColumn": 17,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenJwt,is(equalTo(jwt)));\n",
            "startLine": 477,
            "endLine": 477,
            "startColumn": 17,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenSecret != null)",
            "startLine": 477,
            "endLine": 482,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenSecret != null)",
            "startLine": 480,
            "endLine": 485,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenSecret.equals(sharedSecret) == false)",
            "startLine": 478,
            "endLine": 480,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(tokenSecret.equals(sharedSecret) == false)",
            "startLine": 481,
            "endLine": 483,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenSecret,is(equalTo(sharedSecret)));\n",
            "startLine": 479,
            "endLine": 479,
            "startColumn": 21,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenSecret,is(equalTo(sharedSecret)));\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 21,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenSecret,is(equalTo(sharedSecret)));\n",
            "startLine": 481,
            "endLine": 481,
            "startColumn": 17,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenSecret,is(equalTo(sharedSecret)));\n",
            "startLine": 484,
            "endLine": 484,
            "startColumn": 17,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 490,
            "endLine": 584,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 493,
            "endLine": 588,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 575,
            "endLine": 579,
            "startColumn": 35,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(t)",
            "startLine": 579,
            "endLine": 583,
            "startColumn": 35,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.forEach(t::addSuppressed);\n",
            "startLine": 576,
            "endLine": 576,
            "startColumn": 17,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.forEach(t::addSuppressed);\n",
            "startLine": 580,
            "endLine": 580,
            "startColumn": 17,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw t;\n",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 17,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw t;\n",
            "startLine": 582,
            "endLine": 582,
            "startColumn": 17,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 579,
            "endLine": 584,
            "startColumn": 23,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 583,
            "endLine": 588,
            "startColumn": 23,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"STATS: expected=[\" + jwtRealm.name() + \"]\\n\"+ String.join(\"\\n\",realmUsageStats));\n",
            "startLine": 580,
            "endLine": 580,
            "startColumn": 17,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"STATS: expected=[\" + jwtRealm.name() + \"]\\n\"+ String.join(\"\\n\",realmUsageStats));\n",
            "startLine": 584,
            "endLine": 584,
            "startColumn": 17,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(authenticatedUser != null)",
            "startLine": 581,
            "endLine": 583,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(authenticatedUser != null)",
            "startLine": 585,
            "endLine": 587,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"RESULT: expected=[\" + jwtRealm.name() + \"]\\n\"+ String.join(\"\\n\",realmAuthenticationResults));\n",
            "startLine": 582,
            "endLine": 582,
            "startColumn": 21,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"RESULT: expected=[\" + jwtRealm.name() + \"]\\n\"+ String.join(\"\\n\",realmAuthenticationResults));\n",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 21,
            "endColumn": 129
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final candidateJwtRealm: jwtRealmsList)",
            "startLine": 491,
            "endLine": 563,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final candidateJwtRealm: jwtRealmsList)",
            "startLine": 494,
            "endLine": 566,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"TRY AUTHC: expected=[\" + jwtRealm.name() + \"], candidate[\"+ candidateJwtRealm.name()+ \"].\");\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 21,
            "endColumn": 128
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"TRY AUTHC: expected=[\" + jwtRealm.name() + \"], candidate[\"+ candidateJwtRealm.name()+ \"].\");\n",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 21,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<AuthenticationResult<User>> authenticateFuture=PlainActionFuture.newFuture();\n",
            "startLine": 493,
            "endLine": 493,
            "startColumn": 21,
            "endColumn": 124
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<AuthenticationResult<User>> authenticateFuture=PlainActionFuture.newFuture();\n",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 21,
            "endColumn": 124
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 494,
            "endLine": 562,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 497,
            "endLine": 565,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "candidateJwtRealm.authenticate(jwtAuthenticationToken,authenticateFuture);\n",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 25,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "candidateJwtRealm.authenticate(jwtAuthenticationToken,authenticateFuture);\n",
            "startLine": 498,
            "endLine": 498,
            "startColumn": 25,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AuthenticationResult<User> authenticationResult=authenticateFuture.actionGet();\n",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 25,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final AuthenticationResult<User> authenticationResult=authenticateFuture.actionGet();\n",
            "startLine": 499,
            "endLine": 499,
            "startColumn": 25,
            "endColumn": 112
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"Authentication result with realm [{}]: [{}]\",candidateJwtRealm.name(),authenticationResult);\n",
            "startLine": 497,
            "endLine": 497,
            "startColumn": 25,
            "endColumn": 132
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"Authentication result with realm [{}]: [{}]\",candidateJwtRealm.name(),authenticationResult);\n",
            "startLine": 500,
            "endLine": 500,
            "startColumn": 25,
            "endColumn": 132
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Exception authenticationResultException=authenticationResult.getException();\n",
            "startLine": 498,
            "endLine": 498,
            "startColumn": 25,
            "endColumn": 109
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Exception authenticationResultException=authenticationResult.getException();\n",
            "startLine": 501,
            "endLine": 501,
            "startColumn": 25,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String realmResult=\"  realms=[\" + jwtRealmsList.size() + \"], expected=[\"+ jwtRealm.name()+ \",\"+ jwtRealm.order()+ \"], current[\"+ candidateJwtRealm.name()+ \",\"+ candidateJwtRealm.order()+ \"], status=[\"+ authenticationResult.getStatus()+ \"], authenticated=[\"+ authenticationResult.isAuthenticated()+ \"], msg=[\"+ authenticationResult.getMessage()+ \"], meta=[\"+ authenticationResult.getMetadata()+ \"], user=[\"+ authenticationResult.getValue()+ \"].\";\n",
            "startLine": 499,
            "endLine": 519,
            "startColumn": 25,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String realmResult=\"  realms=[\" + jwtRealmsList.size() + \"], expected=[\"+ jwtRealm.name()+ \",\"+ jwtRealm.order()+ \"], current[\"+ candidateJwtRealm.name()+ \",\"+ candidateJwtRealm.order()+ \"], status=[\"+ authenticationResult.getStatus()+ \"], authenticated=[\"+ authenticationResult.isAuthenticated()+ \"], msg=[\"+ authenticationResult.getMessage()+ \"], meta=[\"+ authenticationResult.getMetadata()+ \"], user=[\"+ authenticationResult.getValue()+ \"].\";\n",
            "startLine": 502,
            "endLine": 522,
            "startColumn": 25,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "realmAuthenticationResults.add(realmResult);\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 25,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "realmAuthenticationResults.add(realmResult);\n",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 25,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.add(new Exception(realmResult,authenticationResultException));\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 25,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.add(new Exception(realmResult,authenticationResultException));\n",
            "startLine": 524,
            "endLine": 524,
            "startColumn": 25,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(authenticationResult.getStatus())",
            "startLine": 522,
            "endLine": 543,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(authenticationResult.getStatus())",
            "startLine": 525,
            "endLine": 546,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case SUCCESS:",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 29,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case SUCCESS:",
            "startLine": 526,
            "endLine": 526,
            "startColumn": 29,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm SUCCESS status\",candidateJwtRealm.name(),is(equalTo(jwtRealm.name())));\n",
            "startLine": 524,
            "endLine": 524,
            "startColumn": 33,
            "endColumn": 135
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm SUCCESS status\",candidateJwtRealm.name(),is(equalTo(jwtRealm.name())));\n",
            "startLine": 527,
            "endLine": 527,
            "startColumn": 33,
            "endColumn": 135
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm authc false\",authenticationResult.isAuthenticated(),is(equalTo(true)));\n",
            "startLine": 525,
            "endLine": 525,
            "startColumn": 33,
            "endColumn": 133
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm authc false\",authenticationResult.isAuthenticated(),is(equalTo(true)));\n",
            "startLine": 528,
            "endLine": 528,
            "startColumn": 33,
            "endColumn": 133
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm exception thrown\",authenticationResult.getException(),is(nullValue()));\n",
            "startLine": 526,
            "endLine": 526,
            "startColumn": 33,
            "endColumn": 133
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm exception thrown\",authenticationResult.getException(),is(nullValue()));\n",
            "startLine": 529,
            "endLine": 529,
            "startColumn": 33,
            "endColumn": 133
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm message null\",authenticationResult.getMessage(),is(nullValue()));\n",
            "startLine": 527,
            "endLine": 527,
            "startColumn": 33,
            "endColumn": 127
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm message null\",authenticationResult.getMessage(),is(nullValue()));\n",
            "startLine": 530,
            "endLine": 530,
            "startColumn": 33,
            "endColumn": 127
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm metadata empty\",authenticationResult.getMetadata(),is(anEmptyMap()));\n",
            "startLine": 528,
            "endLine": 528,
            "startColumn": 33,
            "endColumn": 131
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm metadata empty\",authenticationResult.getMetadata(),is(anEmptyMap()));\n",
            "startLine": 531,
            "endLine": 531,
            "startColumn": 33,
            "endColumn": 131
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "authenticatedUser=authenticationResult.getValue();\n",
            "startLine": 529,
            "endLine": 529,
            "startColumn": 33,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "authenticatedUser=authenticationResult.getValue();\n",
            "startLine": 532,
            "endLine": 532,
            "startColumn": 33,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm user null\",authenticatedUser,is(notNullValue()));\n",
            "startLine": 530,
            "endLine": 530,
            "startColumn": 33,
            "endColumn": 111
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm user null\",authenticatedUser,is(notNullValue()));\n",
            "startLine": 533,
            "endLine": 533,
            "startColumn": 33,
            "endColumn": 111
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 531,
            "endLine": 531,
            "startColumn": 33,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 534,
            "endLine": 534,
            "startColumn": 33,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case CONTINUE:",
            "startLine": 532,
            "endLine": 532,
            "startColumn": 29,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case CONTINUE:",
            "startLine": 535,
            "endLine": 535,
            "startColumn": 29,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm CONTINUE status\",candidateJwtRealm.name(),is(not(equalTo(jwtRealm.name()))));\n",
            "startLine": 533,
            "endLine": 533,
            "startColumn": 33,
            "endColumn": 139
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm CONTINUE status\",candidateJwtRealm.name(),is(not(equalTo(jwtRealm.name()))));\n",
            "startLine": 536,
            "endLine": 536,
            "startColumn": 33,
            "endColumn": 139
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm authc success\",authenticationResult.isAuthenticated(),is(equalTo(false)));\n",
            "startLine": 534,
            "endLine": 534,
            "startColumn": 33,
            "endColumn": 138
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm authc success\",authenticationResult.isAuthenticated(),is(equalTo(false)));\n",
            "startLine": 537,
            "endLine": 537,
            "startColumn": 33,
            "endColumn": 138
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 535,
            "endLine": 535,
            "startColumn": 33,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Continue Statement",
            "expression": "continue;\n",
            "startLine": 538,
            "endLine": 538,
            "startColumn": 33,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case TERMINATE:",
            "startLine": 536,
            "endLine": 536,
            "startColumn": 29,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case TERMINATE:",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 29,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm TERMINATE status\",candidateJwtRealm.name(),is(not(equalTo(jwtRealm.name()))));\n",
            "startLine": 537,
            "endLine": 537,
            "startColumn": 33,
            "endColumn": 140
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm TERMINATE status\",candidateJwtRealm.name(),is(not(equalTo(jwtRealm.name()))));\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 33,
            "endColumn": 140
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm authc success\",authenticationResult.isAuthenticated(),is(equalTo(false)));\n",
            "startLine": 538,
            "endLine": 538,
            "startColumn": 33,
            "endColumn": 138
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Unexpected realm authc success\",authenticationResult.isAuthenticated(),is(equalTo(false)));\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 33,
            "endColumn": 138
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 33,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 33,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 29,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "default:",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 29,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected AuthenticationResult.Status=[\" + authenticationResult.getStatus() + \"]\");\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 33,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(\"Unexpected AuthenticationResult.Status=[\" + authenticationResult.getStatus() + \"]\");\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 33,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 33,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 545,
            "endLine": 545,
            "startColumn": 33,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 25,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 547,
            "endLine": 547,
            "startColumn": 25,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 545,
            "endLine": 548,
            "startColumn": 43,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 548,
            "endLine": 551,
            "startColumn": 43,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.add(e);\n",
            "startLine": 546,
            "endLine": 546,
            "startColumn": 25,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "realmFailureExceptions.add(e);\n",
            "startLine": 549,
            "endLine": 549,
            "startColumn": 25,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 547,
            "endLine": 547,
            "startColumn": 25,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 550,
            "endLine": 550,
            "startColumn": 25,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 548,
            "endLine": 562,
            "startColumn": 31,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 551,
            "endLine": 565,
            "startColumn": 31,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Map<String,Object>> usageStatsFuture=PlainActionFuture.newFuture();\n",
            "startLine": 549,
            "endLine": 549,
            "startColumn": 25,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PlainActionFuture<Map<String,Object>> usageStatsFuture=PlainActionFuture.newFuture();\n",
            "startLine": 552,
            "endLine": 552,
            "startColumn": 25,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "candidateJwtRealm.usageStats(usageStatsFuture);\n",
            "startLine": 550,
            "endLine": 550,
            "startColumn": 25,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "candidateJwtRealm.usageStats(usageStatsFuture);\n",
            "startLine": 553,
            "endLine": 553,
            "startColumn": 25,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "realmUsageStats.add(\"   realm[\" + candidateJwtRealm.name() + \",\"+ candidateJwtRealm.order()+ \"/\"+ jwtRealmsList.size()+ \"], stats=[\"+ usageStatsFuture.actionGet()+ \"]\");\n",
            "startLine": 551,
            "endLine": 561,
            "startColumn": 25,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "realmUsageStats.add(\"   realm[\" + candidateJwtRealm.name() + \",\"+ candidateJwtRealm.order()+ \"/\"+ jwtRealmsList.size()+ \"], stats=[\"+ usageStatsFuture.actionGet()+ \"]\");\n",
            "startLine": 554,
            "endLine": 564,
            "startColumn": 25,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(jwtRealm.delegatedAuthorizationSupport.hasDelegation())",
            "startLine": 568,
            "endLine": 574,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(jwtRealm.delegatedAuthorizationSupport.hasDelegation())",
            "startLine": 571,
            "endLine": 578,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 568,
            "endLine": 570,
            "startColumn": 77,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 571,
            "endLine": 573,
            "startColumn": 77,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(user.metadata(),is(equalTo(authenticatedUser.metadata())));\n",
            "startLine": 569,
            "endLine": 569,
            "startColumn": 21,
            "endColumn": 92
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(user.metadata(),is(equalTo(authenticatedUser.metadata())));\n",
            "startLine": 572,
            "endLine": 572,
            "startColumn": 21,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(JwtRealmInspector.shouldPopulateUserMetadata(jwtRealm))",
            "startLine": 570,
            "endLine": 574,
            "startColumn": 24,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(JwtRealmInspector.shouldPopulateUserMetadata(jwtRealm))",
            "startLine": 573,
            "endLine": 578,
            "startColumn": 24,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(jwtAuthcRange.min(),is(greaterThanOrEqualTo(1)));\n",
            "startLine": 446,
            "endLine": 446,
            "startColumn": 9,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(jwtAuthcRange.min(),is(greaterThanOrEqualTo(1)));\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<JwtRealm> jwtRealmsList=this.jwtIssuerAndRealms.stream().map(p -> p.realm).toList();\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 9,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<JwtRealm> jwtRealmsList=this.jwtIssuerAndRealms.stream().map(p -> p.realm).toList();\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 9,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int jwtAuthcRepeats=randomIntBetween(jwtAuthcRange.min(),jwtAuthcRange.max());\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 9,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int jwtAuthcRepeats=randomIntBetween(jwtAuthcRange.min(),jwtAuthcRange.max());\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 9,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadContext requestThreadContext=super.createThreadContext(jwt,sharedSecret);\n",
            "startLine": 455,
            "endLine": 455,
            "startColumn": 13,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ThreadContext requestThreadContext=super.createThreadContext(jwt,sharedSecret);\n",
            "startLine": 458,
            "endLine": 458,
            "startColumn": 13,
            "endColumn": 101
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"REQ[\" + authcRun + \"/\"+ jwtAuthcRepeats+ \"] HEADERS=\"+ requestThreadContext.getHeaders());\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 13,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"REQ[\" + authcRun + \"/\"+ jwtAuthcRepeats+ \"] HEADERS=\"+ requestThreadContext.getHeaders());\n",
            "startLine": 459,
            "endLine": 459,
            "startColumn": 13,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JwtAuthenticationToken jwtAuthenticationToken=null;\n",
            "startLine": 459,
            "endLine": 459,
            "startColumn": 13,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "JwtAuthenticationToken jwtAuthenticationToken=null;\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 13,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(jwtAuthenticationToken,is(notNullValue()));\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(jwtAuthenticationToken,is(notNullValue()));\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String tokenPrincipal=jwtAuthenticationToken.principal();\n",
            "startLine": 469,
            "endLine": 469,
            "startColumn": 13,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String tokenPrincipal=jwtAuthenticationToken.principal();\n",
            "startLine": 472,
            "endLine": 472,
            "startColumn": 13,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SecureString tokenJwt=jwtAuthenticationToken.getEndUserSignedJwt();\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 13,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SecureString tokenJwt=jwtAuthenticationToken.getEndUserSignedJwt();\n",
            "startLine": 473,
            "endLine": 473,
            "startColumn": 13,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SecureString tokenSecret=jwtAuthenticationToken.getClientAuthenticationSharedSecret();\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 13,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final SecureString tokenSecret=jwtAuthenticationToken.getClientAuthenticationSharedSecret();\n",
            "startLine": 474,
            "endLine": 474,
            "startColumn": 13,
            "endColumn": 107
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenPrincipal,is(notNullValue()));\n",
            "startLine": 472,
            "endLine": 472,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenPrincipal,is(notNullValue()));\n",
            "startLine": 475,
            "endLine": 475,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenJwt,is(equalTo(jwt)));\n",
            "startLine": 476,
            "endLine": 476,
            "startColumn": 13,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(tokenJwt,is(equalTo(jwt)));\n",
            "startLine": 479,
            "endLine": 479,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"GOT TOKEN: principal=[\" + tokenPrincipal + \"], jwt=[\"+ tokenJwt+ \"], secret=[\"+ tokenSecret+ \"].\");\n",
            "startLine": 483,
            "endLine": 483,
            "startColumn": 13,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"GOT TOKEN: principal=[\" + tokenPrincipal + \"], jwt=[\"+ tokenJwt+ \"], secret=[\"+ tokenSecret+ \"].\");\n",
            "startLine": 486,
            "endLine": 486,
            "startColumn": 13,
            "endColumn": 129
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "User authenticatedUser=null;\n",
            "startLine": 486,
            "endLine": 486,
            "startColumn": 13,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "User authenticatedUser=null;\n",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> realmAuthenticationResults=new ArrayList<>();\n",
            "startLine": 487,
            "endLine": 487,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> realmAuthenticationResults=new ArrayList<>();\n",
            "startLine": 490,
            "endLine": 490,
            "startColumn": 13,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> realmUsageStats=new ArrayList<>();\n",
            "startLine": 488,
            "endLine": 488,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<String> realmUsageStats=new ArrayList<>();\n",
            "startLine": 491,
            "endLine": 491,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Exception> realmFailureExceptions=new ArrayList<>(jwtRealmsList.size());\n",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 13,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Exception> realmFailureExceptions=new ArrayList<>(jwtRealmsList.size());\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 13,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm \" + jwtRealm.name() + \" to authenticate.\",authenticatedUser,is(notNullValue()));\n",
            "startLine": 565,
            "endLine": 565,
            "startColumn": 17,
            "endColumn": 126
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(\"Expected realm \" + jwtRealm.name() + \" to authenticate.\",authenticatedUser,is(notNullValue()));\n",
            "startLine": 568,
            "endLine": 568,
            "startColumn": 17,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(user.principal(),equalTo(authenticatedUser.principal()));\n",
            "startLine": 566,
            "endLine": 566,
            "startColumn": 17,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(user.principal(),equalTo(authenticatedUser.principal()));\n",
            "startLine": 569,
            "endLine": 569,
            "startColumn": 17,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(new TreeSet<>(Arrays.asList(user.roles())),equalTo(new TreeSet<>(Arrays.asList(authenticatedUser.roles()))));\n",
            "startLine": 567,
            "endLine": 567,
            "startColumn": 17,
            "endColumn": 138
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(new TreeSet<>(Arrays.asList(user.roles())),equalTo(new TreeSet<>(Arrays.asList(authenticatedUser.roles()))));\n",
            "startLine": 570,
            "endLine": 570,
            "startColumn": 17,
            "endColumn": 138
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"Test succeeded\");\n",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 9,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOGGER.info(\"Test succeeded\");\n",
            "startLine": 590,
            "endLine": 590,
            "startColumn": 9,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 572,
            "endLine": 574,
            "startColumn": 24,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 576,
            "endLine": 578,
            "startColumn": 24,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),is(anEmptyMap()));\n",
            "startLine": 573,
            "endLine": 573,
            "startColumn": 21,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),equalTo(Map.of(\"jwt_token_type\",\"id_token\")));\n",
            "startLine": 577,
            "endLine": 577,
            "startColumn": 21,
            "endColumn": 109
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),is(not(anEmptyMap())));\n",
            "startLine": 571,
            "endLine": 571,
            "startColumn": 21,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),hasKey(startsWith(\"jwt_claim_\")));\n",
            "startLine": 575,
            "endLine": 575,
            "startColumn": 21,
            "endColumn": 96
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),is(anEmptyMap()));\n",
            "startLine": 573,
            "endLine": 573,
            "startColumn": 21,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(authenticatedUser.metadata(),hasEntry(\"jwt_token_type\",\"id_token\"));\n",
            "startLine": 574,
            "endLine": 574,
            "startColumn": 21,
            "endColumn": 102
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 570,
            "endLine": 572,
            "startColumn": 84,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 573,
            "endLine": 576,
            "startColumn": 84,
            "endColumn": 18
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}