{
  "results": [
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "6aa8ce326340f7964fefdbd76658b066fca75487",
      "url": "https://github.com/javaparser/javaparser/commit/6aa8ce326340f7964fefdbd76658b066fca75487",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 461,
        "endLine": 524,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 458,
        "endLine": 522,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!refMethod.isSolved())",
            "startLine": 467,
            "endLine": 469,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!refMethod.isSolved())",
            "startLine": 465,
            "endLine": 467,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 475,
            "endLine": 502,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 473,
            "endLine": 500,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(callExpr.hasScope())",
            "startLine": 476,
            "endLine": 499,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(callExpr.hasScope())",
            "startLine": 474,
            "endLine": 497,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression scope=callExpr.getScope().get();\n",
            "startLine": 477,
            "endLine": 477,
            "startColumn": 21,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Expression scope=callExpr.getScope().get();\n",
            "startLine": 475,
            "endLine": 475,
            "startColumn": 21,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean staticCall=false;\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 21,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean staticCall=false;\n",
            "startLine": 478,
            "endLine": 478,
            "startColumn": 21,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(scope instanceof NameExpr)",
            "startLine": 481,
            "endLine": 491,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(scope instanceof NameExpr)",
            "startLine": 479,
            "endLine": 489,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "NameExpr nameExpr=(NameExpr)scope;\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 25,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "NameExpr nameExpr=(NameExpr)scope;\n",
            "startLine": 480,
            "endLine": 480,
            "startColumn": 25,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 483,
            "endLine": 490,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 481,
            "endLine": 488,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedTypeDeclaration> type=JavaParserFactory.getContext(nameExpr,typeSolver).solveType(nameExpr.getName().getId());\n",
            "startLine": 484,
            "endLine": 484,
            "startColumn": 29,
            "endColumn": 166
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedTypeDeclaration> type=JavaParserFactory.getContext(nameExpr,typeSolver).solveType(nameExpr.getName().getId());\n",
            "startLine": 482,
            "endLine": 482,
            "startColumn": 29,
            "endColumn": 166
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isSolved())",
            "startLine": 485,
            "endLine": 487,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isSolved())",
            "startLine": 483,
            "endLine": 485,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "staticCall=true;\n",
            "startLine": 486,
            "endLine": 486,
            "startColumn": 33,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "staticCall=true;\n",
            "startLine": 484,
            "endLine": 484,
            "startColumn": 33,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 488,
            "endLine": 490,
            "startColumn": 47,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 486,
            "endLine": 488,
            "startColumn": 47,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!staticCall)",
            "startLine": 493,
            "endLine": 498,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!staticCall)",
            "startLine": 491,
            "endLine": 496,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType scopeType=facade.getType(scope);\n",
            "startLine": 494,
            "endLine": 494,
            "startColumn": 25,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType scopeType=facade.getType(scope);\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 25,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(scopeType.isReferenceType())",
            "startLine": 495,
            "endLine": 497,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(scopeType.isReferenceType())",
            "startLine": 493,
            "endLine": 495,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=scopeType.asReferenceType().useThisTypeParametersOnTheGivenType(result);\n",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 29,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=scopeType.asReferenceType().useThisTypeParametersOnTheGivenType(result);\n",
            "startLine": 494,
            "endLine": 494,
            "startColumn": 29,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 501,
            "endLine": 501,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 499,
            "endLine": 499,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof VariableDeclarator)",
            "startLine": 504,
            "endLine": 523,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof VariableDeclarator)",
            "startLine": 502,
            "endLine": 521,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 505,
            "endLine": 513,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 503,
            "endLine": 511,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableDeclarator decExpr=(VariableDeclarator)demandParentNode(node);\n",
            "startLine": 506,
            "endLine": 506,
            "startColumn": 13,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableDeclarator decExpr=(VariableDeclarator)demandParentNode(node);\n",
            "startLine": 504,
            "endLine": 504,
            "startColumn": 13,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=decExpr.getType().resolve();\n",
            "startLine": 507,
            "endLine": 507,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=decExpr.getType().resolve();\n",
            "startLine": 505,
            "endLine": 505,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 509,
            "endLine": 511,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 507,
            "endLine": 509,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 510,
            "endLine": 510,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 508,
            "endLine": 508,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 512,
            "endLine": 512,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 510,
            "endLine": 510,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof AssignExpr)",
            "startLine": 513,
            "endLine": 523,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof AssignExpr)",
            "startLine": 511,
            "endLine": 521,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 513,
            "endLine": 521,
            "startColumn": 66,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 511,
            "endLine": 519,
            "startColumn": 66,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AssignExpr assExpr=(AssignExpr)demandParentNode(node);\n",
            "startLine": 514,
            "endLine": 514,
            "startColumn": 13,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AssignExpr assExpr=(AssignExpr)demandParentNode(node);\n",
            "startLine": 512,
            "endLine": 512,
            "startColumn": 13,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=assExpr.calculateResolvedType();\n",
            "startLine": 515,
            "endLine": 515,
            "startColumn": 13,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=assExpr.calculateResolvedType();\n",
            "startLine": 513,
            "endLine": 513,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 517,
            "endLine": 519,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 515,
            "endLine": 517,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 518,
            "endLine": 518,
            "startColumn": 17,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=resolveLambda(node,result);\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 17,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 518,
            "endLine": 518,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 521,
            "endLine": 523,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 519,
            "endLine": 521,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"The type of a lambda expr depends on the position and its return value\");\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 13,
            "endColumn": 127
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"The type of a lambda expr depends on the position and its return value\");\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 13,
            "endColumn": 127
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=getParamPos(node);\n",
            "startLine": 465,
            "endLine": 465,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=getParamPos(node);\n",
            "startLine": 463,
            "endLine": 463,
            "startColumn": 13,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedMethodDeclaration> refMethod=facade.solve(callExpr);\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 13,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedMethodDeclaration> refMethod=facade.solve(callExpr);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 13,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Log.trace(\"getType on lambda expr %s\",() -> refMethod.getCorrespondingDeclaration().getName());\n",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 13,
            "endColumn": 108
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Log.trace(\"getType on lambda expr %s\",() -> refMethod.getCorrespondingDeclaration().getName());\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 13,
            "endColumn": 108
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=refMethod.getCorrespondingDeclaration().getParam(pos).getType();\n",
            "startLine": 473,
            "endLine": 473,
            "startColumn": 13,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=refMethod.getCorrespondingDeclaration().getParam(pos).getType();\n",
            "startLine": 471,
            "endLine": 471,
            "startColumn": 13,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 503,
            "endLine": 503,
            "startColumn": 13,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 501,
            "endLine": 501,
            "startColumn": 13,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsolvedSymbolException(demandParentNode(node,IS_NOT_ENCLOSED_EXPR).toString(),callExpr.getName().getId());\n",
            "startLine": 468,
            "endLine": 468,
            "startColumn": 17,
            "endColumn": 136
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsolvedSymbolException(parentNode.toString(),callExpr.getName().getId());\n",
            "startLine": 466,
            "endLine": 466,
            "startColumn": 17,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 463,
            "endLine": 504,
            "startColumn": 85,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 461,
            "endLine": 502,
            "startColumn": 51,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node,IS_NOT_ENCLOSED_EXPR) instanceof MethodCallExpr)",
            "startLine": 463,
            "endLine": 523,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof MethodCallExpr)",
            "startLine": 461,
            "endLine": 521,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr callExpr=(MethodCallExpr)demandParentNode(node,IS_NOT_ENCLOSED_EXPR);\n",
            "startLine": 464,
            "endLine": 464,
            "startColumn": 13,
            "endColumn": 101
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr callExpr=(MethodCallExpr)parentNode;\n",
            "startLine": 462,
            "endLine": 462,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "6aa8ce326340f7964fefdbd76658b066fca75487",
      "url": "https://github.com/javaparser/javaparser/commit/6aa8ce326340f7964fefdbd76658b066fca75487",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 591,
        "endLine": 644,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 589,
        "endLine": 643,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(\"new\".equals(node.getIdentifier()))",
            "startLine": 593,
            "endLine": 595,
            "startColumn": 6,
            "endColumn": 4
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(\"new\".equals(node.getIdentifier()))",
            "startLine": 591,
            "endLine": 593,
            "startColumn": 6,
            "endColumn": 4
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return node.getScope().calculateResolvedType();\n",
            "startLine": 594,
            "endLine": 594,
            "startColumn": 4,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return node.getScope().calculateResolvedType();\n",
            "startLine": 592,
            "endLine": 592,
            "startColumn": 4,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!refMethod.isSolved())",
            "startLine": 600,
            "endLine": 602,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!refMethod.isSolved())",
            "startLine": 599,
            "endLine": 601,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 604,
            "endLine": 640,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(solveLambdas)",
            "startLine": 603,
            "endLine": 639,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage usage=facade.solveMethodAsUsage(callExpr);\n",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 17,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage usage=facade.solveMethodAsUsage(callExpr);\n",
            "startLine": 604,
            "endLine": 604,
            "startColumn": 17,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=usage.getParamType(pos);\n",
            "startLine": 606,
            "endLine": 606,
            "startColumn": 17,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType result=usage.getParamType(pos);\n",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 17,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Context ctx=JavaParserFactory.getContext(node,typeSolver);\n",
            "startLine": 608,
            "endLine": 608,
            "startColumn": 17,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Context ctx=JavaParserFactory.getContext(node,typeSolver);\n",
            "startLine": 607,
            "endLine": 607,
            "startColumn": 17,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=result.solveGenericTypes(ctx);\n",
            "startLine": 609,
            "endLine": 609,
            "startColumn": 17,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=result.solveGenericTypes(ctx);\n",
            "startLine": 608,
            "endLine": 608,
            "startColumn": 17,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethodOpt=FunctionalInterfaceLogic.getFunctionalMethod(result);\n",
            "startLine": 614,
            "endLine": 614,
            "startColumn": 17,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethodOpt=FunctionalInterfaceLogic.getFunctionalMethod(result);\n",
            "startLine": 613,
            "endLine": 613,
            "startColumn": 17,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethodOpt.isPresent())",
            "startLine": 615,
            "endLine": 637,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethodOpt.isPresent())",
            "startLine": 614,
            "endLine": 636,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage functionalMethod=functionalMethodOpt.get();\n",
            "startLine": 616,
            "endLine": 616,
            "startColumn": 21,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage functionalMethod=functionalMethodOpt.get();\n",
            "startLine": 615,
            "endLine": 615,
            "startColumn": 21,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(typeParamDecl: result.asReferenceType().getTypeParametersMap())",
            "startLine": 618,
            "endLine": 620,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(typeParamDecl: result.asReferenceType().getTypeParametersMap())",
            "startLine": 617,
            "endLine": 619,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "functionalMethod=functionalMethod.replaceTypeParameter(typeParamDecl.a,typeParamDecl.b);\n",
            "startLine": 619,
            "endLine": 619,
            "startColumn": 25,
            "endColumn": 116
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "functionalMethod=functionalMethod.replaceTypeParameter(typeParamDecl.a,typeParamDecl.b);\n",
            "startLine": 618,
            "endLine": 618,
            "startColumn": 25,
            "endColumn": 116
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < functionalMethod.getNoParams(); i++)",
            "startLine": 623,
            "endLine": 629,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < functionalMethod.getNoParams(); i++)",
            "startLine": 622,
            "endLine": 628,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType type=functionalMethod.getParamType(i);\n",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 25,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType type=functionalMethod.getParamType(i);\n",
            "startLine": 623,
            "endLine": 623,
            "startColumn": 25,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isWildcard())",
            "startLine": 625,
            "endLine": 628,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isWildcard())",
            "startLine": 624,
            "endLine": 627,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType boundedType=type.asWildcard().getBoundedType();\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 29,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType boundedType=type.asWildcard().getBoundedType();\n",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 29,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "functionalMethod=functionalMethod.replaceParamType(i,boundedType);\n",
            "startLine": 627,
            "endLine": 627,
            "startColumn": 29,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "functionalMethod=functionalMethod.replaceParamType(i,boundedType);\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 29,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType actualType=facade.toMethodUsage(node,functionalMethod.getParamTypes()).returnType();\n",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 21,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType actualType=facade.toMethodUsage(node,functionalMethod.getParamTypes()).returnType();\n",
            "startLine": 630,
            "endLine": 630,
            "startColumn": 21,
            "endColumn": 121
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType formalType=functionalMethod.returnType();\n",
            "startLine": 632,
            "endLine": 632,
            "startColumn": 21,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType formalType=functionalMethod.returnType();\n",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 21,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InferenceContext inferenceContext=new InferenceContext(typeSolver);\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 21,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InferenceContext inferenceContext=new InferenceContext(typeSolver);\n",
            "startLine": 633,
            "endLine": 633,
            "startColumn": 21,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "inferenceContext.addPair(formalType,actualType);\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 21,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "inferenceContext.addPair(formalType,actualType);\n",
            "startLine": 634,
            "endLine": 634,
            "startColumn": 21,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=inferenceContext.resolve(inferenceContext.addSingle(result));\n",
            "startLine": 636,
            "endLine": 636,
            "startColumn": 21,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=inferenceContext.resolve(inferenceContext.addSingle(result));\n",
            "startLine": 635,
            "endLine": 635,
            "startColumn": 21,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 639,
            "endLine": 639,
            "startColumn": 17,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 638,
            "endLine": 638,
            "startColumn": 17,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=getParamPos(node);\n",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 13,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int pos=getParamPos(node);\n",
            "startLine": 597,
            "endLine": 597,
            "startColumn": 13,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedMethodDeclaration> refMethod=facade.solve(callExpr,false);\n",
            "startLine": 599,
            "endLine": 599,
            "startColumn": 13,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolReference<ResolvedMethodDeclaration> refMethod=facade.solve(callExpr,false);\n",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 13,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Log.trace(\"getType on method reference expr %s\",() -> refMethod.getCorrespondingDeclaration().getName());\n",
            "startLine": 603,
            "endLine": 603,
            "startColumn": 13,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Log.trace(\"getType on method reference expr %s\",() -> refMethod.getCorrespondingDeclaration().getName());\n",
            "startLine": 602,
            "endLine": 602,
            "startColumn": 13,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return refMethod.getCorrespondingDeclaration().getParam(pos).getType();\n",
            "startLine": 641,
            "endLine": 641,
            "startColumn": 13,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return refMethod.getCorrespondingDeclaration().getParam(pos).getType();\n",
            "startLine": 640,
            "endLine": 640,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"The type of a method reference expr depends on the position and its return value\");\n",
            "startLine": 643,
            "endLine": 643,
            "startColumn": 9,
            "endColumn": 133
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(\"The type of a method reference expr depends on the position and its return value\");\n",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 9,
            "endColumn": 133
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof MethodCallExpr)",
            "startLine": 596,
            "endLine": 642,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof MethodCallExpr)",
            "startLine": 595,
            "endLine": 641,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsolvedSymbolException(demandParentNode(node).toString(),callExpr.getName().getId());\n",
            "startLine": 601,
            "endLine": 601,
            "startColumn": 17,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsolvedSymbolException(parentNode.toString(),callExpr.getName().getId());\n",
            "startLine": 600,
            "endLine": 600,
            "startColumn": 17,
            "endColumn": 102
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr callExpr=(MethodCallExpr)demandParentNode(node);\n",
            "startLine": 597,
            "endLine": 597,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr callExpr=(MethodCallExpr)parentNode;\n",
            "startLine": 596,
            "endLine": 596,
            "startColumn": 13,
            "endColumn": 67
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "6aa8ce326340f7964fefdbd76658b066fca75487",
      "url": "https://github.com/javaparser/javaparser/commit/6aa8ce326340f7964fefdbd76658b066fca75487",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.LambdaExprContext",
        "type": "Method",
        "name": "solveSymbolAsValue",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/LambdaExprContext.java",
        "startLine": 70,
        "endLine": 214,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.LambdaExprContext",
        "type": "Method",
        "name": "solveSymbolAsValue",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/LambdaExprContext.java",
        "startLine": 63,
        "endLine": 207,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: wrappedNode.getParameters())",
            "startLine": 73,
            "endLine": 210,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(parameter: wrappedNode.getParameters())",
            "startLine": 66,
            "endLine": 203,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(decl: sb.getSymbolDeclarations())",
            "startLine": 76,
            "endLine": 209,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(decl: sb.getSymbolDeclarations())",
            "startLine": 69,
            "endLine": 202,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(decl.getName().equals(name))",
            "startLine": 77,
            "endLine": 208,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(decl.getName().equals(name))",
            "startLine": 70,
            "endLine": 201,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof MethodCallExpr)",
            "startLine": 79,
            "endLine": 207,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof MethodCallExpr)",
            "startLine": 72,
            "endLine": 200,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof VariableDeclarator)",
            "startLine": 125,
            "endLine": 207,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof VariableDeclarator)",
            "startLine": 118,
            "endLine": 200,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 125,
            "endLine": 150,
            "startColumn": 74,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 118,
            "endLine": 143,
            "startColumn": 74,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableDeclarator variableDeclarator=(VariableDeclarator)parentNode;\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 25,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "VariableDeclarator variableDeclarator=(VariableDeclarator)parentNode;\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 25,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(variableDeclarator.getType());\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 25,
            "endColumn": 120
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(variableDeclarator.getType());\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 25,
            "endColumn": 120
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 25,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 25,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 129,
            "endLine": 149,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 122,
            "endLine": 142,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 129,
            "endLine": 147,
            "startColumn": 59,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 122,
            "endLine": 140,
            "startColumn": 59,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 29,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 29,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 29,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 29,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 134,
            "endLine": 143,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 127,
            "endLine": 136,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 134,
            "endLine": 141,
            "startColumn": 63,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 127,
            "endLine": 134,
            "startColumn": 63,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 135,
            "endLine": 140,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 128,
            "endLine": 133,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 136,
            "endLine": 139,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 129,
            "endLine": 132,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 41,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 41,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 41,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 41,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 141,
            "endLine": 143,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 134,
            "endLine": 136,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 33,
            "endColumn": 125
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 33,
            "endColumn": 125
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 29,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 29,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 29,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 147,
            "endLine": 149,
            "startColumn": 32,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 32,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 29,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof ReturnStmt)",
            "startLine": 150,
            "endLine": 207,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof ReturnStmt)",
            "startLine": 143,
            "endLine": 200,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 150,
            "endLine": 179,
            "startColumn": 66,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 143,
            "endLine": 172,
            "startColumn": 66,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReturnStmt returnStmt=(ReturnStmt)parentNode;\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 25,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ReturnStmt returnStmt=(ReturnStmt)parentNode;\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 25,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodDeclaration> optDeclaration=returnStmt.findAncestor(MethodDeclaration.class);\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 25,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodDeclaration> optDeclaration=returnStmt.findAncestor(MethodDeclaration.class);\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 25,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(optDeclaration.isPresent())",
            "startLine": 153,
            "endLine": 178,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(optDeclaration.isPresent())",
            "startLine": 146,
            "endLine": 171,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(optDeclaration.get().asMethodDeclaration().getType());\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 29,
            "endColumn": 148
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(optDeclaration.get().asMethodDeclaration().getType());\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 29,
            "endColumn": 148
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 29,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 29,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 157,
            "endLine": 177,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 150,
            "endLine": 170,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 157,
            "endLine": 175,
            "startColumn": 63,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 150,
            "endLine": 168,
            "startColumn": 63,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 33,
            "endColumn": 102
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 33,
            "endColumn": 102
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 33,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 33,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 162,
            "endLine": 171,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 155,
            "endLine": 164,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 162,
            "endLine": 169,
            "startColumn": 67,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 155,
            "endLine": 162,
            "startColumn": 67,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 163,
            "endLine": 168,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 156,
            "endLine": 161,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 164,
            "endLine": 167,
            "startColumn": 41,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 157,
            "endLine": 160,
            "startColumn": 41,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 45,
            "endColumn": 121
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 45,
            "endColumn": 121
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 45,
            "endColumn": 118
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 45,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 169,
            "endLine": 171,
            "startColumn": 40,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 162,
            "endLine": 164,
            "startColumn": 40,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 37,
            "endColumn": 129
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 37,
            "endColumn": 129
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 33,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 33,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 33,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 33,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 175,
            "endLine": 177,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 168,
            "endLine": 170,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 33,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 33,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof CastExpr)",
            "startLine": 179,
            "endLine": 207,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parentNode instanceof CastExpr)",
            "startLine": 172,
            "endLine": 200,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 179,
            "endLine": 205,
            "startColumn": 64,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 172,
            "endLine": 198,
            "startColumn": 64,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CastExpr castExpr=(CastExpr)parentNode;\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "CastExpr castExpr=(CastExpr)parentNode;\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(castExpr.getType());\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 25,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType t=JavaParserFacade.get(typeSolver).convertToUsage(castExpr.getType());\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 25,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 25,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethod=FunctionalInterfaceLogic.getFunctionalMethod(t);\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 25,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 184,
            "endLine": 204,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethod.isPresent())",
            "startLine": 177,
            "endLine": 197,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 184,
            "endLine": 202,
            "startColumn": 59,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 177,
            "endLine": 195,
            "startColumn": 59,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 29,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=functionalMethod.get().getParamType(index);\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 29,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 188,
            "endLine": 188,
            "startColumn": 29,
            "endColumn": 113
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<ResolvedTypeParameterDeclaration,ResolvedType> inferredTypes=new HashMap<>();\n",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 29,
            "endColumn": 113
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 189,
            "endLine": 198,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isReferenceType())",
            "startLine": 182,
            "endLine": 191,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 189,
            "endLine": 196,
            "startColumn": 63,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 182,
            "endLine": 189,
            "startColumn": 63,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 190,
            "endLine": 195,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: lambdaType.asReferenceType().getTypeParametersMap())",
            "startLine": 183,
            "endLine": 188,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 191,
            "endLine": 194,
            "startColumn": 37,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(entry.b.isTypeVariable() && entry.b.asTypeParameter().declaredOnType())",
            "startLine": 184,
            "endLine": 187,
            "startColumn": 37,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 41,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType ot=t.asReferenceType().typeParametersMap().getValue(entry.a);\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 41,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 41,
            "endColumn": 114
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=lambdaType.replaceTypeVariables(entry.a,ot,inferredTypes);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 41,
            "endColumn": 114
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 196,
            "endLine": 198,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(lambdaType.isTypeVariable() && lambdaType.asTypeParameter().declaredOnType())",
            "startLine": 189,
            "endLine": 191,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 33,
            "endColumn": 125
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType=t.asReferenceType().typeParametersMap().getValue(lambdaType.asTypeParameter());\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 33,
            "endColumn": 125
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(lambdaType,name);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 29,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 29,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 29,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 202,
            "endLine": 204,
            "startColumn": 32,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 195,
            "endLine": 197,
            "startColumn": 32,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 203,
            "endLine": 203,
            "startColumn": 29,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 29,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 205,
            "endLine": 207,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 198,
            "endLine": 200,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 25,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException();\n",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 25,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethodOpt.isPresent())",
            "startLine": 87,
            "endLine": 124,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(functionalMethodOpt.isPresent())",
            "startLine": 80,
            "endLine": 117,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 87,
            "endLine": 122,
            "startColumn": 61,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 80,
            "endLine": 115,
            "startColumn": 61,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage functionalMethod=functionalMethodOpt.get();\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 29,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage functionalMethod=functionalMethodOpt.get();\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 29,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InferenceContext inferenceContext=new InferenceContext(typeSolver);\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 29,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "InferenceContext inferenceContext=new InferenceContext(typeSolver);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 29,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType.asReferenceType().getTypeDeclaration().ifPresent(typeDeclaration -> {\n  inferenceContext.addPair(lambdaType,new ReferenceTypeImpl(typeDeclaration));\n}\n);\n",
            "startLine": 93,
            "endLine": 98,
            "startColumn": 29,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "lambdaType.asReferenceType().getTypeDeclaration().ifPresent(typeDeclaration -> {\n  inferenceContext.addPair(lambdaType,new ReferenceTypeImpl(typeDeclaration));\n}\n);\n",
            "startLine": 86,
            "endLine": 91,
            "startColumn": 29,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "inferenceContext.addPair(lambdaType,new ReferenceTypeImpl(typeDeclaration));\n",
            "startLine": 94,
            "endLine": 97,
            "startColumn": 33,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "inferenceContext.addPair(lambdaType,new ReferenceTypeImpl(typeDeclaration));\n",
            "startLine": 87,
            "endLine": 90,
            "startColumn": 33,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean found=false;\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 29,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean found=false;\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 29,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lambdaParamIndex;\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 29,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int lambdaParamIndex;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 29,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(lambdaParamIndex=0; lambdaParamIndex < wrappedNode.getParameters().size(); lambdaParamIndex++)",
            "startLine": 103,
            "endLine": 108,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(lambdaParamIndex=0; lambdaParamIndex < wrappedNode.getParameters().size(); lambdaParamIndex++)",
            "startLine": 96,
            "endLine": 101,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(wrappedNode.getParameter(lambdaParamIndex).getName().getIdentifier().equals(name))",
            "startLine": 104,
            "endLine": 107,
            "startColumn": 33,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(wrappedNode.getParameter(lambdaParamIndex).getName().getIdentifier().equals(name))",
            "startLine": 97,
            "endLine": 100,
            "startColumn": 33,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "found=true;\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 37,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "found=true;\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 37,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 37,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 37,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!found)",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 29,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!found)",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 29,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType argType=inferenceContext.resolve(inferenceContext.addSingle(functionalMethod.getParamType(lambdaParamIndex)));\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 29,
            "endColumn": 154
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType argType=inferenceContext.resolve(inferenceContext.addSingle(functionalMethod.getParamType(lambdaParamIndex)));\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 29,
            "endColumn": 154
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedLambdaConstraintType conType;\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 29,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedLambdaConstraintType conType;\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 29,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(argType.isWildcard())",
            "startLine": 115,
            "endLine": 119,
            "startColumn": 29,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(argType.isWildcard())",
            "startLine": 108,
            "endLine": 112,
            "startColumn": 29,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 115,
            "endLine": 117,
            "startColumn": 54,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 108,
            "endLine": 110,
            "startColumn": 54,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conType=ResolvedLambdaConstraintType.bound(argType.asWildcard().getBoundedType());\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 33,
            "endColumn": 117
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conType=ResolvedLambdaConstraintType.bound(argType.asWildcard().getBoundedType());\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 33,
            "endColumn": 117
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 117,
            "endLine": 119,
            "startColumn": 36,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 110,
            "endLine": 112,
            "startColumn": 36,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conType=ResolvedLambdaConstraintType.bound(argType);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 33,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conType=ResolvedLambdaConstraintType.bound(argType);\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 33,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(conType,name);\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 29,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Value value=new Value(conType,name);\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 29,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 29,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.of(value);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 29,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 122,
            "endLine": 124,
            "startColumn": 31,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 115,
            "endLine": 117,
            "startColumn": 31,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 29,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Optional.empty();\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 29,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=-1;\n",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int index=-1;\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "index++;\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 13,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "index++;\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 13,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolDeclarator sb=JavaParserFactory.getSymbolDeclarator(parameter,typeSolver);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 13,
            "endColumn": 96
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SymbolDeclarator sb=JavaParserFactory.getSymbolDeclarator(parameter,typeSolver);\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 13,
            "endColumn": 96
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node parentNode=demandParentNode(wrappedNode,IS_NOT_ENCLOSED_EXPR);\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 21,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Node parentNode=demandParentNode(wrappedNode,IS_NOT_ENCLOSED_EXPR);\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 21,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr methodCallExpr=(MethodCallExpr)parentNode;\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 25,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodCallExpr methodCallExpr=(MethodCallExpr)parentNode;\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 25,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage methodUsage=JavaParserFacade.get(typeSolver).solveMethodAsUsage(methodCallExpr);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 25,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MethodUsage methodUsage=JavaParserFacade.get(typeSolver).solveMethodAsUsage(methodCallExpr);\n",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 25,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=methodUsage.getParamTypes().get(i);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 25,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType lambdaType=methodUsage.getParamTypes().get(i);\n",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 25,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethodOpt=FunctionalInterfaceLogic.getFunctionalMethod(lambdaType);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 25,
            "endColumn": 126
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<MethodUsage> functionalMethodOpt=FunctionalInterfaceLogic.getFunctionalMethod(lambdaType);\n",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 25,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return solveSymbolAsValueInParentContext(name);\n",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return solveSymbolAsValueInParentContext(name);\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 79,
            "endLine": 125,
            "startColumn": 63,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 72,
            "endLine": 118,
            "startColumn": 63,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=pos(methodCallExpr,wrappedNode);\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 25,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=methodCallExpr.getArgumentPosition(wrappedNode,EXCLUDE_ENCLOSED_EXPR);\n",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 25,
            "endColumn": 104
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return i;\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 17,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return i;\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 41,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "eaf1f0d06727b9262f3189c01e1f2951e4fc5bc4",
      "url": "https://github.com/javaparser/javaparser/commit/eaf1f0d06727b9262f3189c01e1f2951e4fc5bc4",
      "originalMethod": {
        "container": "com.github.javaparser.utils.TypeUtils",
        "type": "Method",
        "name": "getPrimitiveTypeDescriptor",
        "filePath": "javaparser-core/src/main/java/com/github/javaparser/utils/TypeUtils.java",
        "startLine": 64,
        "endLine": 78,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.utils.TypeUtils",
        "type": "Method",
        "name": "getPrimitiveTypeDescriptor",
        "filePath": "javaparser-core/src/main/java/com/github/javaparser/utils/TypeUtils.java",
        "startLine": 62,
        "endLine": 75,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(clazz == Void.TYPE || clazz == Void.class)",
            "startLine": 65,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(clazz == Void.TYPE || clazz == Void.class)",
            "startLine": 63,
            "endLine": 65,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new VoidType().toDescriptor();\n",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 13,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new VoidType().toDescriptor();\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 13,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(prim.isPresent())",
            "startLine": 70,
            "endLine": 72,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(prim.isPresent())",
            "startLine": 68,
            "endLine": 70,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return prim.get().toDescriptor();\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return prim.get().toDescriptor();\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 13,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=clazz.getCanonicalName();\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String className=clazz.getSimpleName();\n",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 50
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<Primitive> prim=getPrimitive(className);\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<Primitive> prim=Primitive.byTypeName(className);\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<ResolvedType> rt=ResolvedPrimitiveType.byBoxTypeQName(className);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "prim=Primitive.byBoxedTypeName(className);\n",
            "startLine": 71,
            "endLine": 71,
            "startColumn": 9,
            "endColumn": 53
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<ResolvedType> rt=ResolvedPrimitiveType.byBoxTypeQName(className);\n",
            "startLine": 73,
            "endLine": 73,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Optional<Primitive> prim=Primitive.byTypeName(className);\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return prim.map(p -> p.toDescriptor()).orElseThrow(() -> new AssertionError(String.format(\"ResolvedPrimitiveType name \\\"%s\\\" does not match any Primitive enum constant identifier.\",typeName.toUpperCase())));\n",
            "startLine": 83,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return prim.map(pType -> pType.toDescriptor()).orElseThrow(() -> new IllegalArgumentException(String.format(\"Unknown primitive type \\\"%s\\\"\",className)));\n",
            "startLine": 72,
            "endLine": 74,
            "startColumn": 9,
            "endColumn": 120
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "d682aa22ca7b16ca6e0a9545237ece44f3ddd69e",
      "url": "https://github.com/javaparser/javaparser/commit/d682aa22ca7b16ca6e0a9545237ece44f3ddd69e",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext",
        "type": "Method",
        "name": "matchTypeParameters",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodCallExprContext.java",
        "startLine": 408,
        "endLine": 451,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext",
        "type": "Method",
        "name": "matchTypeParameters",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/contexts/MethodCallExprContext.java",
        "startLine": 407,
        "endLine": 452,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isTypeVariable())",
            "startLine": 409,
            "endLine": 450,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isTypeVariable())",
            "startLine": 408,
            "endLine": 451,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isArray())",
            "startLine": 426,
            "endLine": 450,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isArray())",
            "startLine": 427,
            "endLine": 451,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 426,
            "endLine": 435,
            "startColumn": 44,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 427,
            "endLine": 436,
            "startColumn": 44,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!(actualType.isArray() || actualType.isNull()))",
            "startLine": 428,
            "endLine": 430,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!(actualType.isArray() || actualType.isNull()))",
            "startLine": 429,
            "endLine": 431,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(actualType.getClass().getCanonicalName());\n",
            "startLine": 429,
            "endLine": 429,
            "startColumn": 17,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(actualType.getClass().getCanonicalName());\n",
            "startLine": 430,
            "endLine": 430,
            "startColumn": 17,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "matchTypeParameters(expectedType.asArrayType().getComponentType(),actualType.isNull() ? actualType : actualType.asArrayType().getComponentType(),matchedTypeParameters);\n",
            "startLine": 431,
            "endLine": 434,
            "startColumn": 13,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "matchTypeParameters(expectedType.asArrayType().getComponentType(),actualType.isNull() ? actualType : actualType.asArrayType().getComponentType(),matchedTypeParameters);\n",
            "startLine": 432,
            "endLine": 435,
            "startColumn": 13,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isReferenceType())",
            "startLine": 435,
            "endLine": 450,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isReferenceType())",
            "startLine": 436,
            "endLine": 451,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 435,
            "endLine": 444,
            "startColumn": 52,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 436,
            "endLine": 445,
            "startColumn": 52,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType() && actualType.asReferenceType().typeParametersValues().size() > 0)",
            "startLine": 437,
            "endLine": 443,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType() && actualType.asReferenceType().typeParametersValues().size() > 0)",
            "startLine": 438,
            "endLine": 444,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 438,
            "endLine": 438,
            "startColumn": 17,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 17,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(tp: expectedType.asReferenceType().typeParametersValues())",
            "startLine": 439,
            "endLine": 442,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(tp: expectedType.asReferenceType().typeParametersValues())",
            "startLine": 440,
            "endLine": 443,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "matchTypeParameters(tp,actualType.asReferenceType().typeParametersValues().get(i),matchedTypeParameters);\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 21,
            "endColumn": 128
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "matchTypeParameters(tp,actualType.asReferenceType().typeParametersValues().get(i),matchedTypeParameters);\n",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 21,
            "endColumn": 128
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 21,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 442,
            "endLine": 442,
            "startColumn": 21,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isPrimitive())",
            "startLine": 444,
            "endLine": 450,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isPrimitive())",
            "startLine": 445,
            "endLine": 451,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 444,
            "endLine": 446,
            "startColumn": 48,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 445,
            "endLine": 447,
            "startColumn": 48,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isWildcard())",
            "startLine": 446,
            "endLine": 450,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(expectedType.isWildcard())",
            "startLine": 447,
            "endLine": 451,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 446,
            "endLine": 448,
            "startColumn": 47,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 447,
            "endLine": 449,
            "startColumn": 47,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 448,
            "endLine": 450,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 449,
            "endLine": 451,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(expectedType.getClass().getCanonicalName());\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 13,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(expectedType.getClass().getCanonicalName());\n",
            "startLine": 450,
            "endLine": 450,
            "startColumn": 13,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isPrimitive())",
            "startLine": 412,
            "endLine": 414,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isPrimitive())",
            "startLine": 411,
            "endLine": 414,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isNull())",
            "startLine": 419,
            "endLine": 421,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(type.isNull())",
            "startLine": 419,
            "endLine": 422,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!type.isTypeVariable() && !type.isReferenceType())",
            "startLine": 422,
            "endLine": 424,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!type.isTypeVariable() && !type.isReferenceType())",
            "startLine": 423,
            "endLine": 425,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(type.getClass().getCanonicalName());\n",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 17,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(type.getClass().getCanonicalName());\n",
            "startLine": 424,
            "endLine": 424,
            "startColumn": 17,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType type=actualType;\n",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 13,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedType type=actualType;\n",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 13,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "matchedTypeParameters.put(expectedType.asTypeParameter(),type);\n",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 13,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "matchedTypeParameters.put(expectedType.asTypeParameter(),type);\n",
            "startLine": 426,
            "endLine": 426,
            "startColumn": 13,
            "endColumn": 77
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 409,
            "endLine": 426,
            "startColumn": 44,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 408,
            "endLine": 427,
            "startColumn": 44,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "type=MyObjectProvider.INSTANCE.byName(type.asPrimitive().getBoxTypeQName());\n",
            "startLine": 413,
            "endLine": 413,
            "startColumn": 17,
            "endColumn": 95
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceTypeDeclaration resolvedTypedeclaration=typeSolver.solveType(type.asPrimitive().getBoxTypeQName());\n",
            "startLine": 412,
            "endLine": 412,
            "startColumn": 14,
            "endColumn": 132
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "d682aa22ca7b16ca6e0a9545237ece44f3ddd69e",
      "url": "https://github.com/javaparser/javaparser/commit/d682aa22ca7b16ca6e0a9545237ece44f3ddd69e",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.logic.InferenceContext",
        "type": "Method",
        "name": "registerCorrespondance",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/logic/InferenceContext.java",
        "startLine": 75,
        "endLine": 187,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.logic.InferenceContext",
        "type": "Method",
        "name": "registerCorrespondance",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/logic/InferenceContext.java",
        "startLine": 78,
        "endLine": 192,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isReferenceType() && actualType.isReferenceType())",
            "startLine": 76,
            "endLine": 186,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isReferenceType() && actualType.isReferenceType())",
            "startLine": 79,
            "endLine": 191,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 76,
            "endLine": 114,
            "startColumn": 75,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 79,
            "endLine": 117,
            "startColumn": 75,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType formalTypeAsReference=formalType.asReferenceType();\n",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 13,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType formalTypeAsReference=formalType.asReferenceType();\n",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 13,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType actualTypeAsReference=actualType.asReferenceType();\n",
            "startLine": 78,
            "endLine": 78,
            "startColumn": 13,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType actualTypeAsReference=actualType.asReferenceType();\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 13,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!formalTypeAsReference.getQualifiedName().equals(actualTypeAsReference.getQualifiedName()))",
            "startLine": 80,
            "endLine": 99,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!formalTypeAsReference.getQualifiedName().equals(actualTypeAsReference.getQualifiedName()))",
            "startLine": 83,
            "endLine": 102,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedReferenceType> ancestors=actualTypeAsReference.getAllAncestors();\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 17,
            "endColumn": 97
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedReferenceType> ancestors=actualTypeAsReference.getAllAncestors();\n",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 17,
            "endColumn": 97
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String formalParamTypeQName=formalTypeAsReference.getQualifiedName();\n",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String formalParamTypeQName=formalTypeAsReference.getQualifiedName();\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 17,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedType> correspondingFormalType=\"java.lang.Object\".equals(formalParamTypeQName) ? ancestors.stream().map(ancestor -> ancestor.asReferenceType()).collect(Collectors.toList()) : ancestors.stream().filter((a) -> a.getQualifiedName().equals(formalParamTypeQName)).collect(Collectors.toList());\n",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 17,
            "endColumn": 132
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedType> correspondingFormalType=\"java.lang.Object\".equals(formalParamTypeQName) ? ancestors.stream().map(ancestor -> ancestor.asReferenceType()).collect(Collectors.toList()) : ancestors.stream().filter((a) -> a.getQualifiedName().equals(formalParamTypeQName)).collect(Collectors.toList());\n",
            "startLine": 88,
            "endLine": 90,
            "startColumn": 17,
            "endColumn": 132
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(correspondingFormalType.isEmpty())",
            "startLine": 88,
            "endLine": 97,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(correspondingFormalType.isEmpty())",
            "startLine": 91,
            "endLine": 100,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ancestors=formalTypeAsReference.getAllAncestors();\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 21,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ancestors=formalTypeAsReference.getAllAncestors();\n",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 21,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actualParamTypeQname=actualTypeAsReference.getQualifiedName();\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 21,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actualParamTypeQname=actualTypeAsReference.getQualifiedName();\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 21,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedType> correspondingActualType=ancestors.stream().filter(a -> a.getQualifiedName().equals(actualParamTypeQname)).collect(Collectors.toList());\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 21,
            "endColumn": 177
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<ResolvedType> correspondingActualType=ancestors.stream().filter(a -> a.getQualifiedName().equals(actualParamTypeQname)).collect(Collectors.toList());\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 21,
            "endColumn": 177
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(correspondingActualType.isEmpty())",
            "startLine": 92,
            "endLine": 94,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(correspondingActualType.isEmpty())",
            "startLine": 95,
            "endLine": 97,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new ConfilictingGenericTypesException(formalType,actualType);\n",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 25,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new ConfilictingGenericTypesException(formalType,actualType);\n",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 25,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "correspondingFormalType=correspondingActualType;\n",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 21,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "correspondingFormalType=correspondingActualType;\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 21,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "actualTypeAsReference=correspondingFormalType.get(0).asReferenceType();\n",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 17,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "actualTypeAsReference=correspondingFormalType.get(0).asReferenceType();\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 17,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalTypeAsReference.getQualifiedName().equals(actualTypeAsReference.getQualifiedName()))",
            "startLine": 101,
            "endLine": 113,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalTypeAsReference.getQualifiedName().equals(actualTypeAsReference.getQualifiedName()))",
            "startLine": 104,
            "endLine": 116,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!formalTypeAsReference.typeParametersValues().isEmpty())",
            "startLine": 102,
            "endLine": 112,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!formalTypeAsReference.typeParametersValues().isEmpty())",
            "startLine": 105,
            "endLine": 115,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualTypeAsReference.isRawType())",
            "startLine": 103,
            "endLine": 111,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualTypeAsReference.isRawType())",
            "startLine": 106,
            "endLine": 114,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 103,
            "endLine": 105,
            "startColumn": 60,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 106,
            "endLine": 108,
            "startColumn": 60,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 105,
            "endLine": 111,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 108,
            "endLine": 114,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 25,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int i=0;\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 25,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(formalTypeParameter: formalTypeAsReference.typeParametersValues())",
            "startLine": 107,
            "endLine": 110,
            "startColumn": 25,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(formalTypeParameter: formalTypeAsReference.typeParametersValues())",
            "startLine": 110,
            "endLine": 113,
            "startColumn": 25,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalTypeParameter,actualTypeAsReference.typeParametersValues().get(i));\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 29,
            "endColumn": 126
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalTypeParameter,actualTypeAsReference.typeParametersValues().get(i));\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 29,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 29,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "i++;\n",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 29,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof InferenceVariableType && !actualType.isPrimitive())",
            "startLine": 114,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof InferenceVariableType && !actualType.isPrimitive())",
            "startLine": 117,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 114,
            "endLine": 119,
            "startColumn": 94,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 117,
            "endLine": 122,
            "startColumn": 94,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType).registerEquivalentType(actualType);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 13,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType).registerEquivalentType(actualType);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 13,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType instanceof InferenceVariableType)",
            "startLine": 116,
            "endLine": 118,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType instanceof InferenceVariableType)",
            "startLine": 119,
            "endLine": 121,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 17,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 17,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isNull())",
            "startLine": 119,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isNull())",
            "startLine": 122,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 119,
            "endLine": 121,
            "startColumn": 41,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 122,
            "endLine": 124,
            "startColumn": 41,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.equals(formalType))",
            "startLine": 121,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.equals(formalType))",
            "startLine": 124,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 121,
            "endLine": 123,
            "startColumn": 51,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 124,
            "endLine": 126,
            "startColumn": 51,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isArray() && formalType.isArray())",
            "startLine": 123,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isArray() && formalType.isArray())",
            "startLine": 126,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 123,
            "endLine": 125,
            "startColumn": 66,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 126,
            "endLine": 128,
            "startColumn": 66,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType.asArrayType().getComponentType(),actualType.asArrayType().getComponentType());\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 13,
            "endColumn": 126
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType.asArrayType().getComponentType(),actualType.asArrayType().getComponentType());\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 13,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isWildcard())",
            "startLine": 125,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isWildcard())",
            "startLine": 128,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 125,
            "endLine": 150,
            "startColumn": 45,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 128,
            "endLine": 153,
            "startColumn": 45,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if((actualType instanceof InferenceVariableType) && formalType.asWildcard().isBounded())",
            "startLine": 127,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if((actualType instanceof InferenceVariableType) && formalType.asWildcard().isBounded())",
            "startLine": 130,
            "endLine": 135,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType.asWildcard().getBoundedType());\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 17,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType.asWildcard().getBoundedType());\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 119
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asWildcard().getBoundedType() instanceof InferenceVariableType)",
            "startLine": 129,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asWildcard().getBoundedType() instanceof InferenceVariableType)",
            "startLine": 132,
            "endLine": 134,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualType);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 21,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualType);\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 21,
            "endColumn": 123
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isWildcard())",
            "startLine": 133,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isWildcard())",
            "startLine": 136,
            "endLine": 146,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedWildcard formalWildcard=formalType.asWildcard();\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 17,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedWildcard formalWildcard=formalType.asWildcard();\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 17,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedWildcard actualWildcard=actualType.asWildcard();\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 17,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedWildcard actualWildcard=actualType.asWildcard();\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 17,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isBounded() && formalWildcard.getBoundedType() instanceof InferenceVariableType)",
            "startLine": 136,
            "endLine": 142,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isBounded() && formalWildcard.getBoundedType() instanceof InferenceVariableType)",
            "startLine": 139,
            "endLine": 145,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isSuper() && actualWildcard.isSuper())",
            "startLine": 137,
            "endLine": 141,
            "startColumn": 21,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isSuper() && actualWildcard.isSuper())",
            "startLine": 140,
            "endLine": 144,
            "startColumn": 21,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 137,
            "endLine": 139,
            "startColumn": 79,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 140,
            "endLine": 142,
            "startColumn": 79,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualWildcard.getBoundedType());\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 25,
            "endColumn": 148
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualWildcard.getBoundedType());\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 25,
            "endColumn": 148
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isExtends() && actualWildcard.isExtends())",
            "startLine": 139,
            "endLine": 141,
            "startColumn": 28,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalWildcard.isExtends() && actualWildcard.isExtends())",
            "startLine": 142,
            "endLine": 144,
            "startColumn": 28,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualWildcard.getBoundedType());\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 25,
            "endColumn": 148
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)formalType.asWildcard().getBoundedType()).registerEquivalentType(actualWildcard.getBoundedType());\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 25,
            "endColumn": 148
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType())",
            "startLine": 145,
            "endLine": 149,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType())",
            "startLine": 148,
            "endLine": 152,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asWildcard().isBounded())",
            "startLine": 146,
            "endLine": 148,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asWildcard().isBounded())",
            "startLine": 149,
            "endLine": 151,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType.asWildcard().getBoundedType(),actualType);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 21,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType.asWildcard().getBoundedType(),actualType);\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 21,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType instanceof InferenceVariableType)",
            "startLine": 150,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType instanceof InferenceVariableType)",
            "startLine": 153,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 150,
            "endLine": 156,
            "startColumn": 65,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 153,
            "endLine": 159,
            "startColumn": 65,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof ResolvedReferenceType)",
            "startLine": 151,
            "endLine": 155,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof ResolvedReferenceType)",
            "startLine": 154,
            "endLine": 158,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 151,
            "endLine": 153,
            "startColumn": 62,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 154,
            "endLine": 156,
            "startColumn": 62,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 17,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 17,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof InferenceVariableType)",
            "startLine": 153,
            "endLine": 155,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType instanceof InferenceVariableType)",
            "startLine": 156,
            "endLine": 158,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 17,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)actualType).registerEquivalentType(formalType);\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 17,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isConstraint())",
            "startLine": 156,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isConstraint())",
            "startLine": 159,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 156,
            "endLine": 161,
            "startColumn": 47,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 159,
            "endLine": 164,
            "startColumn": 47,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedLambdaConstraintType constraintType=actualType.asConstraintType();\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 13,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedLambdaConstraintType constraintType=actualType.asConstraintType();\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 13,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(constraintType.getBound() instanceof InferenceVariableType)",
            "startLine": 158,
            "endLine": 160,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(constraintType.getBound() instanceof InferenceVariableType)",
            "startLine": 161,
            "endLine": 163,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)constraintType.getBound()).registerEquivalentType(formalType);\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 17,
            "endColumn": 104
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "((InferenceVariableType)constraintType.getBound()).registerEquivalentType(formalType);\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 17,
            "endColumn": 104
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isPrimitive())",
            "startLine": 161,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isPrimitive())",
            "startLine": 164,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isPrimitive())",
            "startLine": 162,
            "endLine": 166,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isPrimitive())",
            "startLine": 165,
            "endLine": 170,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 162,
            "endLine": 164,
            "startColumn": 43,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 165,
            "endLine": 167,
            "startColumn": 43,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType())",
            "startLine": 167,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(actualType.isReferenceType())",
            "startLine": 171,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isReferenceType())",
            "startLine": 177,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isReferenceType())",
            "startLine": 182,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 177,
            "endLine": 184,
            "startColumn": 50,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 182,
            "endLine": 189,
            "startColumn": 50,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType formalTypeAsReference=formalType.asReferenceType();\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 13,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceType formalTypeAsReference=formalType.asReferenceType();\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalTypeAsReference.isJavaLangObject())",
            "startLine": 179,
            "endLine": 183,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalTypeAsReference.isJavaLangObject())",
            "startLine": 184,
            "endLine": 188,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 179,
            "endLine": 181,
            "startColumn": 59,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 184,
            "endLine": 186,
            "startColumn": 59,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 181,
            "endLine": 183,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 186,
            "endLine": 188,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(formalType.describe() + \" \" + actualType.describe());\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 17,
            "endColumn": 110
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(formalType.describe() + \" \" + actualType.describe());\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 17,
            "endColumn": 110
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 184,
            "endLine": 186,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 189,
            "endLine": 191,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(formalType.describe() + \" \" + actualType.describe());\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 13,
            "endColumn": 106
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(formalType.describe() + \" \" + actualType.describe());\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 13,
            "endColumn": 106
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isPrimitive())",
            "startLine": 168,
            "endLine": 176,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.isPrimitive())",
            "startLine": 172,
            "endLine": 181,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 174,
            "endLine": 176,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 179,
            "endLine": 181,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asPrimitive().getBoxTypeQName().equals(actualType.describe()))",
            "startLine": 169,
            "endLine": 173,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(formalType.asPrimitive().getBoxTypeQName().equals(actualType.describe()))",
            "startLine": 173,
            "endLine": 178,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 171,
            "endLine": 173,
            "startColumn": 24,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 176,
            "endLine": 178,
            "startColumn": 24,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 164,
            "endLine": 166,
            "startColumn": 20,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 167,
            "endLine": 170,
            "startColumn": 20,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 168,
            "endLine": 174,
            "startColumn": 43,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 172,
            "endLine": 179,
            "startColumn": 43,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 167,
            "endLine": 177,
            "startColumn": 50,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 171,
            "endLine": 182,
            "startColumn": 50,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 169,
            "endLine": 171,
            "startColumn": 95,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 173,
            "endLine": 176,
            "startColumn": 95,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 161,
            "endLine": 167,
            "startColumn": 46,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 164,
            "endLine": 171,
            "startColumn": 46,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType,objectProvider.byName(actualType.asPrimitive().getBoxTypeQName()));\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 17,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceTypeDeclaration resolvedTypedeclaration=typeSolver.solveType(actualType.asPrimitive().getBoxTypeQName());\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 14,
            "endColumn": 138
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(objectProvider.byName(formalType.asPrimitive().getBoxTypeQName()),actualType);\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 21,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ResolvedReferenceTypeDeclaration resolvedTypedeclaration=typeSolver.solveType(formalType.asPrimitive().getBoxTypeQName());\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 18,
            "endColumn": 142
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType,objectProvider.byName(actualType.asPrimitive().getBoxTypeQName()));\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 17,
            "endColumn": 119
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(formalType,new ReferenceTypeImpl(resolvedTypedeclaration));\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 17,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(objectProvider.byName(formalType.asPrimitive().getBoxTypeQName()),actualType);\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 21,
            "endColumn": 123
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "registerCorrespondance(new ReferenceTypeImpl(resolvedTypedeclaration),actualType);\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 18,
            "endColumn": 101
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "86f41353d40bfd3ef0669b863926626b6c4949bf",
      "url": "https://github.com/javaparser/javaparser/commit/86f41353d40bfd3ef0669b863926626b6c4949bf",
      "originalMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 83,
        "endLine": 91,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor",
        "type": "Method",
        "name": "visit",
        "filePath": "javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javaparsermodel/TypeExtractor.java",
        "startLine": 83,
        "endLine": 91,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof FieldDeclaration)",
            "startLine": 85,
            "endLine": 89,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof FieldDeclaration)",
            "startLine": 85,
            "endLine": 89,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof VariableDeclarationExpr)",
            "startLine": 87,
            "endLine": 89,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(demandParentNode(node) instanceof VariableDeclarationExpr)",
            "startLine": 87,
            "endLine": 89,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(demandParentNode(node).getClass().getCanonicalName());\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 103
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UnsupportedOperationException(demandParentNode(node).getClass().getCanonicalName());\n",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 103
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 65,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 65,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return facade.convertToUsageVariableType(node);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return facade.convertToUsage(node.getType());\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return facade.convertToUsageVariableType(node);\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return facade.convertToUsage(node.getType());\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}