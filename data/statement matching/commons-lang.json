{
  "results": [
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "11b1bc19ab360afce8a48167002bfcb747faeb68",
      "url": "https://github.com/apache/commons-lang/commit/11b1bc19ab360afce8a48167002bfcb747faeb68",
      "originalMethod": {
        "container": "org.apache.commons.lang3.ThreadUtils",
        "type": "Method",
        "name": "findThreadsByName",
        "filePath": "src/main/java/org/apache/commons/lang3/ThreadUtils.java",
        "startLine": 342,
        "endLine": 370,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.ThreadUtils",
        "type": "Method",
        "name": "findThreadsByName",
        "filePath": "src/main/java/org/apache/commons/lang3/ThreadUtils.java",
        "startLine": 434,
        "endLine": 453,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(threadName,\"threadName\");\n",
            "startLine": 357,
            "endLine": 357,
            "startColumn": 9,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(threadName,\"threadName\");\n",
            "startLine": 449,
            "endLine": 449,
            "startColumn": 9,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(threadGroupName,\"threadGroupName\");\n",
            "startLine": 358,
            "endLine": 358,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(threadGroupName,\"threadGroupName\");\n",
            "startLine": 450,
            "endLine": 450,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Collections.unmodifiableCollection(result);\n",
            "startLine": 369,
            "endLine": 369,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Collections.unmodifiableCollection(findThreadGroups(predicateThreadGroup(threadGroupName)).stream().flatMap(group -> findThreads(group,false,predicateThread(threadName)).stream()).collect(Collectors.toList()));\n",
            "startLine": 451,
            "endLine": 452,
            "startColumn": 9,
            "endColumn": 126
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Collection<ThreadGroup> threadGroups=findThreadGroups(new NamePredicate(threadGroupName));\n",
            "startLine": 360,
            "endLine": 360,
            "startColumn": 9,
            "endColumn": 107
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return findThreadGroups(getSystemThreadGroup(),true,predicate);\n",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "url": "https://github.com/apache/commons-lang/commit/2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "originalMethod": {
        "container": "org.apache.commons.lang3.reflect.FieldUtils",
        "type": "Method",
        "name": "getFieldsListWithAnnotation",
        "filePath": "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
        "startLine": 237,
        "endLine": 258,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.reflect.FieldUtils",
        "type": "Method",
        "name": "getFieldsListWithAnnotation",
        "filePath": "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
        "startLine": 238,
        "endLine": 252,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(annotationCls,\"annotationCls\");\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(annotationCls,\"annotationCls\");\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Field> allFields=getAllFieldsList(cls);\n",
            "startLine": 250,
            "endLine": 250,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return getAllFieldsList(cls).stream().filter(field -> field.getAnnotation(annotationCls) != null).collect(Collectors.toList());\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 9,
            "endColumn": 136
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "url": "https://github.com/apache/commons-lang/commit/2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "originalMethod": {
        "container": "org.apache.commons.lang3.reflect.MethodUtils",
        "type": "Method",
        "name": "getMethodsListWithAnnotation",
        "filePath": "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
        "startLine": 904,
        "endLine": 932,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.reflect.MethodUtils",
        "type": "Method",
        "name": "getMethodsListWithAnnotation",
        "filePath": "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
        "startLine": 904,
        "endLine": 932,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(cls,\"cls\");\n",
            "startLine": 922,
            "endLine": 922,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Objects.requireNonNull(cls,\"cls\");\n",
            "startLine": 922,
            "endLine": 922,
            "startColumn": 9,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(annotationCls,\"annotationCls\");\n",
            "startLine": 923,
            "endLine": 923,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Validate.notNull(annotationCls,\"annotationCls\");\n",
            "startLine": 923,
            "endLine": 923,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Class<?>> classes=searchSupers ? getAllSuperclassesAndInterfaces(cls) : new ArrayList<>();\n",
            "startLine": 924,
            "endLine": 924,
            "startColumn": 9,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Class<?>> classes=searchSupers ? getAllSuperclassesAndInterfaces(cls) : new ArrayList<>();\n",
            "startLine": 924,
            "endLine": 924,
            "startColumn": 9,
            "endColumn": 112
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "classes.add(0,cls);\n",
            "startLine": 925,
            "endLine": 925,
            "startColumn": 9,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "classes.add(0,cls);\n",
            "startLine": 925,
            "endLine": 925,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Method> annotatedMethods=new ArrayList<>();\n",
            "startLine": 926,
            "endLine": 926,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<Method> annotatedMethods=new ArrayList<>();\n",
            "startLine": 926,
            "endLine": 926,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return annotatedMethods;\n",
            "startLine": 931,
            "endLine": 931,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return annotatedMethods;\n",
            "startLine": 931,
            "endLine": 931,
            "startColumn": 9,
            "endColumn": 33
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Method[] methods=ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods();\n",
            "startLine": 928,
            "endLine": 928,
            "startColumn": 13,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Method[] methods=ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods();\n",
            "startLine": 928,
            "endLine": 928,
            "startColumn": 13,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Stream.of(methods).filter(method -> method.isAnnotationPresent(annotationCls)).forEachOrdered(annotatedMethods::add);\n",
            "startLine": 929,
            "endLine": 929,
            "startColumn": 13,
            "endColumn": 130
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Stream.of(methods).filter(method -> method.isAnnotationPresent(annotationCls)).forEachOrdered(annotatedMethods::add);\n",
            "startLine": 929,
            "endLine": 929,
            "startColumn": 13,
            "endColumn": 130
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final acls: classes)",
            "startLine": 927,
            "endLine": 930,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "classes.forEach(acls -> {\n  final Method[] methods=ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods();\n  Stream.of(methods).filter(method -> method.isAnnotationPresent(annotationCls)).forEachOrdered(annotatedMethods::add);\n}\n);\n",
            "startLine": 927,
            "endLine": 930,
            "startColumn": 9,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "url": "https://github.com/apache/commons-lang/commit/2c16052f94e9e551bb68a8529b7f0c4e336237b0",
      "originalMethod": {
        "container": "org.apache.commons.lang3.time.FastDateParser",
        "type": "Method",
        "name": "appendDisplayNames",
        "filePath": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "startLine": 480,
        "endLine": 504,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.time.FastDateParser",
        "type": "Method",
        "name": "appendDisplayNames",
        "filePath": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
        "startLine": 480,
        "endLine": 502,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Integer> values=new HashMap<>();\n",
            "startLine": 490,
            "endLine": 490,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Integer> values=new HashMap<>();\n",
            "startLine": 490,
            "endLine": 490,
            "startColumn": 9,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TreeSet<String> sorted=new TreeSet<>(LONGER_FIRST_LOWERCASE);\n",
            "startLine": 493,
            "endLine": 493,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final TreeSet<String> sorted=new TreeSet<>(LONGER_FIRST_LOWERCASE);\n",
            "startLine": 493,
            "endLine": 493,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return values;\n",
            "startLine": 503,
            "endLine": 503,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return values;\n",
            "startLine": 501,
            "endLine": 501,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Integer> displayNames=calendar.getDisplayNames(field,Calendar.ALL_STYLES,locale);\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 9,
            "endColumn": 112
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Map<String,Integer> displayNames=calendar.getDisplayNames(field,Calendar.ALL_STYLES,actualLocale);\n",
            "startLine": 492,
            "endLine": 492,
            "startColumn": 9,
            "endColumn": 118
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "locale=LocaleUtils.toLocale(locale);\n",
            "startLine": 491,
            "endLine": 491,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Locale actualLocale=LocaleUtils.toLocale(locale);\n",
            "startLine": 491,
            "endLine": 491,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String key=displayName.getKey().toLowerCase(locale);\n",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 13,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String keyLc=k.toLowerCase(actualLocale);\n",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 13,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "values.put(key,displayName.getValue());\n",
            "startLine": 497,
            "endLine": 497,
            "startColumn": 17,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "values.put(keyLc,v);\n",
            "startLine": 497,
            "endLine": 497,
            "startColumn": 17,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(sorted.add(key))",
            "startLine": 496,
            "endLine": 498,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(sorted.add(keyLc))",
            "startLine": 496,
            "endLine": 498,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 494,
            "endLine": 499,
            "startColumn": 86,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 494,
            "endLine": 499,
            "startColumn": 40,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(final symbol: sorted)",
            "startLine": 500,
            "endLine": 502,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sorted.forEach(symbol -> simpleQuote(regex,symbol).append('|'));\n",
            "startLine": 500,
            "endLine": 500,
            "startColumn": 9,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "dc146cae667976aebbcd283af0d63431e2338692",
      "url": "https://github.com/apache/commons-lang/commit/dc146cae667976aebbcd283af0d63431e2338692",
      "originalMethod": {
        "container": "org.apache.commons.lang3.StringUtilsTest",
        "type": "Method",
        "name": "testJoinWith",
        "filePath": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "startLine": 1374,
        "endLine": 1385,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.StringUtilsTest",
        "type": "Method",
        "name": "testJoinWith",
        "filePath": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "startLine": 1391,
        "endLine": 1403,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"ab\",StringUtils.joinWith(null,\"a\",\"b\"));\n",
            "startLine": 1384,
            "endLine": 1384,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"ab\",StringUtils.joinWith(null,\"a\",\"b\"));\n",
            "startLine": 1402,
            "endLine": 1402,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"null\",StringUtils.joinWith(\",\",NULL_TO_STRING_LIST));\n",
            "startLine": 1378,
            "endLine": 1378,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"null\",StringUtils.joinWith(delimiter,NULL_TO_STRING_LIST));\n",
            "startLine": 1396,
            "endLine": 1396,
            "startColumn": 9,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"\",StringUtils.joinWith(\",\"));\n",
            "startLine": 1376,
            "endLine": 1376,
            "startColumn": 9,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"\",StringUtils.joinWith(delimiter));\n",
            "startLine": 1394,
            "endLine": 1394,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"\",StringUtils.joinWith(\",\",(Object[])NULL_ARRAY_LIST));\n",
            "startLine": 1377,
            "endLine": 1377,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"\",StringUtils.joinWith(delimiter,(Object[])NULL_ARRAY_LIST));\n",
            "startLine": 1395,
            "endLine": 1395,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"a,b,c\",StringUtils.joinWith(\",\",\"a\",\"b\",\"c\"));\n",
            "startLine": 1380,
            "endLine": 1380,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(String.join(delimiter,\"a\",\"b\",\"c\"),StringUtils.joinWith(delimiter,\"a\",\"b\",\"c\"));\n",
            "startLine": 1398,
            "endLine": 1398,
            "startColumn": 9,
            "endColumn": 109
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\",a,\",StringUtils.joinWith(\",\",\"\",\"a\",\"\"));\n",
            "startLine": 1382,
            "endLine": 1382,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(String.join(delimiter,\"\",\"a\",\"\"),StringUtils.joinWith(delimiter,\"\",\"a\",\"\"));\n",
            "startLine": 1400,
            "endLine": 1400,
            "startColumn": 9,
            "endColumn": 105
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\",a,\",StringUtils.joinWith(\",\",null,\"a\",\"\"));\n",
            "startLine": 1381,
            "endLine": 1381,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(String.join(delimiter,\"\",\"a\",\"\"),StringUtils.joinWith(delimiter,null,\"a\",\"\"));\n",
            "startLine": 1399,
            "endLine": 1399,
            "startColumn": 9,
            "endColumn": 107
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "34a85e74360f32dcfd7938e3a3c606a4869ca7e7",
      "url": "https://github.com/apache/commons-lang/commit/34a85e74360f32dcfd7938e3a3c606a4869ca7e7",
      "originalMethod": {
        "container": "org.apache.commons.lang3.concurrent.UncheckedFutureImpl",
        "type": "Method",
        "name": "get",
        "filePath": "src/main/java/org/apache/commons/lang3/concurrent/UncheckedFutureImpl.java",
        "startLine": 47,
        "endLine": 56,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.concurrent.UncheckedFutureImpl",
        "type": "Method",
        "name": "get",
        "filePath": "src/main/java/org/apache/commons/lang3/concurrent/UncheckedFutureImpl.java",
        "startLine": 39,
        "endLine": 48,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 49,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 41,
            "endLine": 47,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 51,
            "endLine": 53,
            "startColumn": 48,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 43,
            "endLine": 45,
            "startColumn": 48,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedInterruptedException(e);\n",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedInterruptedException(e);\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 53,
            "endLine": 55,
            "startColumn": 46,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 45,
            "endLine": 47,
            "startColumn": 46,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedExecutionException(e);\n",
            "startLine": 54,
            "endLine": 54,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedExecutionException(e);\n",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get();\n",
            "startLine": 50,
            "endLine": 50,
            "startColumn": 13,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get();\n",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 9,
            "endColumn": 29
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/commons-lang.git",
      "sha1": "34a85e74360f32dcfd7938e3a3c606a4869ca7e7",
      "url": "https://github.com/apache/commons-lang/commit/34a85e74360f32dcfd7938e3a3c606a4869ca7e7",
      "originalMethod": {
        "container": "org.apache.commons.lang3.concurrent.UncheckedFutureImpl",
        "type": "Method",
        "name": "get",
        "filePath": "src/main/java/org/apache/commons/lang3/concurrent/UncheckedFutureImpl.java",
        "startLine": 58,
        "endLine": 69,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.commons.lang3.concurrent.UncheckedFutureImpl",
        "type": "Method",
        "name": "get",
        "filePath": "src/main/java/org/apache/commons/lang3/concurrent/UncheckedFutureImpl.java",
        "startLine": 50,
        "endLine": 61,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 60,
            "endLine": 68,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 52,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 62,
            "endLine": 64,
            "startColumn": 48,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 54,
            "endLine": 56,
            "startColumn": 48,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedInterruptedException(e);\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 13,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedInterruptedException(e);\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 13,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 64,
            "endLine": 66,
            "startColumn": 46,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 46,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedExecutionException(e);\n",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedExecutionException(e);\n",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 66,
            "endLine": 68,
            "startColumn": 44,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final e)",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 44,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedTimeoutException(e);\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 13,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new UncheckedTimeoutException(e);\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 13,
            "endColumn": 52
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get(timeout,unit);\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return future.get(timeout,unit);\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}