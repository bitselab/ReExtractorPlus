{
  "results": [
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.Main",
        "type": "Method",
        "name": "main",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
        "startLine": 99,
        "endLine": 158,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.Main",
        "type": "Method",
        "name": "main",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
        "startLine": 98,
        "endLine": 157,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 122,
            "endLine": 156,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 121,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ParseResult parseResult=commandLine.parseArgs(args);\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 13,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ParseResult parseResult=commandLine.parseArgs(args);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 13,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parseResult.isVersionHelpRequested())",
            "startLine": 124,
            "endLine": 133,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parseResult.isVersionHelpRequested())",
            "startLine": 123,
            "endLine": 132,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 124,
            "endLine": 126,
            "startColumn": 55,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 123,
            "endLine": 125,
            "startColumn": 55,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(getVersionString());\n",
            "startLine": 125,
            "endLine": 125,
            "startColumn": 17,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.out.println(getVersionString());\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 17,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(parseResult.isUsageHelpRequested())",
            "startLine": 127,
            "endLine": 133,
            "startColumn": 18,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(parseResult.isUsageHelpRequested())",
            "startLine": 126,
            "endLine": 132,
            "startColumn": 18,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 127,
            "endLine": 129,
            "startColumn": 58,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 126,
            "endLine": 128,
            "startColumn": 58,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.usage(System.out);\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 17,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.usage(System.out);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 17,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 130,
            "endLine": 133,
            "startColumn": 18,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 129,
            "endLine": 132,
            "startColumn": 18,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=execute(parseResult,cliOptions);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=execute(parseResult,cliOptions);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 17,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "errorCounter=exitStatus;\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 17,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "errorCounter=exitStatus;\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 17,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 135,
            "endLine": 140,
            "startColumn": 39,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 134,
            "endLine": 139,
            "startColumn": 39,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=EXIT_WITH_INVALID_USER_INPUT_CODE;\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 13,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=EXIT_WITH_INVALID_USER_INPUT_CODE;\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 13,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(ex.getMessage());\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 13,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(ex.getMessage());\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 13,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Usage: checkstyle [OPTIONS]... FILES...\");\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Usage: checkstyle [OPTIONS]... FILES...\");\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Try 'checkstyle --help' for more information.\");\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 13,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(\"Try 'checkstyle --help' for more information.\");\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 13,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 141,
            "endLine": 145,
            "startColumn": 40,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 140,
            "endLine": 144,
            "startColumn": 40,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 13,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "exitStatus=EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 13,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "errorCounter=1;\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "errorCounter=1;\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 13,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ex.printStackTrace();\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 13,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ex.printStackTrace();\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 13,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(errorCounter > 0)",
            "startLine": 148,
            "endLine": 155,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(errorCounter > 0)",
            "startLine": 147,
            "endLine": 154,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CliOptions cliOptions=new CliOptions();\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CliOptions cliOptions=new CliOptions();\n",
            "startLine": 113,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CommandLine commandLine=new CommandLine(cliOptions);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CommandLine commandLine=new CommandLine(cliOptions);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.setUsageHelpWidth(CliOptions.HELP_WIDTH);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.setUsageHelpWidth(CliOptions.HELP_WIDTH);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.setCaseInsensitiveEnumValuesAllowed(true);\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 9,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "commandLine.setCaseInsensitiveEnumValuesAllowed(true);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int exitStatus=0;\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int exitStatus=0;\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 9,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int errorCounter=0;\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int errorCounter=0;\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Runtime.getRuntime().exit(exitStatus);\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Runtime.getRuntime().exit(exitStatus);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(errorCounterViolation.getViolation());\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 17,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "System.err.println(errorCounterViolation.getMessage());\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 17,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 146,
            "endLine": 156,
            "startColumn": 17,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 145,
            "endLine": 155,
            "startColumn": 17,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation errorCounterViolation=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,ERROR_COUNTER,new String[]{String.valueOf(errorCounter)},null,Main.class,null);\n",
            "startLine": 149,
            "endLine": 151,
            "startColumn": 17,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage errorCounterViolation=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,Main.class,ERROR_COUNTER,String.valueOf(errorCounter));\n",
            "startLine": 148,
            "endLine": 150,
            "startColumn": 17,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.Main",
        "type": "Method",
        "name": "loadProperties",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
        "startLine": 425,
        "endLine": 449,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.Main",
        "type": "Method",
        "name": "loadProperties",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
        "startLine": 424,
        "endLine": 448,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream stream=Files.newInputStream(file.toPath()))",
            "startLine": 438,
            "endLine": 446,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try(InputStream stream=Files.newInputStream(file.toPath()))",
            "startLine": 437,
            "endLine": 445,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(stream);\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 13,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "properties.load(stream);\n",
            "startLine": 438,
            "endLine": 438,
            "startColumn": 13,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Properties properties=new Properties();\n",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 9,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Properties properties=new Properties();\n",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 9,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return ChainedPropertyUtil.getResolvedProperties(properties);\n",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 9,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return ChainedPropertyUtil.getResolvedProperties(properties);\n",
            "startLine": 447,
            "endLine": 447,
            "startColumn": 9,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(loadPropertiesExceptionMessage.getViolation(),ex);\n",
            "startLine": 445,
            "endLine": 445,
            "startColumn": 13,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(loadPropertiesExceptionMessage.getMessage(),ex);\n",
            "startLine": 444,
            "endLine": 444,
            "startColumn": 13,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final ex)",
            "startLine": 441,
            "endLine": 446,
            "startColumn": 38,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(final ex)",
            "startLine": 440,
            "endLine": 445,
            "startColumn": 38,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation loadPropertiesExceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,LOAD_PROPERTIES_EXCEPTION,new String[]{file.getAbsolutePath()},null,Main.class,null);\n",
            "startLine": 442,
            "endLine": 444,
            "startColumn": 13,
            "endColumn": 84
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage loadPropertiesExceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,Main.class,LOAD_PROPERTIES_EXCEPTION,file.getAbsolutePath());\n",
            "startLine": 441,
            "endLine": 443,
            "startColumn": 13,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactory",
        "type": "Method",
        "name": "createModule",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java",
        "startLine": 171,
        "endLine": 218,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactory",
        "type": "Method",
        "name": "createModule",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java",
        "startLine": 170,
        "endLine": 217,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!name.contains(PACKAGE_SEPARATOR))",
            "startLine": 186,
            "endLine": 196,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!name.contains(PACKAGE_SEPARATOR))",
            "startLine": 185,
            "endLine": 195,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createFromStandardCheckSet(name);\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 13,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createFromStandardCheckSet(name);\n",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 13,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 189,
            "endLine": 195,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 188,
            "endLine": 194,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(thirdPartyNameToFullModuleNames == null)",
            "startLine": 190,
            "endLine": 193,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(thirdPartyNameToFullModuleNames == null)",
            "startLine": 189,
            "endLine": 192,
            "startColumn": 17,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "thirdPartyNameToFullModuleNames=generateThirdPartyNameToFullModuleName(moduleClassLoader);\n",
            "startLine": 191,
            "endLine": 192,
            "startColumn": 21,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "thirdPartyNameToFullModuleNames=generateThirdPartyNameToFullModuleName(moduleClassLoader);\n",
            "startLine": 190,
            "endLine": 191,
            "startColumn": 21,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createObjectFromMap(name,thirdPartyNameToFullModuleNames);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 17,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createObjectFromMap(name,thirdPartyNameToFullModuleNames);\n",
            "startLine": 193,
            "endLine": 193,
            "startColumn": 17,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 197,
            "endLine": 199,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 196,
            "endLine": 198,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createObject(name);\n",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 13,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createObject(name);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 13,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES)",
            "startLine": 200,
            "endLine": 203,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES)",
            "startLine": 199,
            "endLine": 202,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 201,
            "endLine": 203,
            "startColumn": 89,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 200,
            "endLine": 202,
            "startColumn": 89,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createModuleByTryInEachPackage(name);\n",
            "startLine": 202,
            "endLine": 202,
            "startColumn": 13,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "instance=createModuleByTryInEachPackage(name);\n",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 13,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 204,
            "endLine": 216,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(instance == null)",
            "startLine": 203,
            "endLine": 215,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!name.contains(PACKAGE_SEPARATOR))",
            "startLine": 206,
            "endLine": 211,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!name.contains(PACKAGE_SEPARATOR))",
            "startLine": 205,
            "endLine": 210,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String nameCheck=name + CHECK_SUFFIX;\n",
            "startLine": 207,
            "endLine": 207,
            "startColumn": 17,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String nameCheck=name + CHECK_SUFFIX;\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 17,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "attemptedNames=joinPackageNamesWithClassName(name,packages) + STRING_SEPARATOR + nameCheck+ STRING_SEPARATOR+ joinPackageNamesWithClassName(nameCheck,packages);\n",
            "startLine": 208,
            "endLine": 210,
            "startColumn": 17,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "attemptedNames=joinPackageNamesWithClassName(name,packages) + STRING_SEPARATOR + nameCheck+ STRING_SEPARATOR+ joinPackageNamesWithClassName(nameCheck,packages);\n",
            "startLine": 207,
            "endLine": 209,
            "startColumn": 17,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object instance=null;\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 9,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Object instance=null;\n",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 9,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String attemptedNames=null;\n",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 13,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String attemptedNames=null;\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 13,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return instance;\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return instance;\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(exceptionMessage.getViolation());\n",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 13,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(exceptionMessage.getMessage());\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 13,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,new String[]{name,attemptedNames},null,getClass(),null);\n",
            "startLine": 212,
            "endLine": 214,
            "startColumn": 13,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,getClass(),UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,name,attemptedNames);\n",
            "startLine": 211,
            "endLine": 213,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactory",
        "type": "Method",
        "name": "createObjectFromFullModuleNames",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java",
        "startLine": 267,
        "endLine": 294,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactory",
        "type": "Method",
        "name": "createObjectFromFullModuleNames",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java",
        "startLine": 266,
        "endLine": 293,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(fullModuleNames.size() == 1)",
            "startLine": 281,
            "endLine": 292,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(fullModuleNames.size() == 1)",
            "startLine": 280,
            "endLine": 291,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 281,
            "endLine": 283,
            "startColumn": 42,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 280,
            "endLine": 282,
            "startColumn": 42,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "returnValue=createObject(fullModuleNames.iterator().next());\n",
            "startLine": 282,
            "endLine": 282,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "returnValue=createObject(fullModuleNames.iterator().next());\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Object returnValue;\n",
            "startLine": 280,
            "endLine": 280,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Object returnValue;\n",
            "startLine": 279,
            "endLine": 279,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String optionalNames=fullModuleNames.stream().sorted().collect(Collectors.joining(STRING_SEPARATOR));\n",
            "startLine": 285,
            "endLine": 287,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String optionalNames=fullModuleNames.stream().sorted().collect(Collectors.joining(STRING_SEPARATOR));\n",
            "startLine": 284,
            "endLine": 286,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return returnValue;\n",
            "startLine": 293,
            "endLine": 293,
            "startColumn": 9,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return returnValue;\n",
            "startLine": 292,
            "endLine": 292,
            "startColumn": 9,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(exceptionMessage.getViolation());\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 13,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new CheckstyleException(exceptionMessage.getMessage());\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 13,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 284,
            "endLine": 292,
            "startColumn": 14,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 283,
            "endLine": 291,
            "startColumn": 14,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,new String[]{name,optionalNames},null,getClass(),null);\n",
            "startLine": 288,
            "endLine": 290,
            "startColumn": 13,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,getClass(),AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,name,optionalNames);\n",
            "startLine": 287,
            "endLine": 289,
            "startColumn": 13,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.api.Violation",
        "type": "Method",
        "name": "getViolation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java",
        "startLine": 428,
        "endLine": 440,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.api.Violation",
        "type": "Method",
        "name": "getViolation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java",
        "startLine": 428,
        "endLine": 444,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(customMessage != null)",
            "startLine": 450,
            "endLine": 453,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(customMessage != null)",
            "startLine": 436,
            "endLine": 441,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 436,
            "endLine": 438,
            "startColumn": 32,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 439,
            "endLine": 441,
            "startColumn": 14,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "violation=new LocalizedMessage(bundle,sourceClass,key,args).getMessage();\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 13,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "violation=new LocalizedMessage(bundle,sourceClass,key,args).getMessage();\n",
            "startLine": 440,
            "endLine": 440,
            "startColumn": 13,
            "endColumn": 91
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 450,
            "endLine": 453,
            "startColumn": 36,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 436,
            "endLine": 438,
            "startColumn": 36,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 454,
            "endLine": 454,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final MessageFormat formatter=new MessageFormat(customMessage,Locale.ROOT);\n",
            "startLine": 451,
            "endLine": 451,
            "startColumn": 13,
            "endColumn": 91
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "violation=new MessageFormat(customMessage,Locale.ROOT).format(args);\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String violation=getCustomViolation();\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 9,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String violation;\n",
            "startLine": 434,
            "endLine": 434,
            "startColumn": 9,
            "endColumn": 32
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 439,
            "endLine": 439,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 443,
            "endLine": 443,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(violation == null)",
            "startLine": 436,
            "endLine": 438,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(customMessage != null)",
            "startLine": 436,
            "endLine": 441,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "violation=formatter.format(args);\n",
            "startLine": 452,
            "endLine": 452,
            "startColumn": 13,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "violation=new MessageFormat(customMessage,Locale.ROOT).format(args);\n",
            "startLine": 437,
            "endLine": 437,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.TranslationCheck",
        "type": "Method",
        "name": "validateUserSpecifiedLanguageCodes",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
        "startLine": 312,
        "endLine": 328,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.TranslationCheck",
        "type": "Method",
        "name": "validateUserSpecifiedLanguageCodes",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
        "startLine": 313,
        "endLine": 327,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(code: languageCodes)",
            "startLine": 319,
            "endLine": 327,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(code: languageCodes)",
            "startLine": 320,
            "endLine": 326,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!isValidLanguageCode(code))",
            "startLine": 320,
            "endLine": 326,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!isValidLanguageCode(code))",
            "startLine": 321,
            "endLine": 325,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(exceptionMessage);\n",
            "startLine": 325,
            "endLine": 325,
            "startColumn": 17,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(msg.getMessage());\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 17,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation msg=new Violation(1,TRANSLATION_BUNDLE,WRONG_LANGUAGE_CODE_KEY,new Object[]{code},getId(),getClass(),null);\n",
            "startLine": 321,
            "endLine": 322,
            "startColumn": 17,
            "endColumn": 98
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage msg=new LocalizedMessage(TRANSLATION_BUNDLE,getClass(),WRONG_LANGUAGE_CODE_KEY,code);\n",
            "startLine": 322,
            "endLine": 323,
            "startColumn": 17,
            "endColumn": 68
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testMissedHtmlTagParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 81,
        "endLine": 99,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testMissedHtmlTagParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 80,
        "endLine": 96,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(35,MSG_JAVADOC_MISSED_HTML_CLOSE,7,\"xyz\"));\n",
            "startLine": 83,
            "endLine": 85,
            "startColumn": 9,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(35,MSG_JAVADOC_MISSED_HTML_CLOSE,7,\"xyz\"));\n",
            "startLine": 82,
            "endLine": 84,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation for missed HTML tag \" + \"doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 95,
            "endLine": 98,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation for missed HTML tag \" + \"doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 92,
            "endLine": 95,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:35] \" + violation.getViolation();\n",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:35] \" + violation.getMessage();\n",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation violation=new Violation(35,\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",MSG_JAVADOC_MISSED_HTML_CLOSE,new Object[]{7,\"xyz\"},\"\",DetailNodeTreeStringPrinter.class,null);\n",
            "startLine": 86,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage violation=new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",DetailNodeTreeStringPrinter.class,MSG_JAVADOC_MISSED_HTML_CLOSE,7,\"xyz\");\n",
            "startLine": 85,
            "endLine": 90,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 101,
        "endLine": 119,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 98,
        "endLine": 114,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(10,MSG_JAVADOC_PARSE_RULE_ERROR,9,\"no viable alternative at input ' xyz'\",\"SOME_JAVADOC_ELEMENT\"));\n",
            "startLine": 103,
            "endLine": 106,
            "startColumn": 9,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(10,MSG_JAVADOC_PARSE_RULE_ERROR,9,\"no viable alternative at input ' xyz'\",\"SOME_JAVADOC_ELEMENT\"));\n",
            "startLine": 100,
            "endLine": 103,
            "startColumn": 9,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 116,
            "endLine": 118,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 111,
            "endLine": 113,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:10] \" + violation.getViolation();\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 9,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:10] \" + violation.getMessage();\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 9,
            "endColumn": 72
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation violation=new Violation(10,\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",MSG_JAVADOC_PARSE_RULE_ERROR,new Object[]{9,\"no viable alternative at input ' xyz'\",\"SOME_JAVADOC_ELEMENT\"},\"\",DetailNodeTreeStringPrinter.class,null);\n",
            "startLine": 107,
            "endLine": 114,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage violation=new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",DetailNodeTreeStringPrinter.class,MSG_JAVADOC_PARSE_RULE_ERROR,9,\"no viable alternative at input ' xyz'\",\"SOME_JAVADOC_ELEMENT\");\n",
            "startLine": 104,
            "endLine": 109,
            "startColumn": 9,
            "endColumn": 82
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testWrongSingletonParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 121,
        "endLine": 140,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest",
        "type": "Method",
        "name": "testWrongSingletonParseErrorMessage",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
        "startLine": 116,
        "endLine": 133,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(100,MSG_JAVADOC_WRONG_SINGLETON_TAG,9,\"tag\"));\n",
            "startLine": 123,
            "endLine": 126,
            "startColumn": 9,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String actual=TestUtil.invokeStaticMethod(DetailNodeTreeStringPrinter.class,\"getParseErrorMessage\",new ParseErrorMessage(100,MSG_JAVADOC_WRONG_SINGLETON_TAG,9,\"tag\"));\n",
            "startLine": 118,
            "endLine": 121,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation for void elements with close tag \" + \"doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 136,
            "endLine": 139,
            "startColumn": 9,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Javadoc parse error violation for void elements with close tag \" + \"doesn't meet expectations\").that(actual).isEqualTo(expected);\n",
            "startLine": 129,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 34
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:100] \" + violation.getViolation();\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String expected=\"[ERROR:100] \" + violation.getMessage();\n",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation violation=new Violation(100,\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",MSG_JAVADOC_WRONG_SINGLETON_TAG,new Object[]{9,\"tag\"},\"\",DetailNodeTreeStringPrinter.class,null);\n",
            "startLine": 127,
            "endLine": 134,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage violation=new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\",DetailNodeTreeStringPrinter.class,MSG_JAVADOC_WRONG_SINGLETON_TAG,9,\"tag\");\n",
            "startLine": 122,
            "endLine": 127,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testMakeCheckFromName",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 151,
        "endLine": 166,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testMakeCheckFromName",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 151,
        "endLine": 166,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 154,
            "endLine": 165,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 154,
            "endLine": 165,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "factory.createModule(name);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 13,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "factory.createModule(name);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 13,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"com.puppycrawl.tools.checkstyle.checks.naming.ConstantName\";\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"com.puppycrawl.tools.checkstyle.checks.naming.ConstantName\";\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 158,
            "endLine": 165,
            "startColumn": 40,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 158,
            "endLine": 165,
            "startColumn": 40,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getViolation());\n",
            "startLine": 162,
            "endLine": 164,
            "startColumn": 13,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getMessage());\n",
            "startLine": 162,
            "endLine": 164,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,new String[]{name,null},null,factory.getClass(),null);\n",
            "startLine": 159,
            "endLine": 161,
            "startColumn": 13,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,factory.getClass(),UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,name,null);\n",
            "startLine": 159,
            "endLine": 161,
            "startColumn": 13,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateModuleWithNonExistName",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 168,
        "endLine": 188,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateModuleWithNonExistName",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 168,
        "endLine": 188,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(name: names)",
            "startLine": 171,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(name: names)",
            "startLine": 171,
            "endLine": 187,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 172,
            "endLine": 186,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 172,
            "endLine": 186,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "factory.createModule(name);\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 17,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "factory.createModule(name);\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 17,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 17,
            "endColumn": 67
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 17,
            "endColumn": 67
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String[] names={\"NonExistClassOne\",\"NonExistClassTwo\"};\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 9,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String[] names={\"NonExistClassOne\",\"NonExistClassTwo\"};\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 9,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String attemptedNames=BASE_PACKAGE + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ name+ CHECK_SUFFIX+ STRING_SEPARATOR+ BASE_PACKAGE+ PACKAGE_SEPARATOR+ name+ CHECK_SUFFIX;\n",
            "startLine": 177,
            "endLine": 179,
            "startColumn": 17,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String attemptedNames=BASE_PACKAGE + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ name+ CHECK_SUFFIX+ STRING_SEPARATOR+ BASE_PACKAGE+ PACKAGE_SEPARATOR+ name+ CHECK_SUFFIX;\n",
            "startLine": 177,
            "endLine": 179,
            "startColumn": 17,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 176,
            "endLine": 186,
            "startColumn": 44,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 176,
            "endLine": 186,
            "startColumn": 44,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getViolation());\n",
            "startLine": 183,
            "endLine": 185,
            "startColumn": 17,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getMessage());\n",
            "startLine": 183,
            "endLine": 185,
            "startColumn": 17,
            "endColumn": 63
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,new String[]{name,attemptedNames},null,factory.getClass(),null);\n",
            "startLine": 180,
            "endLine": 182,
            "startColumn": 17,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,factory.getClass(),UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,name,attemptedNames);\n",
            "startLine": 180,
            "endLine": 182,
            "startColumn": 17,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateObjectFromFullModuleNamesWithAmbiguousException",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 238,
        "endLine": 260,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateObjectFromFullModuleNamesWithAmbiguousException",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 238,
        "endLine": 260,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 246,
            "endLine": 259,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 246,
            "endLine": 259,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "objectFactory.createModule(name);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "objectFactory.createModule(name);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 13,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String barPackage=BASE_PACKAGE + \".packageobjectfactory.bar\";\n",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String barPackage=BASE_PACKAGE + \".packageobjectfactory.bar\";\n",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String fooPackage=BASE_PACKAGE + \".packageobjectfactory.foo\";\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 9,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String fooPackage=BASE_PACKAGE + \".packageobjectfactory.foo\";\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 9,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n",
            "startLine": 242,
            "endLine": 242,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PackageObjectFactory objectFactory=new PackageObjectFactory(new LinkedHashSet<>(Arrays.asList(barPackage,fooPackage)),classLoader);\n",
            "startLine": 243,
            "endLine": 244,
            "startColumn": 9,
            "endColumn": 90
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PackageObjectFactory objectFactory=new PackageObjectFactory(new LinkedHashSet<>(Arrays.asList(barPackage,fooPackage)),classLoader);\n",
            "startLine": 243,
            "endLine": 244,
            "startColumn": 9,
            "endColumn": 90
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"FooCheck\";\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"FooCheck\";\n",
            "startLine": 245,
            "endLine": 245,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String optionalNames=barPackage + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ fooPackage+ PACKAGE_SEPARATOR+ name;\n",
            "startLine": 251,
            "endLine": 252,
            "startColumn": 13,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String optionalNames=barPackage + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ fooPackage+ PACKAGE_SEPARATOR+ name;\n",
            "startLine": 251,
            "endLine": 252,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getViolation());\n",
            "startLine": 256,
            "endLine": 258,
            "startColumn": 13,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getMessage());\n",
            "startLine": 256,
            "endLine": 258,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 250,
            "endLine": 259,
            "startColumn": 40,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 250,
            "endLine": 259,
            "startColumn": 40,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,new String[]{name,optionalNames},null,getClass(),null);\n",
            "startLine": 253,
            "endLine": 255,
            "startColumn": 13,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,getClass(),AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,name,optionalNames);\n",
            "startLine": 253,
            "endLine": 255,
            "startColumn": 13,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "url": "https://github.com/checkstyle/checkstyle/commit/a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateObjectFromFullModuleNamesWithCantInstantiateException",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 262,
        "endLine": 288,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest",
        "type": "Method",
        "name": "testCreateObjectFromFullModuleNamesWithCantInstantiateException",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
        "startLine": 262,
        "endLine": 288,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 271,
            "endLine": 287,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 271,
            "endLine": 287,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "objectFactory.createModule(name);\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "objectFactory.createModule(name);\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 13,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 13,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Exception is expected\").fail();\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 13,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String package1=BASE_PACKAGE + \".wrong1\";\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String package1=BASE_PACKAGE + \".wrong1\";\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String package2=BASE_PACKAGE + \".wrong2\";\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String package2=BASE_PACKAGE + \".wrong2\";\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PackageObjectFactory objectFactory=new PackageObjectFactory(new LinkedHashSet<>(Arrays.asList(package1,package2)),classLoader);\n",
            "startLine": 267,
            "endLine": 268,
            "startColumn": 9,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final PackageObjectFactory objectFactory=new PackageObjectFactory(new LinkedHashSet<>(Arrays.asList(package1,package2)),classLoader);\n",
            "startLine": 267,
            "endLine": 268,
            "startColumn": 9,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"FooCheck\";\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String name=\"FooCheck\";\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String checkName=name + CHECK_SUFFIX;\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String checkName=name + CHECK_SUFFIX;\n",
            "startLine": 270,
            "endLine": 270,
            "startColumn": 9,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String attemptedNames=package1 + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ package2+ PACKAGE_SEPARATOR+ name+ STRING_SEPARATOR+ checkName+ STRING_SEPARATOR+ package1+ PACKAGE_SEPARATOR+ checkName+ STRING_SEPARATOR+ package2+ PACKAGE_SEPARATOR+ checkName;\n",
            "startLine": 276,
            "endLine": 280,
            "startColumn": 13,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String attemptedNames=package1 + PACKAGE_SEPARATOR + name+ STRING_SEPARATOR+ package2+ PACKAGE_SEPARATOR+ name+ STRING_SEPARATOR+ checkName+ STRING_SEPARATOR+ package1+ PACKAGE_SEPARATOR+ checkName+ STRING_SEPARATOR+ package2+ PACKAGE_SEPARATOR+ checkName;\n",
            "startLine": 276,
            "endLine": 280,
            "startColumn": 13,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 275,
            "endLine": 287,
            "startColumn": 40,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 275,
            "endLine": 287,
            "startColumn": 40,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getViolation());\n",
            "startLine": 284,
            "endLine": 286,
            "startColumn": 13,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception message\").that(ex.getMessage()).isEqualTo(exceptionMessage.getMessage());\n",
            "startLine": 284,
            "endLine": 286,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Violation exceptionMessage=new Violation(1,Definitions.CHECKSTYLE_BUNDLE,UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,new String[]{name,attemptedNames},null,getClass(),null);\n",
            "startLine": 281,
            "endLine": 283,
            "startColumn": 13,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final LocalizedMessage exceptionMessage=new LocalizedMessage(Definitions.CHECKSTYLE_BUNDLE,getClass(),UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,name,attemptedNames);\n",
            "startLine": 281,
            "endLine": 283,
            "startColumn": 13,
            "endColumn": 84
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "3eca7e0e25a9500d86ea7c28df4917b77717ae36",
      "url": "https://github.com/checkstyle/checkstyle/commit/3eca7e0e25a9500d86ea7c28df4917b77717ae36",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.api.Violation",
        "type": "Method",
        "name": "getViolation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java",
        "startLine": 469,
        "endLine": 497,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.api.Violation",
        "type": "Method",
        "name": "getViolation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java",
        "startLine": 445,
        "endLine": 457,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String violation=getCustomViolation();\n",
            "startLine": 475,
            "endLine": 475,
            "startColumn": 9,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String violation=getCustomViolation();\n",
            "startLine": 451,
            "endLine": 451,
            "startColumn": 9,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return violation;\n",
            "startLine": 456,
            "endLine": 456,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(violation == null)",
            "startLine": 477,
            "endLine": 495,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(violation == null)",
            "startLine": 453,
            "endLine": 455,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "3eca7e0e25a9500d86ea7c28df4917b77717ae36",
      "url": "https://github.com/checkstyle/checkstyle/commit/3eca7e0e25a9500d86ea7c28df4917b77717ae36",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DefaultLoggerTest",
        "type": "Method",
        "name": "testCtor",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
        "startLine": 61,
        "endLine": 83,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.DefaultLoggerTest",
        "type": "Method",
        "name": "testCtor",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
        "startLine": 53,
        "endLine": 70,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final OutputStream infoStream=new ByteArrayOutputStream();\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final OutputStream infoStream=new ByteArrayOutputStream();\n",
            "startLine": 55,
            "endLine": 55,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ByteArrayOutputStream errorStream=new ByteArrayOutputStream();\n",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 9,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final ByteArrayOutputStream errorStream=new ByteArrayOutputStream();\n",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 9,
            "endColumn": 79
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DefaultLogger dl=new DefaultLogger(infoStream,OutputStreamOptions.CLOSE,errorStream,OutputStreamOptions.CLOSE);\n",
            "startLine": 65,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DefaultLogger dl=new DefaultLogger(infoStream,OutputStreamOptions.CLOSE,errorStream,OutputStreamOptions.CLOSE);\n",
            "startLine": 57,
            "endLine": 58,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "dl.addException(new AuditEvent(5000,\"myfile\"),new IllegalStateException(\"upsss\"));\n",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "dl.addException(new AuditEvent(5000,\"myfile\"),new IllegalStateException(\"upsss\"));\n",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "dl.auditFinished(new AuditEvent(6000,\"myfile\"));\n",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "dl.auditFinished(new AuditEvent(6000,\"myfile\"));\n",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String output=errorStream.toString(StandardCharsets.UTF_8);\n",
            "startLine": 69,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String output=errorStream.toString(StandardCharsets.UTF_8);\n",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 9,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception class\").that(output).contains(\"java.lang.IllegalStateException: upsss\");\n",
            "startLine": 80,
            "endLine": 82,
            "startColumn": 9,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception class\").that(output).contains(\"java.lang.IllegalStateException: upsss\");\n",
            "startLine": 67,
            "endLine": 69,
            "startColumn": 9,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception\").that(output).contains(returnValue.toString());\n",
            "startLine": 77,
            "endLine": 79,
            "startColumn": 9,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Invalid exception\").that(output).contains(message);\n",
            "startLine": 64,
            "endLine": 66,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final Class<?> message=getDefaultLoggerClass().getDeclaredClasses()[0];\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 9,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String message=addExceptionMessage.getMessage();\n",
            "startLine": 63,
            "endLine": 63,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": false
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "c590b354047568e41c93cffdc113e1973b333eba",
      "url": "https://github.com/checkstyle/checkstyle/commit/c590b354047568e41c93cffdc113e1973b333eba",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTaskTest",
        "type": "Method",
        "name": "testLoggedTime",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java",
        "startLine": 806,
        "endLine": 824,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTaskTest",
        "type": "Method",
        "name": "testLoggedTime",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java",
        "startLine": 807,
        "endLine": 822,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CheckstyleAntTaskLogStub antTask=new CheckstyleAntTaskLogStub();\n",
            "startLine": 808,
            "endLine": 808,
            "startColumn": 9,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final CheckstyleAntTaskLogStub antTask=new CheckstyleAntTaskLogStub();\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 9,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setConfig(getPath(CONFIG_FILE));\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 9,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setConfig(getPath(CONFIG_FILE));\n",
            "startLine": 810,
            "endLine": 810,
            "startColumn": 9,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setProject(new Project());\n",
            "startLine": 810,
            "endLine": 810,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setProject(new Project());\n",
            "startLine": 811,
            "endLine": 811,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setFile(new File(getPath(FLAWLESS_INPUT)));\n",
            "startLine": 811,
            "endLine": 811,
            "startColumn": 9,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.setFile(new File(getPath(FLAWLESS_INPUT)));\n",
            "startLine": 812,
            "endLine": 812,
            "startColumn": 9,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long startTime=System.currentTimeMillis();\n",
            "startLine": 812,
            "endLine": 812,
            "startColumn": 9,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long startTime=System.currentTimeMillis();\n",
            "startLine": 813,
            "endLine": 813,
            "startColumn": 9,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.execute();\n",
            "startLine": 813,
            "endLine": 813,
            "startColumn": 9,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "antTask.execute();\n",
            "startLine": 814,
            "endLine": 814,
            "startColumn": 9,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long endTime=System.currentTimeMillis();\n",
            "startLine": 814,
            "endLine": 814,
            "startColumn": 9,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long endTime=System.currentTimeMillis();\n",
            "startLine": 815,
            "endLine": 815,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<MessageLevelPair> loggedMessages=antTask.getLoggedMessages();\n",
            "startLine": 815,
            "endLine": 815,
            "startColumn": 9,
            "endColumn": 83
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final List<MessageLevelPair> loggedMessages=antTask.getLoggedMessages();\n",
            "startLine": 817,
            "endLine": 817,
            "startColumn": 9,
            "endColumn": 83
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long loggedTimeInExecute=getNumberFromLine(loggedMessages.get(loggedMessages.size() - 1).getMsg());\n",
            "startLine": 816,
            "endLine": 817,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final long actualTime=getNumberFromLine(optionalMessageLevelPair.get().getMsg());\n",
            "startLine": 835,
            "endLine": 835,
            "startColumn": 9,
            "endColumn": 92
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Logged time inside method cannot be more than \" + \"logged time outside the method\").that(loggedTimeInExecute).isAtMost(endTime - startTime);\n",
            "startLine": 819,
            "endLine": 822,
            "startColumn": 9,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertWithMessage(\"Logged time in '\" + expectedMsg + \"' \" + \"must be less than the testing time\").that(actualTime).isAtMost(testingTime);\n",
            "startLine": 837,
            "endLine": 840,
            "startColumn": 9,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "077ee041204a186ca08e51e115462d9b58e9b2dd",
      "url": "https://github.com/checkstyle/checkstyle/commit/077ee041204a186ca08e51e115462d9b58e9b2dd",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck",
        "type": "Method",
        "name": "checkIfSemicolonIsInDifferentLineThanPrevious",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java",
        "startLine": 254,
        "endLine": 277,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck",
        "type": "Method",
        "name": "checkIfSemicolonIsInDifferentLineThanPrevious",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java",
        "startLine": 253,
        "endLine": 277,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isInLambda)",
            "startLine": 267,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isInLambda)",
            "startLine": 267,
            "endLine": 276,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 267,
            "endLine": 269,
            "startColumn": 25,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 267,
            "endLine": 269,
            "startColumn": 25,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkLambda(ast,currentStatement);\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 13,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkLambda(ast,currentStatement);\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 13,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isResource(ast.getParent()))",
            "startLine": 270,
            "endLine": 276,
            "startColumn": 14,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isResource(ast.getParent()))",
            "startLine": 270,
            "endLine": 276,
            "startColumn": 14,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 270,
            "endLine": 272,
            "startColumn": 47,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 270,
            "endLine": 272,
            "startColumn": 47,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "checkResourceVariable(ast);\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 13,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "checkResourceVariable(ast);\n",
            "startLine": 271,
            "endLine": 271,
            "startColumn": 13,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!inForHeader && isOnTheSameLine(currentStatement,lastStatementEnd,forStatementEnd,lambdaStatementEnd))",
            "startLine": 273,
            "endLine": 276,
            "startColumn": 14,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!inForHeader && isOnTheSameLine(currentStatement,lastStatementEnd,forStatementEnd,lambdaStatementEnd))",
            "startLine": 273,
            "endLine": 276,
            "startColumn": 14,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 274,
            "endLine": 276,
            "startColumn": 55,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 274,
            "endLine": 276,
            "startColumn": 55,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "log(ast,MSG_KEY);\n",
            "startLine": 275,
            "endLine": 275,
            "startColumn": 13,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "log(ast,MSG_KEY);\n",
            "startLine": 275,
            "endLine": 275,
            "startColumn": 13,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 264,
            "endLine": 266,
            "startColumn": 81,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 264,
            "endLine": 266,
            "startColumn": 38,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "currentStatement=ast.getPreviousSibling();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 13,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "currentStatement=ast.getPreviousSibling();\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 13,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DetailAST currentStatement=ast;\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 9,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DetailAST currentStatement=ast;\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 9,
            "endColumn": 42
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean hasResourcesPrevSibling=currentStatement.getPreviousSibling() != null && currentStatement.getPreviousSibling().getType() == TokenTypes.RESOURCES;\n",
            "startLine": 261,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 100
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final boolean isUnnecessarySemicolon=previousSibling == null || previousSibling.getType() == TokenTypes.RESOURCES || ast.getParent().getType() == TokenTypes.COMPILATION_UNIT;\n",
            "startLine": 261,
            "endLine": 263,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST prevSibling=ast.getPreviousSibling();\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST previousSibling=ast.getPreviousSibling();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "2282a7eca66073d838ace295d1d6874818323fab",
      "url": "https://github.com/checkstyle/checkstyle/commit/2282a7eca66073d838ace295d1d6874818323fab",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.utils.AnnotationUtil",
        "type": "Method",
        "name": "containsAnnotation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
        "startLine": 98,
        "endLine": 138,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.utils.AnnotationUtil",
        "type": "Method",
        "name": "containsAnnotation",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
        "startLine": 98,
        "endLine": 133,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(ast == null)",
            "startLine": 114,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(ast == null)",
            "startLine": 114,
            "endLine": 116,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(THE_AST_IS_NULL);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 13,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(THE_AST_IS_NULL);\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 13,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(annotations == null)",
            "startLine": 118,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(annotations == null)",
            "startLine": 118,
            "endLine": 120,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"annotations cannot be null\");\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 13,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new IllegalArgumentException(\"annotations cannot be null\");\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 13,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!annotations.isEmpty())",
            "startLine": 124,
            "endLine": 135,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!annotations.isEmpty())",
            "startLine": 124,
            "endLine": 130,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(identNode == null)",
            "startLine": 127,
            "endLine": 130,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(identNode == null)",
            "startLine": 146,
            "endLine": 152,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean result=false;\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "boolean result=false;\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 9,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=firstMatchingAnnotation != null;\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 13,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=firstMatchingAnnotation != null;\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 13,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return result;\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST firstMatchingAnnotation=findFirstAnnotation(ast,annotationNode -> {\n  DetailAST identNode=annotationNode.findFirstToken(TokenTypes.IDENT);\n  if (identNode == null) {\n    identNode=annotationNode.findFirstToken(TokenTypes.DOT).findFirstToken(TokenTypes.IDENT);\n  }\n  return annotations.contains(identNode.getText());\n}\n);\n",
            "startLine": 125,
            "endLine": 133,
            "startColumn": 13,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST firstMatchingAnnotation=findFirstAnnotation(ast,annotationNode -> {\n  final String annotationFullIdent=getAnnotationFullIdent(annotationNode);\n  return annotations.contains(annotationFullIdent);\n}\n);\n",
            "startLine": 125,
            "endLine": 128,
            "startColumn": 13,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DetailAST identNode=annotationNode.findFirstToken(TokenTypes.IDENT);\n",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 17,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST identNode=annotationNode.findFirstToken(TokenTypes.IDENT);\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 9,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return annotations.contains(identNode.getText());\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 17,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return annotations.contains(annotationFullIdent);\n",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 17,
            "endColumn": 66
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 127,
            "endLine": 130,
            "startColumn": 40,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 150,
            "endLine": 152,
            "startColumn": 14,
            "endColumn": 10
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "identNode=annotationNode.findFirstToken(TokenTypes.DOT).findFirstToken(TokenTypes.IDENT);\n",
            "startLine": 128,
            "endLine": 129,
            "startColumn": 21,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final DetailAST dotNode=annotationNode.findFirstToken(TokenTypes.DOT);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 13,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 127,
            "endLine": 130,
            "startColumn": 40,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 146,
            "endLine": 149,
            "startColumn": 32,
            "endColumn": 10
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "2282a7eca66073d838ace295d1d6874818323fab",
      "url": "https://github.com/checkstyle/checkstyle/commit/2282a7eca66073d838ace295d1d6874818323fab",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.javadoc.MissingJavadocMethodCheckTest",
        "type": "Method",
        "name": "allowedAnnotationsTest",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheckTest.java",
        "startLine": 83,
        "endLine": 88,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.javadoc.MissingJavadocMethodCheckTest",
        "type": "Method",
        "name": "allowedAnnotationsTest",
        "filePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheckTest.java",
        "startLine": 83,
        "endLine": 90,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "verifyWithInlineConfigParser(getPath(\"InputMissingJavadocMethodAllowedAnnotations.java\"),expected);\n",
            "startLine": 86,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 88
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "verifyWithInlineConfigParser(getPath(\"InputMissingJavadocMethodAllowedAnnotations.java\"),expected);\n",
            "startLine": 88,
            "endLine": 89,
            "startColumn": 9,
            "endColumn": 88
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String[] expected=CommonUtil.EMPTY_STRING_ARRAY;\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final String[] expected={\"32:5: \" + getCheckMessage(MSG_JAVADOC_MISSING)};\n",
            "startLine": 85,
            "endLine": 87,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/checkstyle/checkstyle.git",
      "sha1": "cd28d8c7ebbe51464d96c05db33e7a1f1b3ad86a",
      "url": "https://github.com/checkstyle/checkstyle/commit/cd28d8c7ebbe51464d96c05db33e7a1f1b3ad86a",
      "originalMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck",
        "type": "Method",
        "name": "beginTree",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
        "startLine": 144,
        "endLine": 149,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck",
        "type": "Method",
        "name": "beginTree",
        "filePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
        "startLine": 153,
        "endLine": 159,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "packageName=\"\";\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "packageName=\"\";\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 9,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "classes=new ArrayDeque<>();\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 9,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "typeDeclarations=new ArrayDeque<>();\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "innerClasses=new HashMap<>();\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "anonInnerClassToOuterTypeDecl=new HashMap<>();\n",
            "startLine": 157,
            "endLine": 157,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "innerClasses=new HashMap<>();\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 9,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "innerClasses=new LinkedHashMap<>();\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 9,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}