{
  "results": [
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "addBytesTransferred",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClientThrottlingAnalyzer.java",
        "startLine": 98,
        "endLine": 113,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "addBytesTransferred",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClientThrottlingAnalyzer.java",
        "startLine": 138,
        "endLine": 154,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(isFailedOperation)",
            "startLine": 106,
            "endLine": 112,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(isFailedOperation)",
            "startLine": 146,
            "endLine": 152,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsOperationMetrics metrics=blobMetrics.get();\n",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsOperationMetrics metrics=blobMetrics.get();\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 28,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 146,
            "endLine": 149,
            "startColumn": 28,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 109,
            "endLine": 112,
            "startColumn": 12,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 149,
            "endLine": 152,
            "startColumn": 12,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.operationsFailed.incrementAndGet();\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 7,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.incrementOperationsFailed();\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 7,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.operationsSuccessful.incrementAndGet();\n",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.incrementOperationsSuccessful();\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 7,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.bytesFailed.addAndGet(count);\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 7,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.addBytesFailed(count);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 7,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.bytesSuccessful.addAndGet(count);\n",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.addBytesSuccessful(count);\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 7,
            "endColumn": 41
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsRestOperation",
        "type": "Method",
        "name": "executeHttpOperation",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
        "startLine": 237,
        "endLine": 332,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsRestOperation",
        "type": "Method",
        "name": "executeHttpOperation",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
        "startLine": 240,
        "endLine": 335,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 245,
            "endLine": 275,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 249,
            "endLine": 279,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation=new AbfsHttpOperation(url,method,requestHeaders);\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 7,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation=new AbfsHttpOperation(url,method,requestHeaders);\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 7,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.CONNECTIONS_MADE,1);\n",
            "startLine": 248,
            "endLine": 248,
            "startColumn": 7,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.CONNECTIONS_MADE,1);\n",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 7,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "tracingContext.constructHeader(httpOperation);\n",
            "startLine": 249,
            "endLine": 249,
            "startColumn": 7,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "tracingContext.constructHeader(httpOperation);\n",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 7,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(client.getAuthType())",
            "startLine": 251,
            "endLine": 270,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Switch Statement",
            "expression": "switch(client.getAuthType())",
            "startLine": 255,
            "endLine": 274,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case Custom:",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 9,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case Custom:",
            "startLine": 256,
            "endLine": 256,
            "startColumn": 9,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case OAuth:",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 9,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case OAuth:",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 9,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Authenticating request with OAuth2 access token\");\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 11,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Authenticating request with OAuth2 access token\");\n",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 11,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,client.getAccessToken());\n",
            "startLine": 255,
            "endLine": 256,
            "startColumn": 11,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,client.getAccessToken());\n",
            "startLine": 259,
            "endLine": 260,
            "startColumn": 11,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 11,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 11,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case SAS:",
            "startLine": 258,
            "endLine": 258,
            "startColumn": 9,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case SAS:",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.setMaskForSAS();\n",
            "startLine": 260,
            "endLine": 260,
            "startColumn": 11,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.setMaskForSAS();\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 11,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 11,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 11,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Switch Case",
            "expression": "case SharedKey:",
            "startLine": 262,
            "endLine": 262,
            "startColumn": 9,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Switch Case",
            "expression": "case SharedKey:",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 9,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Signing request with shared key\");\n",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 11,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Signing request with shared key\");\n",
            "startLine": 268,
            "endLine": 268,
            "startColumn": 11,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "client.getSharedKeyCredentials().signRequest(httpOperation.getConnection(),hasRequestBody ? bufferLength : 0);\n",
            "startLine": 266,
            "endLine": 268,
            "startColumn": 11,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "client.getSharedKeyCredentials().signRequest(httpOperation.getConnection(),hasRequestBody ? bufferLength : 0);\n",
            "startLine": 270,
            "endLine": 272,
            "startColumn": 11,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 269,
            "endLine": 269,
            "startColumn": 11,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Break Statement",
            "expression": "break;\n",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 11,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 271,
            "endLine": 275,
            "startColumn": 29,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 275,
            "endLine": 279,
            "startColumn": 29,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Auth failure: {}, {}\",method,url);\n",
            "startLine": 272,
            "endLine": 272,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"Auth failure: {}, {}\",method,url);\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 7,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AbfsRestOperationException(-1,null,\"Auth failure: \" + e.getMessage(),e);\n",
            "startLine": 273,
            "endLine": 274,
            "startColumn": 7,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new AbfsRestOperationException(-1,null,\"Auth failure: \" + e.getMessage(),e);\n",
            "startLine": 277,
            "endLine": 278,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 277,
            "endLine": 321,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 281,
            "endLine": 324,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 300,
            "endLine": 309,
            "startColumn": 39,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 303,
            "endLine": 312,
            "startColumn": 39,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String hostname=null;\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 7,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String hostname=null;\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "hostname=httpOperation.getHost();\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 7,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "hostname=httpOperation.getHost();\n",
            "startLine": 305,
            "endLine": 305,
            "startColumn": 7,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Unknown host name: {}. Retrying to resolve the host name...\",hostname);\n",
            "startLine": 303,
            "endLine": 304,
            "startColumn": 7,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Unknown host name: {}. Retrying to resolve the host name...\",hostname);\n",
            "startLine": 306,
            "endLine": 307,
            "startColumn": 7,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!client.getRetryPolicy().shouldRetry(retryCount,-1))",
            "startLine": 305,
            "endLine": 307,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!client.getRetryPolicy().shouldRetry(retryCount,-1))",
            "startLine": 308,
            "endLine": 310,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new InvalidAbfsRestOperationException(ex);\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 9,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new InvalidAbfsRestOperationException(ex);\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 7,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 7,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 309,
            "endLine": 319,
            "startColumn": 30,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 312,
            "endLine": 322,
            "startColumn": 30,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 310,
            "endLine": 312,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(LOG.isDebugEnabled())",
            "startLine": 313,
            "endLine": 315,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"HttpRequestFailure: {}, {}\",httpOperation,ex);\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"HttpRequestFailure: {}, {}\",httpOperation,ex);\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!client.getRetryPolicy().shouldRetry(retryCount,-1))",
            "startLine": 314,
            "endLine": 316,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!client.getRetryPolicy().shouldRetry(retryCount,-1))",
            "startLine": 317,
            "endLine": 319,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new InvalidAbfsRestOperationException(ex);\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 9,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new InvalidAbfsRestOperationException(ex);\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 7,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 7,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(hasRequestBody)",
            "startLine": 283,
            "endLine": 288,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(hasRequestBody)",
            "startLine": 286,
            "endLine": 291,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.sendRequest(buffer,bufferOffset,bufferLength);\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 9,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.sendRequest(buffer,bufferOffset,bufferLength);\n",
            "startLine": 288,
            "endLine": 288,
            "startColumn": 9,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.SEND_REQUESTS,1);\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.SEND_REQUESTS,1);\n",
            "startLine": 289,
            "endLine": 289,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.BYTES_SENT,bufferLength);\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.BYTES_SENT,bufferLength);\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(httpOperation.getStatusCode() >= HttpURLConnection.HTTP_OK && httpOperation.getStatusCode() <= HttpURLConnection.HTTP_PARTIAL)",
            "startLine": 293,
            "endLine": 299,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(httpOperation.getStatusCode() >= HttpURLConnection.HTTP_OK && httpOperation.getStatusCode() <= HttpURLConnection.HTTP_PARTIAL)",
            "startLine": 296,
            "endLine": 302,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 294,
            "endLine": 297,
            "startColumn": 79,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 297,
            "endLine": 300,
            "startColumn": 79,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.BYTES_RECEIVED,httpOperation.getBytesReceived());\n",
            "startLine": 295,
            "endLine": 296,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.BYTES_RECEIVED,httpOperation.getBytesReceived());\n",
            "startLine": 298,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(httpOperation.getStatusCode() == HttpURLConnection.HTTP_UNAVAILABLE)",
            "startLine": 297,
            "endLine": 299,
            "startColumn": 14,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(httpOperation.getStatusCode() == HttpURLConnection.HTTP_UNAVAILABLE)",
            "startLine": 300,
            "endLine": 302,
            "startColumn": 14,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.SERVER_UNAVAILABLE,1);\n",
            "startLine": 298,
            "endLine": 298,
            "startColumn": 9,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.SERVER_UNAVAILABLE,1);\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 9,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(client.getRetryPolicy().shouldRetry(retryCount,httpOperation.getStatusCode()))",
            "startLine": 325,
            "endLine": 327,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(client.getRetryPolicy().shouldRetry(retryCount,httpOperation.getStatusCode()))",
            "startLine": 328,
            "endLine": 330,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 7,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return false;\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 7,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",httpOperation.getConnection().getRequestProperties());\n",
            "startLine": 279,
            "endLine": 280,
            "startColumn": 7,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",httpOperation.getConnection().getRequestProperties());\n",
            "startLine": 283,
            "endLine": 284,
            "startColumn": 7,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.processResponse(buffer,bufferOffset,bufferLength);\n",
            "startLine": 290,
            "endLine": 290,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "httpOperation.processResponse(buffer,bufferOffset,bufferLength);\n",
            "startLine": 293,
            "endLine": 293,
            "startColumn": 7,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.GET_RESPONSES,1);\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 7,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "incrementCounter(AbfsStatistic.GET_RESPONSES,1);\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"HttpRequest: {}: {}\",operationType,httpOperation);\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 5,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"HttpRequest: {}: {}\",operationType,httpOperation);\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 5,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "result=httpOperation;\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "result=httpOperation;\n",
            "startLine": 332,
            "endLine": 332,
            "startColumn": 5,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 331,
            "endLine": 331,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return true;\n",
            "startLine": 334,
            "endLine": 334,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsHttpOperation httpOperation=null;\n",
            "startLine": 244,
            "endLine": 244,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsHttpOperation httpOperation;\n",
            "startLine": 247,
            "endLine": 247,
            "startColumn": 5,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "AbfsClientThrottlingIntercept.updateMetrics(operationType,httpOperation);\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "intercept.updateMetrics(operationType,httpOperation);\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "AbfsClientThrottlingIntercept.sendingRequest(operationType,abfsCounters);\n",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "intercept.sendingRequest(operationType,abfsCounters);\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 7,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 319,
            "endLine": 321,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 322,
            "endLine": 324,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testNoMetricUpdatesThenNoWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 77,
        "endLine": 90,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testNoMetricUpdatesThenNoWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 92,
        "endLine": 104,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",ANALYSIS_PERIOD);\n",
            "startLine": 84,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",abfsConfiguration);\n",
            "startLine": 99,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testOnlySuccessThenNoWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 92,
        "endLine": 105,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testOnlySuccessThenNoWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 106,
        "endLine": 118,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",ANALYSIS_PERIOD);\n",
            "startLine": 98,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",abfsConfiguration);\n",
            "startLine": 112,
            "endLine": 113,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testOnlyErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 107,
        "endLine": 125,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testOnlyErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 120,
        "endLine": 137,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 129,
            "endLine": 129,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(4 * MEGABYTE,true);\n",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(4 * MEGABYTE,true);\n",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration1=1100;\n",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration1=1100;\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration1,analyzer.getSleepDuration());\n",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 5,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration1,analyzer.getSleepDuration());\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 5,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 5,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration2=900;\n",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration2=900;\n",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration2,analyzer.getSleepDuration());\n",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 5,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration2,analyzer.getSleepDuration());\n",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 5,
            "endColumn": 82
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",ANALYSIS_PERIOD);\n",
            "startLine": 114,
            "endLine": 116,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",abfsConfiguration);\n",
            "startLine": 127,
            "endLine": 128,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testSuccessAndErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 127,
        "endLine": 150,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testSuccessAndErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 139,
        "endLine": 161,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 138,
            "endLine": 138,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(2 * MEGABYTE,true);\n",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(2 * MEGABYTE,true);\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();\n",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 5,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.suspendIfNecessary();\n",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.suspendIfNecessary();\n",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedElapsedTime=126;\n",
            "startLine": 143,
            "endLine": 143,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedElapsedTime=126;\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 5,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fuzzyValidate(expectedElapsedTime,timer.elapsedTimeMs(),MAX_ACCEPTABLE_PERCENT_DIFFERENCE);\n",
            "startLine": 144,
            "endLine": 146,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fuzzyValidate(expectedElapsedTime,timer.elapsedTimeMs(),MAX_ACCEPTABLE_PERCENT_DIFFERENCE);\n",
            "startLine": 155,
            "endLine": 157,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 158,
            "endLine": 158,
            "startColumn": 5,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration=110;\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int expectedSleepDuration=110;\n",
            "startLine": 159,
            "endLine": 159,
            "startColumn": 5,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration,analyzer.getSleepDuration());\n",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 5,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validateLessThanOrEqual(expectedSleepDuration,analyzer.getSleepDuration());\n",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 5,
            "endColumn": 81
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",ANALYSIS_PERIOD);\n",
            "startLine": 134,
            "endLine": 136,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",abfsConfiguration);\n",
            "startLine": 146,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testManySuccessAndErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 152,
        "endLine": 176,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.TestAbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "testManySuccessAndErrorsAndWaiting",
        "filePath": "hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azurebfs/services/TestAbfsClientThrottlingAnalyzer.java",
        "startLine": 163,
        "endLine": 186,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < numberOfRequests; i++)",
            "startLine": 164,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < numberOfRequests; i++)",
            "startLine": 174,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(8 * MEGABYTE,false);\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 7,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(2 * MEGABYTE,true);\n",
            "startLine": 166,
            "endLine": 166,
            "startColumn": 7,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.addBytesTransferred(2 * MEGABYTE,true);\n",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int numberOfRequests=20;\n",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "final int numberOfRequests=20;\n",
            "startLine": 173,
            "endLine": 173,
            "startColumn": 5,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(ANALYSIS_PERIOD_PLUS_10_PERCENT);\n",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 5,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.suspendIfNecessary();\n",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "analyzer.suspendIfNecessary();\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fuzzyValidate(7,timer.elapsedTimeMs(),MAX_ACCEPTABLE_PERCENT_DIFFERENCE);\n",
            "startLine": 171,
            "endLine": 173,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fuzzyValidate(7,timer.elapsedTimeMs(),MAX_ACCEPTABLE_PERCENT_DIFFERENCE);\n",
            "startLine": 181,
            "endLine": 183,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sleep(10 * ANALYSIS_PERIOD);\n",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 5,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "validate(0,analyzer.getSleepDuration());\n",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",ANALYSIS_PERIOD);\n",
            "startLine": 159,
            "endLine": 161,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AbfsClientThrottlingAnalyzer analyzer=new AbfsClientThrottlingAnalyzer(\"test\",abfsConfiguration);\n",
            "startLine": 170,
            "endLine": 171,
            "startColumn": 5,
            "endColumn": 36
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7786600744101f5d135ddf083655c88d9f7267a0",
      "url": "https://github.com/apache/hadoop/commit/7786600744101f5d135ddf083655c88d9f7267a0",
      "originalMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "AbfsClientThrottlingAnalyzer",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClientThrottlingAnalyzer.java",
        "startLine": 69,
        "endLine": 96,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.fs.azurebfs.services.AbfsClientThrottlingAnalyzer",
        "type": "Method",
        "name": "AbfsClientThrottlingAnalyzer",
        "filePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClientThrottlingAnalyzer.java",
        "startLine": 65,
        "endLine": 95,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(StringUtils.isNotEmpty(name),\"The argument 'name' cannot be null or empty.\");\n",
            "startLine": 81,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(StringUtils.isNotEmpty(name),\"The argument 'name' cannot be null or empty.\");\n",
            "startLine": 76,
            "endLine": 78,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(period >= MIN_ANALYSIS_PERIOD_MS && period <= MAX_ANALYSIS_PERIOD_MS,\"The argument 'period' must be between 1000 and 30000.\");\n",
            "startLine": 84,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Preconditions.checkArgument(period >= MIN_ANALYSIS_PERIOD_MS && period <= MAX_ANALYSIS_PERIOD_MS,\"The argument 'period' must be between 1000 and 30000.\");\n",
            "startLine": 80,
            "endLine": 82,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.name=name;\n",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.name=name;\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.blobMetrics=new AtomicReference<AbfsOperationMetrics>(new AbfsOperationMetrics(System.currentTimeMillis()));\n",
            "startLine": 89,
            "endLine": 90,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.blobMetrics=new AtomicReference<AbfsOperationMetrics>(new AbfsOperationMetrics(System.currentTimeMillis()));\n",
            "startLine": 88,
            "endLine": 89,
            "startColumn": 5,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.timer=new Timer(String.format(\"abfs-timer-client-throttling-analyzer-%s\",name),true);\n",
            "startLine": 91,
            "endLine": 92,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.timer=new Timer(String.format(\"abfs-timer-client-throttling-analyzer-%s\",name),true);\n",
            "startLine": 90,
            "endLine": 91,
            "startColumn": 5,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.timer.schedule(new TimerTaskImpl(),analysisPeriodMs,analysisPeriodMs);\n",
            "startLine": 93,
            "endLine": 95,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.timer.schedule(new TimerTaskImpl(),analysisPeriodMs,analysisPeriodMs);\n",
            "startLine": 92,
            "endLine": 94,
            "startColumn": 5,
            "endColumn": 27
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.analysisPeriodMs=period;\n",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.analysisPeriodMs=abfsConfiguration.getAnalysisPeriod();\n",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 67
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7cb22eb72d587d4b721c3e072bb2811c767db9ab",
      "url": "https://github.com/apache/hadoop/commit/7cb22eb72d587d4b721c3e072bb2811c767db9ab",
      "originalMethod": {
        "container": "org.apache.hadoop.yarn.server.router.clientrm.FederationClientInterceptor",
        "type": "Method",
        "name": "invokeSubmitApplication",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java",
        "startLine": 505,
        "endLine": 582,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.yarn.server.router.clientrm.FederationClientInterceptor",
        "type": "Method",
        "name": "invokeSubmitApplication",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java",
        "startLine": 494,
        "endLine": 564,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 538,
            "endLine": 577,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 527,
            "endLine": 559,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 568,
            "endLine": 577,
            "startColumn": 27,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 550,
            "endLine": 559,
            "startColumn": 27,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "RouterAuditLogger.logFailure(user.getShortUserName(),SUBMIT_NEW_APP,UNKNOWN,TARGET_CLIENT_RM_SERVICE,e.getMessage(),applicationId,subClusterId);\n",
            "startLine": 569,
            "endLine": 570,
            "startColumn": 7,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "RouterAuditLogger.logFailure(user.getShortUserName(),SUBMIT_NEW_APP,UNKNOWN,TARGET_CLIENT_RM_SERVICE,e.getMessage(),applicationId,subClusterId);\n",
            "startLine": 551,
            "endLine": 552,
            "startColumn": 7,
            "endColumn": 82
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Unable to submitApplication appId {} try #{} on SubCluster {}.\",applicationId,retryCount,subClusterId,e);\n",
            "startLine": 571,
            "endLine": 572,
            "startColumn": 7,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.warn(\"Unable to submitApplication appId {} try #{} on SubCluster {}.\",applicationId,retryCount,subClusterId,e);\n",
            "startLine": 553,
            "endLine": 554,
            "startColumn": 7,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(subClusterId != null)",
            "startLine": 573,
            "endLine": 575,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(subClusterId != null)",
            "startLine": 555,
            "endLine": 557,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "blackList.add(subClusterId);\n",
            "startLine": 574,
            "endLine": 574,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "blackList.add(subClusterId);\n",
            "startLine": 556,
            "endLine": 556,
            "startColumn": 9,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 576,
            "endLine": 576,
            "startColumn": 7,
            "endColumn": 15
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw e;\n",
            "startLine": 558,
            "endLine": 558,
            "startColumn": 7,
            "endColumn": 15
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(response != null)",
            "startLine": 562,
            "endLine": 567,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(response != null)",
            "startLine": 544,
            "endLine": 549,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Application {} submitted on subCluster {}.\",applicationId,subClusterId);\n",
            "startLine": 563,
            "endLine": 563,
            "startColumn": 9,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"Application {} submitted on subCluster {}.\",applicationId,subClusterId);\n",
            "startLine": 545,
            "endLine": 545,
            "startColumn": 9,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "RouterAuditLogger.logSuccess(user.getShortUserName(),SUBMIT_NEW_APP,TARGET_CLIENT_RM_SERVICE,applicationId,subClusterId);\n",
            "startLine": 564,
            "endLine": 565,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "RouterAuditLogger.logSuccess(user.getShortUserName(),SUBMIT_NEW_APP,TARGET_CLIENT_RM_SERVICE,applicationId,subClusterId);\n",
            "startLine": 546,
            "endLine": 547,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return response;\n",
            "startLine": 566,
            "endLine": 566,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return response;\n",
            "startLine": 548,
            "endLine": 548,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationSubmissionContext appSubmissionContext=request.getApplicationSubmissionContext();\n",
            "startLine": 534,
            "endLine": 534,
            "startColumn": 5,
            "endColumn": 99
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationSubmissionContext appSubmissionContext=request.getApplicationSubmissionContext();\n",
            "startLine": 523,
            "endLine": 523,
            "startColumn": 5,
            "endColumn": 99
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationId applicationId=appSubmissionContext.getApplicationId();\n",
            "startLine": 535,
            "endLine": 535,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationId applicationId=appSubmissionContext.getApplicationId();\n",
            "startLine": 524,
            "endLine": 524,
            "startColumn": 5,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SubClusterId subClusterId=null;\n",
            "startLine": 536,
            "endLine": 536,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SubClusterId subClusterId=null;\n",
            "startLine": 525,
            "endLine": 525,
            "startColumn": 5,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subClusterId=policyFacade.getHomeSubcluster(appSubmissionContext,blackList);\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 7,
            "endColumn": 86
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "subClusterId=policyFacade.getHomeSubcluster(appSubmissionContext,blackList);\n",
            "startLine": 530,
            "endLine": 530,
            "startColumn": 7,
            "endColumn": 86
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"submitApplication appId {} try #{} on SubCluster {}.\",applicationId,retryCount,subClusterId);\n",
            "startLine": 542,
            "endLine": 543,
            "startColumn": 7,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"submitApplication appId {} try #{} on SubCluster {}.\",applicationId,retryCount,subClusterId);\n",
            "startLine": 531,
            "endLine": 532,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationClientProtocol clientRMProxy=getClientRMProxyForSubCluster(subClusterId);\n",
            "startLine": 558,
            "endLine": 558,
            "startColumn": 7,
            "endColumn": 93
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationClientProtocol clientRMProxy=getClientRMProxyForSubCluster(subClusterId);\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 7,
            "endColumn": 93
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SubmitApplicationResponse response=clientRMProxy.submitApplication(request);\n",
            "startLine": 559,
            "endLine": 559,
            "startColumn": 7,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SubmitApplicationResponse response=clientRMProxy.submitApplication(request);\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 7,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String msg=String.format(\"Application %s failed to be submitted.\",applicationId);\n",
            "startLine": 580,
            "endLine": 580,
            "startColumn": 5,
            "endColumn": 89
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String msg=String.format(\"Application %s failed to be submitted.\",applicationId);\n",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 5,
            "endColumn": 89
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new YarnException(msg);\n",
            "startLine": 581,
            "endLine": 581,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new YarnException(msg);\n",
            "startLine": 563,
            "endLine": 563,
            "startColumn": 5,
            "endColumn": 34
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationHomeSubCluster appHomeSubCluster=ApplicationHomeSubCluster.newInstance(applicationId,subClusterId);\n",
            "startLine": 548,
            "endLine": 549,
            "startColumn": 7,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "federationFacade.addOrUpdateApplicationHomeSubCluster(applicationId,subClusterId,retryCount);\n",
            "startLine": 536,
            "endLine": 537,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": false
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "7cb22eb72d587d4b721c3e072bb2811c767db9ab",
      "url": "https://github.com/apache/hadoop/commit/7cb22eb72d587d4b721c3e072bb2811c767db9ab",
      "originalMethod": {
        "container": "org.apache.hadoop.yarn.server.router.webapp.FederationInterceptorREST",
        "type": "Method",
        "name": "createNewApplication",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java",
        "startLine": 281,
        "endLine": 360,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.yarn.server.router.webapp.FederationInterceptorREST",
        "type": "Method",
        "name": "createNewApplication",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java",
        "startLine": 266,
        "endLine": 321,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 305,
            "endLine": 311,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 289,
            "endLine": 314,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getLocalizedMessage()).build();\n",
            "startLine": 309,
            "endLine": 310,
            "startColumn": 7,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getLocalizedMessage()).build();\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 7,
            "endColumn": 100
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(response != null && response.getStatus() == HttpServletResponse.SC_OK)",
            "startLine": 339,
            "endLine": 350,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(response != null && response.getStatus() == HttpServletResponse.SC_OK)",
            "startLine": 302,
            "endLine": 306,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 340,
            "endLine": 346,
            "startColumn": 62,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 302,
            "endLine": 306,
            "startColumn": 82,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long stopTime=clock.getTime();\n",
            "startLine": 342,
            "endLine": 342,
            "startColumn": 9,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long stopTime=clock.getTime();\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 9,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.succeededAppsCreated(stopTime - startTime);\n",
            "startLine": 343,
            "endLine": 343,
            "startColumn": 9,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.succeededAppsCreated(stopTime - startTime);\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 9,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return response;\n",
            "startLine": 345,
            "endLine": 345,
            "startColumn": 9,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return response;\n",
            "startLine": 305,
            "endLine": 305,
            "startColumn": 9,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getLocalizedMessage()).build();\n",
            "startLine": 322,
            "endLine": 323,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getLocalizedMessage()).build();\n",
            "startLine": 310,
            "endLine": 310,
            "startColumn": 7,
            "endColumn": 98
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long startTime=clock.getTime();\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "long startTime=clock.getTime();\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 5,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String errMsg=\"Fail to create a new application.\";\n",
            "startLine": 353,
            "endLine": 353,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String errMsg=\"Fail to create a new application.\";\n",
            "startLine": 317,
            "endLine": 317,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(errMsg);\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(errMsg);\n",
            "startLine": 318,
            "endLine": 318,
            "startColumn": 5,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 355,
            "endLine": 355,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 319,
            "endLine": 319,
            "startColumn": 5,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.INTERNAL_SERVER_ERROR).entity(errMsg).build();\n",
            "startLine": 356,
            "endLine": 359,
            "startColumn": 5,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return Response.status(Status.INTERNAL_SERVER_ERROR).entity(errMsg).build();\n",
            "startLine": 320,
            "endLine": 320,
            "startColumn": 5,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "subClustersActive=federationFacade.getSubClusters(true);\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 7,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Map<SubClusterId,SubClusterInfo> subClustersActive=federationFacade.getSubClusters(true);\n",
            "startLine": 290,
            "endLine": 291,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<SubClusterId> blacklist=new ArrayList<>();\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<SubClusterId> blackList=new ArrayList<>();\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 7,
            "endColumn": 56
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 31,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 311,
            "endLine": 314,
            "startColumn": 27,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 7,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 320,
            "endLine": 324,
            "startColumn": 33,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 43,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Response response=null;\n",
            "startLine": 331,
            "endLine": 331,
            "startColumn": 7,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Response response=((FederationActionRetry<Response>)(retryCount) -> invokeGetNewApplication(subClustersActive,blackList,hsr,retryCount)).runWithRetries(actualRetryNums,submitIntervalTime);\n",
            "startLine": 296,
            "endLine": 298,
            "startColumn": 7,
            "endColumn": 63
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 7,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 9,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "routerMetrics.incrAppsFailedCreated();\n",
            "startLine": 312,
            "endLine": 312,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 7,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 307,
            "endLine": 311,
            "startColumn": 7,
            "endColumn": 6
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DefaultRequestInterceptorREST interceptor=getOrCreateInterceptorForSubCluster(subClusterId,subClustersActive.get(subClusterId).getRMWebServiceAddress());\n",
            "startLine": 328,
            "endLine": 330,
            "startColumn": 7,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DefaultRequestInterceptorREST interceptor=getOrCreateInterceptorForSubCluster(subClusterId,subClustersActive.get(subClusterId).getRMWebServiceAddress());\n",
            "startLine": 345,
            "endLine": 346,
            "startColumn": 5,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.debug(\"getNewApplication try #{} on SubCluster {}.\",i,subClusterId);\n",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(\"getNewApplication try #{} on SubCluster {}.\",retryCount,subClusterId);\n",
            "startLine": 343,
            "endLine": 343,
            "startColumn": 5,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response=interceptor.createNewApplication(hsr);\n",
            "startLine": 333,
            "endLine": 333,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Response response=interceptor.createNewApplication(hsr);\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 7,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "blacklist.add(subClusterId);\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "blackList.add(subClusterId);\n",
            "startLine": 354,
            "endLine": 354,
            "startColumn": 7,
            "endColumn": 35
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 332,
            "endLine": 337,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 348,
            "endLine": 356,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 334,
            "endLine": 337,
            "startColumn": 9,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 353,
            "endLine": 356,
            "startColumn": 7,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "eccd2d04924edcc4498ddb05755b8b304a32c86a",
      "url": "https://github.com/apache/hadoop/commit/eccd2d04924edcc4498ddb05755b8b304a32c86a",
      "originalMethod": {
        "container": "org.apache.hadoop.yarn.server.router.clientrm.AbstractClientRequestInterceptor",
        "type": "Method",
        "name": "init",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/AbstractClientRequestInterceptor.java",
        "startLine": 78,
        "endLine": 87,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.yarn.server.router.clientrm.AbstractClientRequestInterceptor",
        "type": "Method",
        "name": "init",
        "filePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/AbstractClientRequestInterceptor.java",
        "startLine": 76,
        "endLine": 85,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(this.nextInterceptor != null)",
            "startLine": 84,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(this.nextInterceptor != null)",
            "startLine": 82,
            "endLine": 84,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "this.nextInterceptor.init(userName);\n",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 7,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.nextInterceptor.init(userName);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 7,
            "endColumn": 43
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "setupUser(userName);\n",
            "startLine": 83,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "this.user=RouterServerUtil.setupUser(userName);\n",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.ReduceMapFileCount",
        "type": "Method",
        "name": "operationComplete",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 305,
        "endLine": 326,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.ReduceMapFileCount",
        "type": "Method",
        "name": "operationComplete",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 359,
        "endLine": 387,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!future.isSuccess())",
            "startLine": 307,
            "endLine": 310,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!future.isSuccess())",
            "startLine": 362,
            "endLine": 366,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(waitCount == 0)",
            "startLine": 312,
            "endLine": 325,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(waitCount == 0)",
            "startLine": 368,
            "endLine": 386,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(reduceContext.getKeepAlive())",
            "startLine": 315,
            "endLine": 322,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(reduceContext.getKeepAlive())",
            "startLine": 375,
            "endLine": 382,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 309,
            "endLine": 309,
            "startColumn": 9,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return;\n",
            "startLine": 365,
            "endLine": 365,
            "startColumn": 9,
            "endColumn": 16
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int waitCount=this.reduceContext.getMapsToWait().decrementAndGet();\n",
            "startLine": 311,
            "endLine": 311,
            "startColumn": 7,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int waitCount=this.reduceContext.getMapsToWait().decrementAndGet();\n",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 7,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.operationComplete(future);\n",
            "startLine": 313,
            "endLine": 313,
            "startColumn": 9,
            "endColumn": 43
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "metrics.operationComplete(future);\n",
            "startLine": 373,
            "endLine": 373,
            "startColumn": 9,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TimeoutHandler timeoutHandler=(TimeoutHandler)pipeline.get(TIMEOUT_HANDLER);\n",
            "startLine": 317,
            "endLine": 318,
            "startColumn": 11,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TimeoutHandler timeoutHandler=(TimeoutHandler)pipeline.get(TIMEOUT_HANDLER);\n",
            "startLine": 377,
            "endLine": 378,
            "startColumn": 11,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "timeoutHandler.setEnabledTimeout(true);\n",
            "startLine": 319,
            "endLine": 319,
            "startColumn": 11,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "timeoutHandler.setEnabledTimeout(true);\n",
            "startLine": 379,
            "endLine": 379,
            "startColumn": 11,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact.getSHUFFLE().sendMap(reduceContext);\n",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 9,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact.getSHUFFLE().sendMap(reduceContext);\n",
            "startLine": 385,
            "endLine": 385,
            "startColumn": 9,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 320,
            "endLine": 322,
            "startColumn": 16,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 380,
            "endLine": 382,
            "startColumn": 16,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 315,
            "endLine": 320,
            "startColumn": 43,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 375,
            "endLine": 380,
            "startColumn": 43,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 312,
            "endLine": 323,
            "startColumn": 27,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 368,
            "endLine": 383,
            "startColumn": 27,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ChannelPipeline pipeline=future.getChannel().getPipeline();\n",
            "startLine": 316,
            "endLine": 316,
            "startColumn": 11,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ChannelPipeline pipeline=future.channel().pipeline();\n",
            "startLine": 376,
            "endLine": 376,
            "startColumn": 11,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 323,
            "endLine": 325,
            "startColumn": 14,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 383,
            "endLine": 386,
            "startColumn": 14,
            "endColumn": 8
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "future.getChannel().close();\n",
            "startLine": 321,
            "endLine": 321,
            "startColumn": 11,
            "endColumn": 39
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "closeChannel(future.channel());\n",
            "startLine": 381,
            "endLine": 381,
            "startColumn": 11,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "future.getChannel().close();\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 9,
            "endColumn": 37
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "closeChannel(future.channel());\n",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 9,
            "endColumn": 40
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler",
        "type": "Method",
        "name": "serviceInit",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 496,
        "endLine": 534,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler",
        "type": "Method",
        "name": "serviceInit",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 557,
        "endLine": 598,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(maxShuffleThreads == 0)",
            "startLine": 508,
            "endLine": 510,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(maxShuffleThreads == 0)",
            "startLine": 574,
            "endLine": 576,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maxShuffleThreads=2 * Runtime.getRuntime().availableProcessors();\n",
            "startLine": 509,
            "endLine": 509,
            "startColumn": 7,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maxShuffleThreads=2 * Runtime.getRuntime().availableProcessors();\n",
            "startLine": 575,
            "endLine": 575,
            "startColumn": 7,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "manageOsCache=conf.getBoolean(SHUFFLE_MANAGE_OS_CACHE,DEFAULT_SHUFFLE_MANAGE_OS_CACHE);\n",
            "startLine": 498,
            "endLine": 499,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "manageOsCache=conf.getBoolean(SHUFFLE_MANAGE_OS_CACHE,DEFAULT_SHUFFLE_MANAGE_OS_CACHE);\n",
            "startLine": 559,
            "endLine": 560,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "readaheadLength=conf.getInt(SHUFFLE_READAHEAD_BYTES,DEFAULT_SHUFFLE_READAHEAD_BYTES);\n",
            "startLine": 501,
            "endLine": 502,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "readaheadLength=conf.getInt(SHUFFLE_READAHEAD_BYTES,DEFAULT_SHUFFLE_READAHEAD_BYTES);\n",
            "startLine": 562,
            "endLine": 563,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maxShuffleConnections=conf.getInt(MAX_SHUFFLE_CONNECTIONS,DEFAULT_MAX_SHUFFLE_CONNECTIONS);\n",
            "startLine": 504,
            "endLine": 505,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maxShuffleConnections=conf.getInt(MAX_SHUFFLE_CONNECTIONS,DEFAULT_MAX_SHUFFLE_CONNECTIONS);\n",
            "startLine": 565,
            "endLine": 566,
            "startColumn": 5,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int maxShuffleThreads=conf.getInt(MAX_SHUFFLE_THREADS,DEFAULT_MAX_SHUFFLE_THREADS);\n",
            "startLine": 506,
            "endLine": 507,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int maxShuffleThreads=conf.getInt(MAX_SHUFFLE_THREADS,DEFAULT_MAX_SHUFFLE_THREADS);\n",
            "startLine": 567,
            "endLine": 568,
            "startColumn": 5,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleBufferSize=conf.getInt(SHUFFLE_BUFFER_SIZE,DEFAULT_SHUFFLE_BUFFER_SIZE);\n",
            "startLine": 512,
            "endLine": 513,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleBufferSize=conf.getInt(SHUFFLE_BUFFER_SIZE,DEFAULT_SHUFFLE_BUFFER_SIZE);\n",
            "startLine": 578,
            "endLine": 579,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleTransferToAllowed=conf.getBoolean(SHUFFLE_TRANSFERTO_ALLOWED,(Shell.WINDOWS) ? WINDOWS_DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED : DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED);\n",
            "startLine": 515,
            "endLine": 517,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleTransferToAllowed=conf.getBoolean(SHUFFLE_TRANSFERTO_ALLOWED,(Shell.WINDOWS) ? WINDOWS_DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED : DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED);\n",
            "startLine": 581,
            "endLine": 583,
            "startColumn": 5,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "maxSessionOpenFiles=conf.getInt(SHUFFLE_MAX_SESSION_OPEN_FILES,DEFAULT_SHUFFLE_MAX_SESSION_OPEN_FILES);\n",
            "startLine": 519,
            "endLine": 520,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "maxSessionOpenFiles=conf.getInt(SHUFFLE_MAX_SESSION_OPEN_FILES,DEFAULT_SHUFFLE_MAX_SESSION_OPEN_FILES);\n",
            "startLine": 585,
            "endLine": 586,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadFactory bossFactory=new ThreadFactoryBuilder().setNameFormat(\"ShuffleHandler Netty Boss #%d\").build();\n",
            "startLine": 522,
            "endLine": 524,
            "startColumn": 5,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadFactory bossFactory=new ThreadFactoryBuilder().setNameFormat(\"ShuffleHandler Netty Boss #%d\").build();\n",
            "startLine": 588,
            "endLine": 590,
            "startColumn": 5,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadFactory workerFactory=new ThreadFactoryBuilder().setNameFormat(\"ShuffleHandler Netty Worker #%d\").build();\n",
            "startLine": 525,
            "endLine": 527,
            "startColumn": 5,
            "endColumn": 16
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ThreadFactory workerFactory=new ThreadFactoryBuilder().setNameFormat(\"ShuffleHandler Netty Worker #%d\").build();\n",
            "startLine": 591,
            "endLine": 593,
            "startColumn": 5,
            "endColumn": 18
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.serviceInit(new Configuration(conf));\n",
            "startLine": 533,
            "endLine": 533,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.serviceInit(new Configuration(conf));\n",
            "startLine": 597,
            "endLine": 597,
            "startColumn": 5,
            "endColumn": 48
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "selector=new NioServerSocketChannelFactory(HadoopExecutors.newCachedThreadPool(bossFactory),HadoopExecutors.newCachedThreadPool(workerFactory),maxShuffleThreads);\n",
            "startLine": 529,
            "endLine": 532,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bossGroup=new NioEventLoopGroup(maxShuffleThreads,bossFactory);\n",
            "startLine": 595,
            "endLine": 595,
            "startColumn": 5,
            "endColumn": 71
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler",
        "type": "Method",
        "name": "serviceStart",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 537,
        "endLine": 575,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler",
        "type": "Method",
        "name": "serviceStart",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 601,
        "endLine": 641,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 546,
            "endLine": 550,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 607,
            "endLine": 611,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 548,
            "endLine": 550,
            "startColumn": 28,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(ex)",
            "startLine": 609,
            "endLine": 611,
            "startColumn": 28,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(ex);\n",
            "startLine": 549,
            "endLine": 549,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Throw Statement",
            "expression": "throw new RuntimeException(ex);\n",
            "startLine": 610,
            "endLine": 610,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=getConfig();\n",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=getConfig();\n",
            "startLine": 603,
            "endLine": 603,
            "startColumn": 5,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "userRsrc=new ConcurrentHashMap<String,String>();\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "userRsrc=new ConcurrentHashMap<String,String>();\n",
            "startLine": 604,
            "endLine": 604,
            "startColumn": 5,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "secretManager=new JobTokenSecretManager();\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "secretManager=new JobTokenSecretManager();\n",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "recoverState(conf);\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "recoverState(conf);\n",
            "startLine": 606,
            "endLine": 606,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "port=conf.getInt(SHUFFLE_PORT_CONFIG_KEY,DEFAULT_SHUFFLE_PORT);\n",
            "startLine": 555,
            "endLine": 555,
            "startColumn": 5,
            "endColumn": 71
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "port=conf.getInt(SHUFFLE_PORT_CONFIG_KEY,DEFAULT_SHUFFLE_PORT);\n",
            "startLine": 621,
            "endLine": 621,
            "startColumn": 5,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "accepted.add(ch);\n",
            "startLine": 557,
            "endLine": 557,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "accepted.add(ch);\n",
            "startLine": 623,
            "endLine": 623,
            "startColumn": 5,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(SHUFFLE_PORT_CONFIG_KEY,Integer.toString(port));\n",
            "startLine": 559,
            "endLine": 559,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(SHUFFLE_PORT_CONFIG_KEY,Integer.toString(port));\n",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 5,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact.SHUFFLE.setPort(port);\n",
            "startLine": 560,
            "endLine": 560,
            "startColumn": 5,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact.SHUFFLE.setPort(port);\n",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(getName() + \" listening on port \" + port);\n",
            "startLine": 561,
            "endLine": 561,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(getName() + \" listening on port \" + port);\n",
            "startLine": 627,
            "endLine": 627,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.serviceStart();\n",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.serviceStart();\n",
            "startLine": 628,
            "endLine": 628,
            "startColumn": 5,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sslFileBufferSize=conf.getInt(SUFFLE_SSL_FILE_BUFFER_SIZE_KEY,DEFAULT_SUFFLE_SSL_FILE_BUFFER_SIZE);\n",
            "startLine": 564,
            "endLine": 565,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sslFileBufferSize=conf.getInt(SUFFLE_SSL_FILE_BUFFER_SIZE_KEY,DEFAULT_SUFFLE_SSL_FILE_BUFFER_SIZE);\n",
            "startLine": 630,
            "endLine": 631,
            "startColumn": 5,
            "endColumn": 74
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "connectionKeepAliveEnabled=conf.getBoolean(SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED);\n",
            "startLine": 566,
            "endLine": 568,
            "startColumn": 5,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "connectionKeepAliveEnabled=conf.getBoolean(SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED);\n",
            "startLine": 632,
            "endLine": 634,
            "startColumn": 5,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "connectionKeepAliveTimeOut=Math.max(1,conf.getInt(SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT));\n",
            "startLine": 569,
            "endLine": 571,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "connectionKeepAliveTimeOut=Math.max(1,conf.getInt(SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT));\n",
            "startLine": 635,
            "endLine": 637,
            "startColumn": 5,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "mapOutputMetaInfoCacheSize=Math.max(1,conf.getInt(SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE,DEFAULT_SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE));\n",
            "startLine": 572,
            "endLine": 574,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "mapOutputMetaInfoCacheSize=Math.max(1,conf.getInt(SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE,DEFAULT_SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE));\n",
            "startLine": 638,
            "endLine": 640,
            "startColumn": 5,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact=new HttpPipelineFactory(conf,timer);\n",
            "startLine": 547,
            "endLine": 547,
            "startColumn": 7,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "pipelineFact=new HttpPipelineFactory(conf);\n",
            "startLine": 608,
            "endLine": 608,
            "startColumn": 7,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "port=((InetSocketAddress)ch.getLocalAddress()).getPort();\n",
            "startLine": 558,
            "endLine": 558,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "port=((InetSocketAddress)ch.localAddress()).getPort();\n",
            "startLine": 624,
            "endLine": 624,
            "startColumn": 5,
            "endColumn": 61
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ServerBootstrap bootstrap=new ServerBootstrap(selector);\n",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootstrap=new ServerBootstrap();\n",
            "startLine": 613,
            "endLine": 613,
            "startColumn": 5,
            "endColumn": 39
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Channel ch=bootstrap.bind(new InetSocketAddress(port));\n",
            "startLine": 556,
            "endLine": 556,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ch=bootstrap.bind(new InetSocketAddress(port)).sync().channel();\n",
            "startLine": 622,
            "endLine": 622,
            "startColumn": 5,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "bootstrap.setOption(\"backlog\",conf.getInt(SHUFFLE_LISTEN_QUEUE_SIZE,DEFAULT_SHUFFLE_LISTEN_QUEUE_SIZE));\n",
            "startLine": 551,
            "endLine": 552,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "bootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG,conf.getInt(SHUFFLE_LISTEN_QUEUE_SIZE,DEFAULT_SHUFFLE_LISTEN_QUEUE_SIZE)).childOption(ChannelOption.SO_KEEPALIVE,true).childHandler(pipelineFact);\n",
            "startLine": 614,
            "endLine": 620,
            "startColumn": 5,
            "endColumn": 37
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.Shuffle",
        "type": "Method",
        "name": "sendMap",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 1037,
        "endLine": 1085,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.Shuffle",
        "type": "Method",
        "name": "sendMap",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 1154,
        "endLine": 1204,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(reduceContext.getMapsToSend().get() < reduceContext.getMapIds().size())",
            "startLine": 1051,
            "endLine": 1083,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(reduceContext.getMapsToSend().get() < reduceContext.getMapIds().size())",
            "startLine": 1167,
            "endLine": 1202,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1056,
            "endLine": 1082,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1172,
            "endLine": 1201,
            "startColumn": 9,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(info == null)",
            "startLine": 1058,
            "endLine": 1061,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(info == null)",
            "startLine": 1174,
            "endLine": 1177,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "info=getMapOutputInfo(mapId,reduceContext.getReduceId(),reduceContext.getJobId(),reduceContext.getUser());\n",
            "startLine": 1059,
            "endLine": 1060,
            "startColumn": 13,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "info=getMapOutputInfo(mapId,reduceContext.getReduceId(),reduceContext.getJobId(),reduceContext.getUser());\n",
            "startLine": 1175,
            "endLine": 1176,
            "startColumn": 13,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(e instanceof DiskChecker.DiskErrorException)",
            "startLine": 1073,
            "endLine": 1077,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(e instanceof DiskChecker.DiskErrorException)",
            "startLine": 1192,
            "endLine": 1196,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ChannelFuture nextMap=null;\n",
            "startLine": 1050,
            "endLine": 1050,
            "startColumn": 7,
            "endColumn": 36
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ChannelFuture nextMap=null;\n",
            "startLine": 1166,
            "endLine": 1166,
            "startColumn": 7,
            "endColumn": 36
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int nextIndex=reduceContext.getMapsToSend().getAndIncrement();\n",
            "startLine": 1053,
            "endLine": 1053,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int nextIndex=reduceContext.getMapsToSend().getAndIncrement();\n",
            "startLine": 1169,
            "endLine": 1169,
            "startColumn": 9,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String mapId=reduceContext.getMapIds().get(nextIndex);\n",
            "startLine": 1054,
            "endLine": 1054,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String mapId=reduceContext.getMapIds().get(nextIndex);\n",
            "startLine": 1170,
            "endLine": 1170,
            "startColumn": 9,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MapOutputInfo info=reduceContext.getInfoMap().get(mapId);\n",
            "startLine": 1057,
            "endLine": 1057,
            "startColumn": 11,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MapOutputInfo info=reduceContext.getInfoMap().get(mapId);\n",
            "startLine": 1173,
            "endLine": 1173,
            "startColumn": 11,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sendError(reduceContext.getCtx(),NOT_FOUND);\n",
            "startLine": 1068,
            "endLine": 1068,
            "startColumn": 13,
            "endColumn": 58
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sendError(reduceContext.getCtx(),NOT_FOUND);\n",
            "startLine": 1186,
            "endLine": 1186,
            "startColumn": 13,
            "endColumn": 58
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 1069,
            "endLine": 1069,
            "startColumn": 13,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 1188,
            "endLine": 1188,
            "startColumn": 13,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "nextMap.addListener(new ReduceMapFileCount(reduceContext));\n",
            "startLine": 1071,
            "endLine": 1071,
            "startColumn": 11,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "nextMap.addListener(new ReduceMapFileCount(reduceContext));\n",
            "startLine": 1190,
            "endLine": 1190,
            "startColumn": 11,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String errorMessage=getErrorMessage(e);\n",
            "startLine": 1078,
            "endLine": 1078,
            "startColumn": 11,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String errorMessage=getErrorMessage(e);\n",
            "startLine": 1197,
            "endLine": 1197,
            "startColumn": 11,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "sendError(reduceContext.getCtx(),errorMessage,INTERNAL_SERVER_ERROR);\n",
            "startLine": 1079,
            "endLine": 1080,
            "startColumn": 11,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "sendError(reduceContext.getCtx(),errorMessage,INTERNAL_SERVER_ERROR);\n",
            "startLine": 1198,
            "endLine": 1199,
            "startColumn": 11,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 1081,
            "endLine": 1081,
            "startColumn": 11,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 1200,
            "endLine": 1200,
            "startColumn": 11,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return nextMap;\n",
            "startLine": 1084,
            "endLine": 1084,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return nextMap;\n",
            "startLine": 1203,
            "endLine": 1203,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 1072,
            "endLine": 1082,
            "startColumn": 33,
            "endColumn": 10
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(e)",
            "startLine": 1191,
            "endLine": 1201,
            "startColumn": 33,
            "endColumn": 10
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1052,
            "endLine": 1083,
            "startColumn": 45,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1168,
            "endLine": 1202,
            "startColumn": 45,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(null == nextMap)",
            "startLine": 1067,
            "endLine": 1070,
            "startColumn": 11,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(nextMap == null)",
            "startLine": 1184,
            "endLine": 1189,
            "startColumn": 11,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "nextMap=sendMapOutput(reduceContext.getCtx(),reduceContext.getCtx().getChannel(),reduceContext.getUser(),mapId,reduceContext.getReduceId(),info);\n",
            "startLine": 1062,
            "endLine": 1066,
            "startColumn": 11,
            "endColumn": 50
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "nextMap=sendMapOutput(reduceContext.getCtx(),reduceContext.getCtx().channel(),reduceContext.getUser(),mapId,reduceContext.getReduceId(),info);\n",
            "startLine": 1179,
            "endLine": 1183,
            "startColumn": 11,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1075,
            "endLine": 1077,
            "startColumn": 18,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1194,
            "endLine": 1196,
            "startColumn": 18,
            "endColumn": 12
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(\"Shuffle error :\",e);\n",
            "startLine": 1076,
            "endLine": 1076,
            "startColumn": 13,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(\"Shuffle error: \",e);\n",
            "startLine": 1195,
            "endLine": 1195,
            "startColumn": 13,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(\"Shuffle error :\" + e);\n",
            "startLine": 1074,
            "endLine": 1074,
            "startColumn": 13,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.error(\"Shuffle error: \" + e);\n",
            "startLine": 1193,
            "endLine": 1193,
            "startColumn": 13,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1073,
            "endLine": 1075,
            "startColumn": 60,
            "endColumn": 12
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 1192,
            "endLine": 1194,
            "startColumn": 60,
            "endColumn": 12
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.Shuffle",
        "type": "Method",
        "name": "sendError",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 1313,
        "endLine": 1330,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.ShuffleHandler.Shuffle",
        "type": "Method",
        "name": "sendError",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "startLine": 1428,
        "endLine": 1444,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(header: headers.entrySet())",
            "startLine": 1322,
            "endLine": 1324,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(header: headers.entrySet())",
            "startLine": 1438,
            "endLine": 1440,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(header.getKey(),header.getValue());\n",
            "startLine": 1323,
            "endLine": 1323,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(header.getKey(),header.getValue());\n",
            "startLine": 1439,
            "endLine": 1439,
            "startColumn": 9,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(CONTENT_TYPE,\"text/plain; charset=UTF-8\");\n",
            "startLine": 1316,
            "endLine": 1316,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(CONTENT_TYPE,\"text/plain; charset=UTF-8\");\n",
            "startLine": 1432,
            "endLine": 1432,
            "startColumn": 7,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 1318,
            "endLine": 1319,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 1434,
            "endLine": 1435,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 1320,
            "endLine": 1321,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "response.headers().set(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 1436,
            "endLine": 1437,
            "startColumn": 7,
            "endColumn": 54
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);\n",
            "startLine": 1329,
            "endLine": 1329,
            "startColumn": 7,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "writeToChannelAndClose(ctx.channel(),response);\n",
            "startLine": 1443,
            "endLine": 1443,
            "startColumn": 7,
            "endColumn": 55
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpResponse response=new DefaultHttpResponse(HTTP_1_1,status);\n",
            "startLine": 1315,
            "endLine": 1315,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,status,Unpooled.copiedBuffer(msg,CharsetUtil.UTF_8));\n",
            "startLine": 1430,
            "endLine": 1431,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler.MockShuffleHandler2",
        "type": "Method",
        "name": "getShuffle",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 189,
        "endLine": 200,
        "startColumn": 5,
        "endColumn": 6
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler.MockShuffleHandler2",
        "type": "Method",
        "name": "getShuffle",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 802,
        "endLine": 820,
        "startColumn": 5,
        "endColumn": 6
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SocketChannel channel=(SocketChannel)(ctx.getChannel());\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 11,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "SocketChannel channel=(SocketChannel)(ctx.channel());\n",
            "startLine": 808,
            "endLine": 808,
            "startColumn": 11,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "socketKeepAlive=channel.getConfig().isKeepAlive();\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 11,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "socketKeepAlive=channel.config().isKeepAlive();\n",
            "startLine": 809,
            "endLine": 809,
            "startColumn": 11,
            "endColumn": 60
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri) throws IOException {\n    SocketChannel channel=(SocketChannel)(ctx.getChannel());\n    socketKeepAlive=channel.getConfig().isKeepAlive();\n  }\n}\n;\n",
            "startLine": 191,
            "endLine": 199,
            "startColumn": 7,
            "endColumn": 9
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri){\n    SocketChannel channel=(SocketChannel)(ctx.channel());\n    socketKeepAlive=channel.config().isKeepAlive();\n  }\n  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {\n    LOG.debug(\"ExceptionCaught\");\n    failures.add(cause);\n    super.exceptionCaught(ctx,cause);\n  }\n}\n;\n",
            "startLine": 804,
            "endLine": 819,
            "startColumn": 7,
            "endColumn": 9
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testClientClosesConnection",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 258,
        "endLine": 354,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testClientClosesConnection",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 912,
        "endLine": 1008,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < 100000; ++i)",
            "startLine": 305,
            "endLine": 307,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "For Statement",
            "expression": "for(int i=0; i < 100000; ++i)",
            "startLine": 956,
            "endLine": 958,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "header.write(dob);\n",
            "startLine": 306,
            "endLine": 306,
            "startColumn": 15,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "header.write(dob);\n",
            "startLine": 957,
            "endLine": 957,
            "startColumn": 15,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failures.size() == 0)",
            "startLine": 313,
            "endLine": 316,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failures.size() == 0)",
            "startLine": 964,
            "endLine": 967,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(failures.size() == 0)",
            "startLine": 321,
            "endLine": 324,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(failures.size() == 0)",
            "startLine": 972,
            "endLine": 975,
            "startColumn": 13,
            "endColumn": 14
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 266,
            "endLine": 266,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 919,
            "endLine": 919,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 276,
            "endLine": 276,
            "startColumn": 13,
            "endColumn": 25
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return null;\n",
            "startLine": 930,
            "endLine": 930,
            "startColumn": 13,
            "endColumn": 25
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "super.setResponseHeaders(response,keepAliveParam,100);\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 13,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "super.setResponseHeaders(response,keepAliveParam,100);\n",
            "startLine": 939,
            "endLine": 939,
            "startColumn": 13,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n",
            "startLine": 299,
            "endLine": 300,
            "startColumn": 13,
            "endColumn": 75
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n",
            "startLine": 950,
            "endLine": 951,
            "startColumn": 13,
            "endColumn": 75
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataOutputBuffer dob=new DataOutputBuffer();\n",
            "startLine": 301,
            "endLine": 301,
            "startColumn": 13,
            "endColumn": 59
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataOutputBuffer dob=new DataOutputBuffer();\n",
            "startLine": 952,
            "endLine": 952,
            "startColumn": 13,
            "endColumn": 59
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "header.write(dob);\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 13,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "header.write(dob);\n",
            "startLine": 953,
            "endLine": 953,
            "startColumn": 13,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "dob=new DataOutputBuffer();\n",
            "startLine": 304,
            "endLine": 304,
            "startColumn": 13,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "dob=new DataOutputBuffer();\n",
            "startLine": 955,
            "endLine": 955,
            "startColumn": 13,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failures.add(new Error());\n",
            "startLine": 314,
            "endLine": 314,
            "startColumn": 15,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failures.add(new Error());\n",
            "startLine": 965,
            "endLine": 965,
            "startColumn": 15,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "failures.add(new Error());\n",
            "startLine": 322,
            "endLine": 322,
            "startColumn": 15,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "failures.add(new Error());\n",
            "startLine": 973,
            "endLine": 973,
            "startColumn": 15,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 5,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 980,
            "endLine": 980,
            "startColumn": 5,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 981,
            "endLine": 981,
            "startColumn": 5,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY) + \"/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_1_0\");\n",
            "startLine": 334,
            "endLine": 336,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY) + \"/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_1_0\");\n",
            "startLine": 985,
            "endLine": 987,
            "startColumn": 5,
            "endColumn": 76
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 338,
            "endLine": 339,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 989,
            "endLine": 990,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 340,
            "endLine": 341,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 991,
            "endLine": 992,
            "startColumn": 5,
            "endColumn": 52
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 342,
            "endLine": 342,
            "startColumn": 5,
            "endColumn": 20
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 993,
            "endLine": 993,
            "startColumn": 5,
            "endColumn": 20
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataInputStream input=new DataInputStream(conn.getInputStream());\n",
            "startLine": 343,
            "endLine": 343,
            "startColumn": 5,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataInputStream input=new DataInputStream(conn.getInputStream());\n",
            "startLine": 994,
            "endLine": 994,
            "startColumn": 5,
            "endColumn": 72
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHeader header=new ShuffleHeader();\n",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHeader header=new ShuffleHeader();\n",
            "startLine": 998,
            "endLine": 998,
            "startColumn": 5,
            "endColumn": 48
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "header.readFields(input);\n",
            "startLine": 348,
            "endLine": 348,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "header.readFields(input);\n",
            "startLine": 999,
            "endLine": 999,
            "startColumn": 5,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "input.close();\n",
            "startLine": 349,
            "endLine": 349,
            "startColumn": 5,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "input.close();\n",
            "startLine": 1000,
            "endLine": 1000,
            "startColumn": 5,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 351,
            "endLine": 351,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 1007,
            "endLine": 1007,
            "startColumn": 5,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assert.assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());\n",
            "startLine": 344,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 76
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());\n",
            "startLine": 995,
            "endLine": 995,
            "startColumn": 5,
            "endColumn": 69
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assert.assertEquals(\"close\",conn.getHeaderField(HttpHeader.CONNECTION.asString()));\n",
            "startLine": 345,
            "endLine": 346,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"close\",conn.getHeaderField(HttpHeader.CONNECTION.asString()));\n",
            "startLine": 996,
            "endLine": 997,
            "startColumn": 5,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n",
            "startLine": 308,
            "endLine": 308,
            "startColumn": 13,
            "endColumn": 79
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n",
            "startLine": 959,
            "endLine": 959,
            "startColumn": 13,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ctx.getChannel().close();\n",
            "startLine": 315,
            "endLine": 315,
            "startColumn": 15,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ctx.channel().close();\n",
            "startLine": 966,
            "endLine": 966,
            "startColumn": 15,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ctx.getChannel().close();\n",
            "startLine": 323,
            "endLine": 323,
            "startColumn": 15,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ctx.channel().close();\n",
            "startLine": 974,
            "endLine": 974,
            "startColumn": 15,
            "endColumn": 37
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 13,
            "endColumn": 72
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n",
            "startLine": 954,
            "endLine": 954,
            "startColumn": 13,
            "endColumn": 80
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);\n",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,TEST_EXECUTION.shuffleHandlerPort());\n",
            "startLine": 920,
            "endLine": 920,
            "startColumn": 5,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHandler shuffleHandler=new ShuffleHandler(){\n  @Override protected Shuffle getShuffle(  Configuration conf){\n    return new Shuffle(conf){\n      @Override protected MapOutputInfo getMapOutputInfo(      String mapId,      int reduce,      String jobId,      String user) throws IOException {\n        return null;\n      }\n      @Override protected void populateHeaders(      List<String> mapIds,      String jobId,      String user,      int reduce,      HttpRequest request,      HttpResponse response,      boolean keepAliveParam,      Map<String,MapOutputInfo> infoMap) throws IOException {\n        super.setResponseHeaders(response,keepAliveParam,100);\n      }\n      @Override protected void verifyRequest(      String appid,      ChannelHandlerContext ctx,      HttpRequest request,      HttpResponse response,      URL requestUri) throws IOException {\n      }\n      @Override protected ChannelFuture sendMapOutput(      ChannelHandlerContext ctx,      Channel ch,      String user,      String mapId,      int reduce,      MapOutputInfo info) throws IOException {\n        ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n        DataOutputBuffer dob=new DataOutputBuffer();\n        header.write(dob);\n        ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n        dob=new DataOutputBuffer();\n        for (int i=0; i < 100000; ++i) {\n          header.write(dob);\n        }\n        return ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n      }\n      @Override protected void sendError(      ChannelHandlerContext ctx,      HttpResponseStatus status){\n        if (failures.size() == 0) {\n          failures.add(new Error());\n          ctx.getChannel().close();\n        }\n      }\n      @Override protected void sendError(      ChannelHandlerContext ctx,      String message,      HttpResponseStatus status){\n        if (failures.size() == 0) {\n          failures.add(new Error());\n          ctx.getChannel().close();\n        }\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 268,
            "endLine": 328,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHandlerForTests shuffleHandler=new ShuffleHandlerForTests(){\n  @Override protected Shuffle getShuffle(  Configuration conf){\n    return new Shuffle(conf){\n      @Override protected MapOutputInfo getMapOutputInfo(      String mapId,      int reduce,      String jobId,      String user){\n        return null;\n      }\n      @Override protected void populateHeaders(      List<String> mapIds,      String jobId,      String user,      int reduce,      HttpRequest request,      HttpResponse response,      boolean keepAliveParam,      Map<String,MapOutputInfo> infoMap){\n        super.setResponseHeaders(response,keepAliveParam,100);\n      }\n      @Override protected void verifyRequest(      String appid,      ChannelHandlerContext ctx,      HttpRequest request,      HttpResponse response,      URL requestUri){\n      }\n      @Override protected ChannelFuture sendMapOutput(      ChannelHandlerContext ctx,      Channel ch,      String user,      String mapId,      int reduce,      MapOutputInfo info) throws IOException {\n        ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n        DataOutputBuffer dob=new DataOutputBuffer();\n        header.write(dob);\n        ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n        dob=new DataOutputBuffer();\n        for (int i=0; i < 100000; ++i) {\n          header.write(dob);\n        }\n        return ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n      }\n      @Override protected void sendError(      ChannelHandlerContext ctx,      HttpResponseStatus status){\n        if (failures.size() == 0) {\n          failures.add(new Error());\n          ctx.channel().close();\n        }\n      }\n      @Override protected void sendError(      ChannelHandlerContext ctx,      String message,      HttpResponseStatus status){\n        if (failures.size() == 0) {\n          failures.add(new Error());\n          ctx.channel().close();\n        }\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 921,
            "endLine": 979,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assert.assertTrue(\"sendError called when client closed connection\",failures.size() == 0);\n",
            "startLine": 352,
            "endLine": 353,
            "startColumn": 5,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertEquals(\"sendError called when client closed connection\",0,shuffleHandler.failures.size());\n",
            "startLine": 1002,
            "endLine": 1003,
            "startColumn": 5,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=(HttpURLConnection)url.openConnection();\n",
            "startLine": 337,
            "endLine": 337,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn;\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected MapOutputInfo getMapOutputInfo(  String mapId,  int reduce,  String jobId,  String user) throws IOException {\n    return null;\n  }\n  @Override protected void populateHeaders(  List<String> mapIds,  String jobId,  String user,  int reduce,  HttpRequest request,  HttpResponse response,  boolean keepAliveParam,  Map<String,MapOutputInfo> infoMap) throws IOException {\n    super.setResponseHeaders(response,keepAliveParam,100);\n  }\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri) throws IOException {\n  }\n  @Override protected ChannelFuture sendMapOutput(  ChannelHandlerContext ctx,  Channel ch,  String user,  String mapId,  int reduce,  MapOutputInfo info) throws IOException {\n    ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n    DataOutputBuffer dob=new DataOutputBuffer();\n    header.write(dob);\n    ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n    dob=new DataOutputBuffer();\n    for (int i=0; i < 100000; ++i) {\n      header.write(dob);\n    }\n    return ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));\n  }\n  @Override protected void sendError(  ChannelHandlerContext ctx,  HttpResponseStatus status){\n    if (failures.size() == 0) {\n      failures.add(new Error());\n      ctx.getChannel().close();\n    }\n  }\n  @Override protected void sendError(  ChannelHandlerContext ctx,  String message,  HttpResponseStatus status){\n    if (failures.size() == 0) {\n      failures.add(new Error());\n      ctx.getChannel().close();\n    }\n  }\n}\n;\n",
            "startLine": 272,
            "endLine": 326,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected MapOutputInfo getMapOutputInfo(  String mapId,  int reduce,  String jobId,  String user){\n    return null;\n  }\n  @Override protected void populateHeaders(  List<String> mapIds,  String jobId,  String user,  int reduce,  HttpRequest request,  HttpResponse response,  boolean keepAliveParam,  Map<String,MapOutputInfo> infoMap){\n    super.setResponseHeaders(response,keepAliveParam,100);\n  }\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri){\n  }\n  @Override protected ChannelFuture sendMapOutput(  ChannelHandlerContext ctx,  Channel ch,  String user,  String mapId,  int reduce,  MapOutputInfo info) throws IOException {\n    ShuffleHeader header=new ShuffleHeader(\"attempt_12345_1_m_1_0\",5678,5678,1);\n    DataOutputBuffer dob=new DataOutputBuffer();\n    header.write(dob);\n    ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n    dob=new DataOutputBuffer();\n    for (int i=0; i < 100000; ++i) {\n      header.write(dob);\n    }\n    return ch.writeAndFlush(wrappedBuffer(dob.getData(),0,dob.getLength()));\n  }\n  @Override protected void sendError(  ChannelHandlerContext ctx,  HttpResponseStatus status){\n    if (failures.size() == 0) {\n      failures.add(new Error());\n      ctx.channel().close();\n    }\n  }\n  @Override protected void sendError(  ChannelHandlerContext ctx,  String message,  HttpResponseStatus status){\n    if (failures.size() == 0) {\n      failures.add(new Error());\n      ctx.channel().close();\n    }\n  }\n}\n;\n",
            "startLine": 926,
            "endLine": 977,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testSocketKeepAlive",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 514,
        "endLine": 553,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testSocketKeepAlive",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 1187,
        "endLine": 1231,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 528,
            "endLine": 552,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1202,
            "endLine": 1228,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 547,
            "endLine": 552,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1223,
            "endLine": 1228,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(conn != null)",
            "startLine": 548,
            "endLine": 550,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(conn != null)",
            "startLine": 1224,
            "endLine": 1226,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.disconnect();\n",
            "startLine": 549,
            "endLine": 549,
            "startColumn": 9,
            "endColumn": 27
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.disconnect();\n",
            "startLine": 1225,
            "endLine": 1225,
            "startColumn": 9,
            "endColumn": 27
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 551,
            "endLine": 551,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 1227,
            "endLine": 1227,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 516,
            "endLine": 516,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 1189,
            "endLine": 1189,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setBoolean(ShuffleHandler.SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED,true);\n",
            "startLine": 518,
            "endLine": 518,
            "startColumn": 5,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setBoolean(ShuffleHandler.SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED,true);\n",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 5,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockShuffleHandler2 shuffleHandler=new MockShuffleHandler2();\n",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 5,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "MockShuffleHandler2 shuffleHandler=new MockShuffleHandler2();\n",
            "startLine": 1196,
            "endLine": 1196,
            "startColumn": 5,
            "endColumn": 68
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuxiliaryLocalPathHandler pathHandler=mock(AuxiliaryLocalPathHandler.class);\n",
            "startLine": 523,
            "endLine": 524,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuxiliaryLocalPathHandler pathHandler=mock(AuxiliaryLocalPathHandler.class);\n",
            "startLine": 1197,
            "endLine": 1198,
            "startColumn": 5,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "when(pathHandler.getLocalPathForRead(anyString())).thenThrow(new DiskChecker.DiskErrorException(\"Test\"));\n",
            "startLine": 525,
            "endLine": 526,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "when(pathHandler.getLocalPathForRead(anyString())).thenThrow(new DiskChecker.DiskErrorException(\"Test\"));\n",
            "startLine": 1199,
            "endLine": 1200,
            "startColumn": 5,
            "endColumn": 53
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.setAuxiliaryLocalPathHandler(pathHandler);\n",
            "startLine": 527,
            "endLine": 527,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.setAuxiliaryLocalPathHandler(pathHandler);\n",
            "startLine": 1201,
            "endLine": 1201,
            "startColumn": 5,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 529,
            "endLine": 529,
            "startColumn": 7,
            "endColumn": 33
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 1203,
            "endLine": 1203,
            "startColumn": 7,
            "endColumn": 33
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 530,
            "endLine": 530,
            "startColumn": 7,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 1204,
            "endLine": 1204,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String shuffleBaseURL=\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY);\n",
            "startLine": 532,
            "endLine": 534,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String shuffleBaseURL=\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY);\n",
            "startLine": 1206,
            "endLine": 1208,
            "startColumn": 7,
            "endColumn": 57
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(shuffleBaseURL + \"/mapOutput?job=job_12345_1&reduce=1&\" + \"map=attempt_12345_1_m_1_0\");\n",
            "startLine": 535,
            "endLine": 537,
            "startColumn": 7,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(shuffleBaseURL + \"/mapOutput?job=job_12345_1&reduce=1&\" + \"map=attempt_12345_1_m_1_0\");\n",
            "startLine": 1209,
            "endLine": 1211,
            "startColumn": 7,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 539,
            "endLine": 540,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 1213,
            "endLine": 1214,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 541,
            "endLine": 542,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 1215,
            "endLine": 1216,
            "startColumn": 7,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 1217,
            "endLine": 1217,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.getInputStream();\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.getInputStream();\n",
            "startLine": 1219,
            "endLine": 1219,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);\n",
            "startLine": 517,
            "endLine": 517,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,TEST_EXECUTION.shuffleHandlerPort());\n",
            "startLine": 1190,
            "endLine": 1190,
            "startColumn": 5,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assert.assertTrue(\"socket should be set KEEP_ALIVE\",shuffleHandler.isSocketKeepAlive());\n",
            "startLine": 545,
            "endLine": 546,
            "startColumn": 7,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(\"socket should be set KEEP_ALIVE\",shuffleHandler.isSocketKeepAlive());\n",
            "startLine": 1221,
            "endLine": 1222,
            "startColumn": 7,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT,-100);\n",
            "startLine": 520,
            "endLine": 520,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT,ARBITRARY_NEGATIVE_TIMEOUT_SECONDS);\n",
            "startLine": 1193,
            "endLine": 1194,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn=(HttpURLConnection)url.openConnection();\n",
            "startLine": 538,
            "endLine": 538,
            "startColumn": 7,
            "endColumn": 55
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn=(HttpURLConnection)url.openConnection();\n",
            "startLine": 175,
            "endLine": 175,
            "startColumn": 9,
            "endColumn": 57
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=null;\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn;\n",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=null;\n",
            "startLine": 521,
            "endLine": 521,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=null;\n",
            "startLine": 1195,
            "endLine": 1195,
            "startColumn": 5,
            "endColumn": 35
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/apache/hadoop.git",
      "sha1": "5bb11cecea136acccac2563b37021b554e517012",
      "url": "https://github.com/apache/hadoop/commit/5bb11cecea136acccac2563b37021b554e517012",
      "originalMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testMapFileAccess",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 701,
        "endLine": 790,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "org.apache.hadoop.mapred.TestShuffleHandler",
        "type": "Method",
        "name": "testMapFileAccess",
        "filePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java",
        "startLine": 1417,
        "endLine": 1528,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 745,
            "endLine": 789,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 1478,
            "endLine": 1524,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 786,
            "endLine": 789,
            "startColumn": 15,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Finally Clause",
            "expression": "finally",
            "startLine": 1521,
            "endLine": 1524,
            "startColumn": 15,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 787,
            "endLine": 787,
            "startColumn": 7,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.stop();\n",
            "startLine": 1522,
            "endLine": 1522,
            "startColumn": 7,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "FileUtil.fullyDelete(ABS_LOG_DIR);\n",
            "startLine": 788,
            "endLine": 788,
            "startColumn": 7,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "FileUtil.fullyDelete(ABS_LOG_DIR);\n",
            "startLine": 1523,
            "endLine": 1523,
            "startColumn": 7,
            "endColumn": 41
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(NativeIO.isAvailable());\n",
            "startLine": 710,
            "endLine": 710,
            "startColumn": 5,
            "endColumn": 40
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assumeTrue(NativeIO.isAvailable());\n",
            "startLine": 1427,
            "endLine": 1427,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 711,
            "endLine": 711,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Configuration conf=new Configuration();\n",
            "startLine": 1428,
            "endLine": 1428,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.MAX_SHUFFLE_CONNECTIONS,3);\n",
            "startLine": 713,
            "endLine": 713,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.MAX_SHUFFLE_CONNECTIONS,3);\n",
            "startLine": 1430,
            "endLine": 1430,
            "startColumn": 5,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\"kerberos\");\n",
            "startLine": 714,
            "endLine": 715,
            "startColumn": 5,
            "endColumn": 21
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\"kerberos\");\n",
            "startLine": 1431,
            "endLine": 1432,
            "startColumn": 5,
            "endColumn": 21
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "UserGroupInformation.setConfiguration(conf);\n",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "UserGroupInformation.setConfiguration(conf);\n",
            "startLine": 1433,
            "endLine": 1433,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(YarnConfiguration.NM_LOCAL_DIRS,ABS_LOG_DIR.getAbsolutePath());\n",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.set(YarnConfiguration.NM_LOCAL_DIRS,ABS_LOG_DIR.getAbsolutePath());\n",
            "startLine": 1434,
            "endLine": 1434,
            "startColumn": 5,
            "endColumn": 78
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationId appId=ApplicationId.newInstance(12345,1);\n",
            "startLine": 718,
            "endLine": 718,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ApplicationId appId=ApplicationId.newInstance(12345,1);\n",
            "startLine": 1435,
            "endLine": 1435,
            "startColumn": 5,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(appId.toString());\n",
            "startLine": 719,
            "endLine": 719,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "LOG.info(appId.toString());\n",
            "startLine": 1436,
            "endLine": 1436,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String appAttemptId=\"attempt_12345_1_m_1_0\";\n",
            "startLine": 720,
            "endLine": 720,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String appAttemptId=\"attempt_12345_1_m_1_0\";\n",
            "startLine": 1437,
            "endLine": 1437,
            "startColumn": 5,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String user=\"randomUser\";\n",
            "startLine": 721,
            "endLine": 721,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String user=\"randomUser\";\n",
            "startLine": 1438,
            "endLine": 1438,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String reducerId=\"0\";\n",
            "startLine": 722,
            "endLine": 722,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String reducerId=\"0\";\n",
            "startLine": 1439,
            "endLine": 1439,
            "startColumn": 5,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "createShuffleHandlerFiles(ABS_LOG_DIR,user,appId.toString(),appAttemptId,conf,fileMap);\n",
            "startLine": 724,
            "endLine": 725,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "createShuffleHandlerFiles(ABS_LOG_DIR,user,appId.toString(),appAttemptId,conf,fileMap);\n",
            "startLine": 1441,
            "endLine": 1442,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuxiliaryLocalPathHandler pathHandler=new TestAuxiliaryLocalPathHandler();\n",
            "startLine": 742,
            "endLine": 742,
            "startColumn": 5,
            "endColumn": 81
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "AuxiliaryLocalPathHandler pathHandler=new TestAuxiliaryLocalPathHandler();\n",
            "startLine": 1474,
            "endLine": 1474,
            "startColumn": 5,
            "endColumn": 81
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.setAuxiliaryLocalPathHandler(pathHandler);\n",
            "startLine": 743,
            "endLine": 743,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.setAuxiliaryLocalPathHandler(pathHandler);\n",
            "startLine": 1476,
            "endLine": 1476,
            "startColumn": 5,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 744,
            "endLine": 744,
            "startColumn": 5,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.init(conf);\n",
            "startLine": 1477,
            "endLine": 1477,
            "startColumn": 5,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 746,
            "endLine": 746,
            "startColumn": 7,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.start();\n",
            "startLine": 1479,
            "endLine": 1479,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataOutputBuffer outputBuffer=new DataOutputBuffer();\n",
            "startLine": 747,
            "endLine": 747,
            "startColumn": 7,
            "endColumn": 62
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataOutputBuffer outputBuffer=new DataOutputBuffer();\n",
            "startLine": 1480,
            "endLine": 1480,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "outputBuffer.reset();\n",
            "startLine": 748,
            "endLine": 748,
            "startColumn": 7,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "outputBuffer.reset();\n",
            "startLine": 1481,
            "endLine": 1481,
            "startColumn": 7,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "jt.write(outputBuffer);\n",
            "startLine": 752,
            "endLine": 752,
            "startColumn": 7,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "jt.write(outputBuffer);\n",
            "startLine": 1485,
            "endLine": 1485,
            "startColumn": 7,
            "endColumn": 30
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.initializeApplication(new ApplicationInitializationContext(user,appId,ByteBuffer.wrap(outputBuffer.getData(),0,outputBuffer.getLength())));\n",
            "startLine": 753,
            "endLine": 756,
            "startColumn": 7,
            "endColumn": 41
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "shuffleHandler.initializeApplication(new ApplicationInitializationContext(user,appId,ByteBuffer.wrap(outputBuffer.getData(),0,outputBuffer.getLength())));\n",
            "startLine": 1486,
            "endLine": 1489,
            "startColumn": 7,
            "endColumn": 43
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY) + \"/mapOutput?job=job_12345_0001&reduce=\"+ reducerId+ \"&map=attempt_12345_1_m_1_0\");\n",
            "startLine": 757,
            "endLine": 763,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URL url=new URL(\"http://127.0.0.1:\" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY) + \"/mapOutput?job=job_12345_0001&reduce=\"+ reducerId+ \"&map=attempt_12345_1_m_1_0\");\n",
            "startLine": 1490,
            "endLine": 1496,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 765,
            "endLine": 766,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n",
            "startLine": 1498,
            "endLine": 1499,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 767,
            "endLine": 768,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n",
            "startLine": 1500,
            "endLine": 1501,
            "startColumn": 7,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 769,
            "endLine": 769,
            "startColumn": 7,
            "endColumn": 22
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conn.connect();\n",
            "startLine": 1502,
            "endLine": 1502,
            "startColumn": 7,
            "endColumn": 22
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=\"Owner '\" + owner + \"' for path \"+ fileMap.get(0).getAbsolutePath()+ \" did not match expected owner '\"+ user+ \"'\";\n",
            "startLine": 782,
            "endLine": 784,
            "startColumn": 7,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String message=\"Owner '\" + owner + \"' for path \"+ fileMap.get(0).getAbsolutePath()+ \" did not match expected owner '\"+ user+ \"'\";\n",
            "startLine": 1512,
            "endLine": 1514,
            "startColumn": 7,
            "endColumn": 64
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataInputStream is=new DataInputStream(conn.getInputStream());\n",
            "startLine": 772,
            "endLine": 772,
            "startColumn": 9,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "DataInputStream is=new DataInputStream(conn.getInputStream());\n",
            "startLine": 1503,
            "endLine": 1503,
            "startColumn": 7,
            "endColumn": 71
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "is.close();\n",
            "startLine": 780,
            "endLine": 780,
            "startColumn": 7,
            "endColumn": 18
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fis.close();\n",
            "startLine": 1510,
            "endLine": 1510,
            "startColumn": 7,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String owner=NativeIO.POSIX.getFstat(is.getFD()).getOwner();\n",
            "startLine": 779,
            "endLine": 779,
            "startColumn": 7,
            "endColumn": 69
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String owner=NativeIO.POSIX.getFstat(fis.getFD()).getOwner();\n",
            "startLine": 1509,
            "endLine": 1509,
            "startColumn": 7,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileInputStream is=new FileInputStream(fileMap.get(0));\n",
            "startLine": 778,
            "endLine": 778,
            "startColumn": 7,
            "endColumn": 64
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "FileInputStream fis=new FileInputStream(fileMap.get(0));\n",
            "startLine": 1508,
            "endLine": 1508,
            "startColumn": 7,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHandler shuffleHandler=new ShuffleHandler(){\n  @Override protected Shuffle getShuffle(  Configuration conf){\n    return new Shuffle(conf){\n      @Override protected void verifyRequest(      String appid,      ChannelHandlerContext ctx,      HttpRequest request,      HttpResponse response,      URL requestUri) throws IOException {\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 726,
            "endLine": 741,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "ShuffleHandler shuffleHandler=new ShuffleHandler(){\n  @Override protected Shuffle getShuffle(  Configuration conf){\n    return new Shuffle(conf){\n      @Override protected void verifyRequest(      String appid,      ChannelHandlerContext ctx,      HttpRequest request,      HttpResponse response,      URL requestUri){\n      }\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause) throws Exception {\n        LOG.debug(\"ExceptionCaught\");\n        failures.add(cause);\n        super.exceptionCaught(ctx,cause);\n      }\n      @Override public void channelActive(      ChannelHandlerContext ctx) throws Exception {\n        ctx.pipeline().replace(HttpResponseEncoder.class,\"loggingResponseEncoder\",new LoggingHttpResponseEncoder(false));\n        LOG.debug(\"Modified pipeline: {}\",ctx.pipeline());\n        super.channelActive(ctx);\n      }\n    }\n;\n  }\n}\n;\n",
            "startLine": 1443,
            "endLine": 1473,
            "startColumn": 5,
            "endColumn": 7
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);\n",
            "startLine": 712,
            "endLine": 712,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,TEST_EXECUTION.shuffleHandlerPort());\n",
            "startLine": 1429,
            "endLine": 1429,
            "startColumn": 5,
            "endColumn": 94
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Assert.assertTrue((new String(byteArr)).contains(message));\n",
            "startLine": 785,
            "endLine": 785,
            "startColumn": 7,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertTrue(String.format(\"Received string '%s' should contain \" + \"message '%s'\",receivedString,message),receivedString.contains(message));\n",
            "startLine": 1515,
            "endLine": 1517,
            "startColumn": 7,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<File> fileMap=new ArrayList<File>();\n",
            "startLine": 723,
            "endLine": 723,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "List<File> fileMap=new ArrayList<>();\n",
            "startLine": 1440,
            "endLine": 1440,
            "startColumn": 5,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Token<JobTokenIdentifier> jt=new Token<JobTokenIdentifier>(\"identifier\".getBytes(),\"password\".getBytes(),new Text(user),new Text(\"shuffleService\"));\n",
            "startLine": 749,
            "endLine": 751,
            "startColumn": 7,
            "endColumn": 82
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Token<JobTokenIdentifier> jt=new Token<>(\"identifier\".getBytes(),\"password\".getBytes(),new Text(user),new Text(\"shuffleService\"));\n",
            "startLine": 1482,
            "endLine": 1484,
            "startColumn": 7,
            "endColumn": 82
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=(HttpURLConnection)url.openConnection();\n",
            "startLine": 764,
            "endLine": 764,
            "startColumn": 7,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpURLConnection conn=TEST_EXECUTION.openConnection(url);\n",
            "startLine": 1497,
            "endLine": 1497,
            "startColumn": 7,
            "endColumn": 67
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri) throws IOException {\n  }\n}\n;\n",
            "startLine": 730,
            "endLine": 739,
            "startColumn": 9,
            "endColumn": 11
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return new Shuffle(conf){\n  @Override protected void verifyRequest(  String appid,  ChannelHandlerContext ctx,  HttpRequest request,  HttpResponse response,  URL requestUri){\n  }\n  @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause) throws Exception {\n    LOG.debug(\"ExceptionCaught\");\n    failures.add(cause);\n    super.exceptionCaught(ctx,cause);\n  }\n  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {\n    ctx.pipeline().replace(HttpResponseEncoder.class,\"loggingResponseEncoder\",new LoggingHttpResponseEncoder(false));\n    LOG.debug(\"Modified pipeline: {}\",ctx.pipeline());\n    super.channelActive(ctx);\n  }\n}\n;\n",
            "startLine": 1447,
            "endLine": 1471,
            "startColumn": 9,
            "endColumn": 11
          },
          "developerConfirmation": true
        }
      ]
    }
  ]
}