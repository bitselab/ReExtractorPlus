{
  "results": [
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "59ae0c138d6468aac5d92781b19cddc26e04e862",
      "url": "https://github.com/square/okhttp/commit/59ae0c138d6468aac5d92781b19cddc26e04e862",
      "originalMethod": {
        "container": "okhttp3.internal.cache2.FileOperatorTest",
        "type": "Method",
        "name": "setUp",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache2/FileOperatorTest.java",
        "startLine": 42,
        "endLine": 45,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.cache2.FileOperatorTest",
        "type": "Method",
        "name": "setUp",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache2/FileOperatorTest.java",
        "startLine": 40,
        "endLine": 43,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "randomAccessFile=new RandomAccessFile(file,\"rw\");\n",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "randomAccessFile=new RandomAccessFile(file,\"rw\");\n",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "file=tempDir.newFile();\n",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "file=new File(tempDir,\"test\");\n",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 5,
            "endColumn": 38
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "url": "https://github.com/square/okhttp/commit/62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "originalMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "test",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 209,
        "endLine": 228,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "test",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 130,
        "endLine": 151,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: encodings.entrySet())",
            "startLine": 210,
            "endLine": 226,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(entry: encodings.entrySet())",
            "startLine": 131,
            "endLine": 149,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(encoding == Encoding.SKIP)",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 7,
            "endColumn": 47
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(encoding == Encoding.SKIP)",
            "startLine": 142,
            "endLine": 142,
            "startColumn": 7,
            "endColumn": 47
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Encoding encoding=entry.getValue();\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 7,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Encoding encoding=entry.getValue();\n",
            "startLine": 132,
            "endLine": 132,
            "startColumn": 7,
            "endColumn": 44
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int codePoint=entry.getKey();\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 7,
            "endColumn": 38
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "int codePoint=entry.getKey();\n",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 7,
            "endColumn": 38
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testParseAlreadyEncoded(codePoint,encoding,component);\n",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 7,
            "endColumn": 63
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testParseAlreadyEncoded(codePoint,encoding,component);\n",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 7,
            "endColumn": 63
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testToUrl(codePoint,encoding,component);\n",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 7,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testToUrl(codePoint,encoding,component);\n",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 7,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testFromUrl(codePoint,encoding,component);\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testFromUrl(codePoint,encoding,component);\n",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 7,
            "endColumn": 51
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 227,
            "endLine": 227,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 150,
            "endLine": 150,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testEncodeAndDecode(codePoint,component);\n",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 7,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testEncodeAndDecode(codePoint,codePointString,component);\n",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 7,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(codePoint != '%')",
            "startLine": 221,
            "endLine": 225,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(encoding == Encoding.FORBIDDEN)",
            "startLine": 136,
            "endLine": 139,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testParseOriginal(codePoint,encoding,component);\n",
            "startLine": 216,
            "endLine": 216,
            "startColumn": 7,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testParseOriginal(codePoint,codePointString,encoding,component);\n",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 7,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testUri(codePoint,encoding,component,uriEscaped);\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testForbidden(codePoint,codePointString,component);\n",
            "startLine": 137,
            "endLine": 137,
            "startColumn": 9,
            "endColumn": 62
          },
          "developerConfirmation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "testUri(codePoint,encoding,component,uriEscaped);\n",
            "startLine": 224,
            "endLine": 224,
            "startColumn": 9,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "testUri(codePoint,codePointString,encoding,component);\n",
            "startLine": 148,
            "endLine": 148,
            "startColumn": 7,
            "endColumn": 64
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "url": "https://github.com/square/okhttp/commit/62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "originalMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testParseAlreadyEncoded",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 230,
        "endLine": 237,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testParseAlreadyEncoded",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 153,
        "endLine": 162,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl url=HttpUrl.get(urlString);\n",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl url=HttpUrl.get(urlString);\n",
            "startLine": 156,
            "endLine": 156,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String urlString=component.urlString(encoded);\n",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String urlString=component.urlString(expected);\n",
            "startLine": 155,
            "endLine": 155,
            "startColumn": 5,
            "endColumn": 54
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String encoded=encoding.encode(codePoint);\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String expected=component.canonicalize(encoding.encode(codePoint));\n",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 5,
            "endColumn": 74
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 7,
            "endColumn": 85
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s: '%s' != '%s'\",component,codePoint,encoding,actual,expected));\n",
            "startLine": 159,
            "endLine": 160,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!component.encodedValue(url).equals(encoded))",
            "startLine": 234,
            "endLine": 236,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!actual.equals(expected))",
            "startLine": 158,
            "endLine": 161,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "url": "https://github.com/square/okhttp/commit/62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "originalMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testUri",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 281,
        "endLine": 305,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testUri",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 207,
        "endLine": 243,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(uriEscaped)",
            "startLine": 288,
            "endLine": 304,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(uriEscaped)",
            "startLine": 226,
            "endLine": 234,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(uri.toString().equals(httpUrl.toString()))",
            "startLine": 290,
            "endLine": 292,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(uri.toString().equals(httpUrl.toString()))",
            "startLine": 227,
            "endLine": 229,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!toAndFromUri.equals(httpUrl))",
            "startLine": 298,
            "endLine": 300,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!toAndFromUri.equals(httpUrl))",
            "startLine": 237,
            "endLine": 239,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!uri.toString().equals(httpUrl.toString()))",
            "startLine": 301,
            "endLine": 303,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!uri.toString().equals(httpUrl.toString()))",
            "startLine": 240,
            "endLine": 242,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 7,
            "endColumn": 85
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 293,
            "endLine": 295,
            "startColumn": 56,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 230,
            "endLine": 232,
            "startColumn": 65,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 294,
            "endLine": 294,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 231,
            "endLine": 231,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String encoded=encoding.encode(codePoint);\n",
            "startLine": 284,
            "endLine": 284,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String encoded=encoding.encode(codePoint);\n",
            "startLine": 211,
            "endLine": 211,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl httpUrl=HttpUrl.get(component.urlString(encoded));\n",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl httpUrl=HttpUrl.get(component.urlString(encoded));\n",
            "startLine": 212,
            "endLine": 212,
            "startColumn": 5,
            "endColumn": 65
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URI uri=httpUrl.uri();\n",
            "startLine": 286,
            "endLine": 286,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "URI uri=httpUrl.uri();\n",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 5,
            "endColumn": 29
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl toAndFromUri=HttpUrl.get(uri);\n",
            "startLine": 287,
            "endLine": 287,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl toAndFromUri=HttpUrl.get(uri);\n",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 5,
            "endColumn": 45
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 288,
            "endLine": 296,
            "startColumn": 21,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 226,
            "endLine": 234,
            "startColumn": 21,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 238,
            "endLine": 238,
            "startColumn": 7,
            "endColumn": 85
          },
          "developerConfirmation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#x using %s\",component,codePoint,encoding));\n",
            "startLine": 219,
            "endLine": 219,
            "startColumn": 9,
            "endColumn": 87
          },
          "developerConfirmation": false
        },
        {
          "leftSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 296,
            "endLine": 304,
            "startColumn": 12,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Block",
            "expression": "{",
            "startLine": 217,
            "endLine": 222,
            "startColumn": 22,
            "endColumn": 6
          },
          "developerConfirmation": false
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "url": "https://github.com/square/okhttp/commit/62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "originalMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testParseOriginal",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 250,
        "endLine": 261,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "testParseOriginal",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 175,
        "endLine": 187,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(encoding != Encoding.PERCENT)",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(encoding != Encoding.PERCENT)",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl url=HttpUrl.get(urlString);\n",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "HttpUrl url=HttpUrl.get(urlString);\n",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 5,
            "endColumn": 42
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String s=component.encodedValue(url);\n",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String actual=component.encodedValue(url);\n",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 5,
            "endColumn": 49
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String encoded=encoding.encode(codePoint);\n",
            "startLine": 251,
            "endLine": 251,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String expected=encoding.encode(codePoint);\n",
            "startLine": 177,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 50
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String urlString=component.urlString(identity);\n",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "String urlString=component.urlString(codePointString);\n",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 5,
            "endColumn": 61
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#02x using %s\",component,codePoint,encoding));\n",
            "startLine": 259,
            "endLine": 259,
            "startColumn": 7,
            "endColumn": 87
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail(Util.format(\"Encoding %s %#02x using %s: '%s' != '%s'\",component,codePoint,encoding,actual,expected));\n",
            "startLine": 184,
            "endLine": 185,
            "startColumn": 7,
            "endColumn": 62
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(!s.equals(encoded))",
            "startLine": 258,
            "endLine": 260,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(!actual.equals(expected))",
            "startLine": 183,
            "endLine": 186,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "url": "https://github.com/square/okhttp/commit/62cf6c24efc2c088455a5b74c325dae3b9a8ac6f",
      "originalMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "identityForNonAscii",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 193,
        "endLine": 198,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.UrlComponentEncodingTester",
        "type": "Method",
        "name": "nonAscii",
        "filePath": "okhttp/src/test/java/okhttp3/UrlComponentEncodingTester.java",
        "startLine": 105,
        "endLine": 110,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 5,
            "endColumn": 17
          },
          "rightSideLocation": {
            "type": "Return Statement",
            "expression": "return this;\n",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 17
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_2,Encoding.IDENTITY);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_2,encoding);\n",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_3,Encoding.IDENTITY);\n",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_3,encoding);\n",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_4,Encoding.IDENTITY);\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "encodings.put(UNICODE_4,encoding);\n",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 5,
            "endColumn": 40
          },
          "developerConfirmation": true
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "url": "https://github.com/square/okhttp/commit/7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "originalMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "shrinkMaxSizeEvicts",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 535,
        "endLine": 543,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "shrinkMaxSizeEvicts",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 537,
        "endLine": 545,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.close();\n",
            "startLine": 536,
            "endLine": 536,
            "startColumn": 5,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.close();\n",
            "startLine": 538,
            "endLine": 538,
            "startColumn": 5,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "createNewCacheWithSize(20);\n",
            "startLine": 537,
            "endLine": 537,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "createNewCacheWithSize(20);\n",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 5,
            "endColumn": 32
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"a\",\"a\",\"aaa\");\n",
            "startLine": 538,
            "endLine": 538,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"a\",\"a\",\"aaa\");\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 5,
            "endColumn": 26
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"b\",\"bb\",\"bbbb\");\n",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"b\",\"bb\",\"bbbb\");\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 5,
            "endColumn": 28
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"c\",\"c\",\"c\");\n",
            "startLine": 540,
            "endLine": 540,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"c\",\"c\",\"c\");\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.setMaxSize(10);\n",
            "startLine": 541,
            "endLine": 541,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.setMaxSize(10);\n",
            "startLine": 543,
            "endLine": 543,
            "startColumn": 5,
            "endColumn": 26
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(executor.jobs.size()).isEqualTo(1);\n",
            "startLine": 542,
            "endLine": 542,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(taskFaker.isIdle()).isFalse();\n",
            "startLine": 544,
            "endLine": 544,
            "startColumn": 5,
            "endColumn": 46
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "url": "https://github.com/square/okhttp/commit/7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "originalMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "constructorDoesNotAllowZeroCacheSize",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 663,
        "endLine": 669,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "constructorDoesNotAllowZeroCacheSize",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 665,
        "endLine": 671,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 664,
            "endLine": 668,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 666,
            "endLine": 670,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(expected)",
            "startLine": 667,
            "endLine": 668,
            "startColumn": 49,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(expected)",
            "startLine": 669,
            "endLine": 670,
            "startColumn": 49,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail();\n",
            "startLine": 666,
            "endLine": 666,
            "startColumn": 7,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail();\n",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 7,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "DiskLruCache.Companion.create(fileSystem,cacheDir,appVersion,2,0);\n",
            "startLine": 665,
            "endLine": 665,
            "startColumn": 7,
            "endColumn": 77
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "new DiskLruCache(fileSystem,cacheDir,appVersion,2,0,taskRunner);\n",
            "startLine": 667,
            "endLine": 667,
            "startColumn": 7,
            "endColumn": 76
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "url": "https://github.com/square/okhttp/commit/7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "originalMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "constructorDoesNotAllowZeroValuesPerEntry",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 671,
        "endLine": 677,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "constructorDoesNotAllowZeroValuesPerEntry",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 673,
        "endLine": 679,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 672,
            "endLine": 676,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Try Statement",
            "expression": "try",
            "startLine": 674,
            "endLine": 678,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(expected)",
            "startLine": 675,
            "endLine": 676,
            "startColumn": 49,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Catch Clause",
            "expression": "catch(expected)",
            "startLine": 677,
            "endLine": 678,
            "startColumn": 49,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "fail();\n",
            "startLine": 674,
            "endLine": 674,
            "startColumn": 7,
            "endColumn": 14
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "fail();\n",
            "startLine": 676,
            "endLine": 676,
            "startColumn": 7,
            "endColumn": 14
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "DiskLruCache.Companion.create(fileSystem,cacheDir,appVersion,0,10);\n",
            "startLine": 673,
            "endLine": 673,
            "startColumn": 7,
            "endColumn": 78
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "new DiskLruCache(fileSystem,cacheDir,appVersion,0,10,taskRunner);\n",
            "startLine": 675,
            "endLine": 675,
            "startColumn": 7,
            "endColumn": 77
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "url": "https://github.com/square/okhttp/commit/7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "originalMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "openCreatesDirectoryIfNecessary",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 978,
        "endLine": 986,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.cache.DiskLruCacheTest",
        "type": "Method",
        "name": "openCreatesDirectoryIfNecessary",
        "filePath": "okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java",
        "startLine": 980,
        "endLine": 988,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.close();\n",
            "startLine": 979,
            "endLine": 979,
            "startColumn": 5,
            "endColumn": 19
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cache.close();\n",
            "startLine": 981,
            "endLine": 981,
            "startColumn": 5,
            "endColumn": 19
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File dir=tempDir.newFolder(\"testOpenCreatesDirectoryIfNecessary\");\n",
            "startLine": 980,
            "endLine": 980,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "File dir=tempDir.newFolder(\"testOpenCreatesDirectoryIfNecessary\");\n",
            "startLine": 982,
            "endLine": 982,
            "startColumn": 5,
            "endColumn": 73
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"a\",\"a\",\"a\");\n",
            "startLine": 982,
            "endLine": 982,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "set(\"a\",\"a\",\"a\");\n",
            "startLine": 984,
            "endLine": 984,
            "startColumn": 5,
            "endColumn": 24
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"a.0\"))).isTrue();\n",
            "startLine": 983,
            "endLine": 983,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"a.0\"))).isTrue();\n",
            "startLine": 985,
            "endLine": 985,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"a.1\"))).isTrue();\n",
            "startLine": 984,
            "endLine": 984,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"a.1\"))).isTrue();\n",
            "startLine": 986,
            "endLine": 986,
            "startColumn": 5,
            "endColumn": 66
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"journal\"))).isTrue();\n",
            "startLine": 985,
            "endLine": 985,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(fileSystem.exists(new File(dir,\"journal\"))).isTrue();\n",
            "startLine": 987,
            "endLine": 987,
            "startColumn": 5,
            "endColumn": 70
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "cache=DiskLruCache.Companion.create(fileSystem,dir,appVersion,2,Integer.MAX_VALUE);\n",
            "startLine": 981,
            "endLine": 981,
            "startColumn": 5,
            "endColumn": 94
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "cache=new DiskLruCache(fileSystem,dir,appVersion,2,Integer.MAX_VALUE,taskRunner);\n",
            "startLine": 983,
            "endLine": 983,
            "startColumn": 5,
            "endColumn": 93
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "url": "https://github.com/square/okhttp/commit/7624d99eafcd3dd847f36335d4c99560c55ab6bd",
      "originalMethod": {
        "container": "okhttp3.internal.connection.ConnectionPoolTest",
        "type": "Method",
        "name": "interruptStopsThread",
        "filePath": "okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java",
        "startLine": 186,
        "endLine": 207,
        "startColumn": 3,
        "endColumn": 4
      },
      "refactoredMethod": {
        "container": "okhttp3.internal.connection.ConnectionPoolTest",
        "type": "Method",
        "name": "interruptStopsThread",
        "filePath": "okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java",
        "startLine": 186,
        "endLine": 207,
        "startColumn": 3,
        "endColumn": 4
      },
      "commonMatching": [
        {
          "leftSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(t: threads)",
            "startLine": 198,
            "endLine": 202,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "type": "Enhanced For Statement",
            "expression": "for(t: threads)",
            "startLine": 198,
            "endLine": 202,
            "startColumn": 5,
            "endColumn": 6
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "If Statement",
            "expression": "if(t != null && t.getName().equals(\"OkHttp Task Coordinator\"))",
            "startLine": 199,
            "endLine": 201,
            "startColumn": 7,
            "endColumn": 8
          },
          "rightSideLocation": {
            "type": "If Statement",
            "expression": "if(t != null && t.getName().equals(\"OkHttp Task Coordinator\"))",
            "startLine": 199,
            "endLine": 201,
            "startColumn": 7,
            "endColumn": 8
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "t.interrupt();\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 9,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "t.interrupt();\n",
            "startLine": 200,
            "endLine": 200,
            "startColumn": 9,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RealConnectionPool pool=new RealConnectionPool(realTaskRunner,2,100L,TimeUnit.NANOSECONDS);\n",
            "startLine": 188,
            "endLine": 189,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RealConnectionPool pool=new RealConnectionPool(realTaskRunner,2,100L,TimeUnit.NANOSECONDS);\n",
            "startLine": 188,
            "endLine": 189,
            "startColumn": 5,
            "endColumn": 56
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RealConnection c1=newConnection(pool,routeA1,Long.MAX_VALUE);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "RealConnection c1=newConnection(pool,routeA1,Long.MAX_VALUE);\n",
            "startLine": 190,
            "endLine": 190,
            "startColumn": 5,
            "endColumn": 70
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(realTaskRunner.activeQueues()).isNotEmpty();\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(realTaskRunner.activeQueues()).isNotEmpty();\n",
            "startLine": 192,
            "endLine": 192,
            "startColumn": 5,
            "endColumn": 60
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(100);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(100);\n",
            "startLine": 194,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread[] threads=new Thread[Thread.activeCount() * 2];\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 5,
            "endColumn": 61
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "Thread[] threads=new Thread[Thread.activeCount() * 2];\n",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 5,
            "endColumn": 61
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.enumerate(threads);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 5,
            "endColumn": 31
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.enumerate(threads);\n",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 5,
            "endColumn": 31
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(100);\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "Thread.sleep(100);\n",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 5,
            "endColumn": 23
          },
          "developerConfirmation": true
        },
        {
          "leftSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(realTaskRunner.activeQueues()).isEmpty();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "type": "Expression Statement",
            "expression": "assertThat(realTaskRunner.activeQueues()).isEmpty();\n",
            "startLine": 206,
            "endLine": 206,
            "startColumn": 5,
            "endColumn": 57
          },
          "developerConfirmation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TaskRunner realTaskRunner=TaskRunner.Companion.getINSTANCE();\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 5,
            "endColumn": 68
          },
          "rightSideLocation": {
            "type": "Variable Declaration Statement",
            "expression": "TaskRunner realTaskRunner=TaskRunner.INSTANCE;\n",
            "startLine": 187,
            "endLine": 187,
            "startColumn": 5,
            "endColumn": 53
          },
          "developerConfirmation": true
        }
      ],
      "baseline": []
    }
  ]
}